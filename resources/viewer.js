/*! For license information please see viewer.js.LICENSE.txt */
(()=>{"use strict";var t={114:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"/* style sheet for the panel on the left, which contains the tree view of the slides */\n\n\n\n#left-panel {\n    position: relative;\n    color: black;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--light-blue);\n    width: 0;\n    vertical-align: top;\n    cursor: default;\n    white-space: nowrap;\n    overflow: hidden;\n    resize: horizontal;\n    font-size: 12px;\n}\n\n\n\n.tree-view-item {\n    overflow: hidden;\n    white-space: nowrap;\n    display: block;\n    color: gray;\n    margin-bottom: 5px;\n    cursor: pointer;\n}\n\n.tree-view-item-seen {\n    color: black;\n}\n\n.tree-view-item-loading {\n    color: red;\n}\n\n.tree-view-item i {\n    margin-right: 5px;\n    cursor: pointer;\n    font-size: 10px;\n}\n\n.slide-stack {\n    font-size: 10px;\n    margin-top: 5px;\n    margin-left: 1.5em;\n    overflow: scroll;\n}\n\n.slide-stack-hidden {\n    display: none;\n}\n\n#slide-stack-container {\n    overflow: scroll;\n    margin-top: 10px\n}\n\n.disabled-event {\n    text-decoration: line-through;\n}\n\n\n#made-using-slajdomat {\n    margin: 10px;\n    padding-left: 7px;\n    /* display: flex;\n    flex-direction: row;\n    align-items: center; */\n}\n\n#made-using-slajdomat img {\n    width: 100px;\n}\n\n/* this is the pdf button */\n#link-to-pdf {\n    float: right;\n    cursor: pointer;\n    color: var(--blue);\n}\n\n\n#logo-line {\n    font-size: 20px;\n    margin-top: 5px;\n    margin-bottom: 5px;\n}\n\n#logo-second-line {\n    margin: 0px;\n}\n\n#search-panel {\n    display: flex;\n    flex-direction: column;\n}\n\n#search-box {\n    display: flex;\n    margin-top: 5px;\n}\n\n#search-box i {\n    margin: 3px;\n    font-size: 18px;\n}\n\n#search-box input {\n    width: 100%;\n}\n\n#search-results {\n    margin-left: 5px;\n    margin-top: 5px;\n}\n\n.one-result {\n    padding: 5px;\n}\n\n.one-result:hover {\n    background-color: white;\n    cursor: pointer;\n}\n\n.search-result-text {\n    color: grey;\n\n}\n\n/* the container with the tab heads */\n#tab-heads {\n    display: flex;\n    flex-direction: row;\n}\n\n/* the tab heads them selves */\n#tab-heads>div {\n    margin-left: 10px;\n    padding: 5px;\n    border: 1px solid var(--blue);\n    border-bottom: none;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    cursor: pointer;\n}\n\n/* if the tab head is active, then it has a different colour */\n#tab-heads>.active {\n    background-color: var(--very-light-blue);\n}\n\n#tab-contents {\n    background-color: var(--very-light-blue);\n    flex-grow: 1;\n}\n\n#tab-contents>div {\n    display: none;\n}\n\n#tab-contents>div.active {\n    display: flex;\n    flex-direction: column;\n    overflow-y: scroll;\n}\n\n\n\n#tab-contents>div>div {\n    padding: 10px;\n    border-bottom: 1px solid var(--light-blue);\n}\n\np {\n    white-space: initial;\n}\n\n.checkbox-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.hidden {\n    display: none;\n}\n\n\n/*  a div with a button and caption in the left panel */\n.button-line {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.button-line>span.material-icons {\n    cursor: pointer;\n    color: var(--blue);\n    margin-left: 7px;\n    margin-right: 7px;\n}\n\n.button-line.disabled>span.material-icons {\n    cursor: default;\n    color: gray;\n}\n\n/* disabled class for button lines */\n\n.button-line.disabled {\n    color: gray;\n    cursor: default;\n}\n\n\n\n.growAndShrink {\n    transition: transform 0.3s ease-in-out;\n    /* Transition property for smooth scaling */\n    animation: growAndShrinkFrames 1s infinite ease-in-out;\n    /* Duration and easing */\n}\n\n/* Define the animation */\n@keyframes growAndShrinkFrames {\n\n    0%,\n    100% {\n        transform: scale(1);\n        /* Start and end state: normal size */\n    }\n\n    50% {\n        transform: scale(1.2);\n        color: red;\n        /* Middle state: slightly larger */\n    }\n}\n\n","",{version:3,sources:["webpack://./src/viewer/css/left-panel.css"],names:[],mappings:"AAAA,sFAAsF;;;;AAItF;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mCAAmC;IACnC,QAAQ;IACR,mBAAmB;IACnB,eAAe;IACf,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;IAClB,eAAe;AACnB;;;;AAIA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB;AACJ;;AAEA;IACI,6BAA6B;AACjC;;;AAGA;IACI,YAAY;IACZ,iBAAiB;IACjB;;0BAEsB;AAC1B;;AAEA;IACI,YAAY;AAChB;;AAEA,2BAA2B;AAC3B;IACI,YAAY;IACZ,eAAe;IACf,kBAAkB;AACtB;;;AAGA;IACI,eAAe;IACf,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,WAAW;;AAEf;;AAEA,qCAAqC;AACrC;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA,8BAA8B;AAC9B;IACI,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;IAC7B,mBAAmB;IACnB,2BAA2B;IAC3B,4BAA4B;IAC5B,eAAe;AACnB;;AAEA,8DAA8D;AAC9D;IACI,wCAAwC;AAC5C;;AAEA;IACI,wCAAwC;IACxC,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;AACtB;;;;AAIA;IACI,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;;AAGA;IACI,aAAa;AACjB;;;AAGA,uDAAuD;AACvD;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;;AAGA;IACI,eAAe;IACf,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,WAAW;AACf;;AAEA,oCAAoC;;AAEpC;IACI,WAAW;IACX,eAAe;AACnB;;;;AAIA;IACI,sCAAsC;IACtC,2CAA2C;IAC3C,sDAAsD;IACtD,wBAAwB;AAC5B;;AAEA,yBAAyB;AACzB;;IAEI;;QAEI,mBAAmB;QACnB,qCAAqC;IACzC;;IAEA;QACI,qBAAqB;QACrB,UAAU;QACV,kCAAkC;IACtC;AACJ",sourcesContent:["/* style sheet for the panel on the left, which contains the tree view of the slides */\n\n\n\n#left-panel {\n    position: relative;\n    color: black;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--light-blue);\n    width: 0;\n    vertical-align: top;\n    cursor: default;\n    white-space: nowrap;\n    overflow: hidden;\n    resize: horizontal;\n    font-size: 12px;\n}\n\n\n\n.tree-view-item {\n    overflow: hidden;\n    white-space: nowrap;\n    display: block;\n    color: gray;\n    margin-bottom: 5px;\n    cursor: pointer;\n}\n\n.tree-view-item-seen {\n    color: black;\n}\n\n.tree-view-item-loading {\n    color: red;\n}\n\n.tree-view-item i {\n    margin-right: 5px;\n    cursor: pointer;\n    font-size: 10px;\n}\n\n.slide-stack {\n    font-size: 10px;\n    margin-top: 5px;\n    margin-left: 1.5em;\n    overflow: scroll;\n}\n\n.slide-stack-hidden {\n    display: none;\n}\n\n#slide-stack-container {\n    overflow: scroll;\n    margin-top: 10px\n}\n\n.disabled-event {\n    text-decoration: line-through;\n}\n\n\n#made-using-slajdomat {\n    margin: 10px;\n    padding-left: 7px;\n    /* display: flex;\n    flex-direction: row;\n    align-items: center; */\n}\n\n#made-using-slajdomat img {\n    width: 100px;\n}\n\n/* this is the pdf button */\n#link-to-pdf {\n    float: right;\n    cursor: pointer;\n    color: var(--blue);\n}\n\n\n#logo-line {\n    font-size: 20px;\n    margin-top: 5px;\n    margin-bottom: 5px;\n}\n\n#logo-second-line {\n    margin: 0px;\n}\n\n#search-panel {\n    display: flex;\n    flex-direction: column;\n}\n\n#search-box {\n    display: flex;\n    margin-top: 5px;\n}\n\n#search-box i {\n    margin: 3px;\n    font-size: 18px;\n}\n\n#search-box input {\n    width: 100%;\n}\n\n#search-results {\n    margin-left: 5px;\n    margin-top: 5px;\n}\n\n.one-result {\n    padding: 5px;\n}\n\n.one-result:hover {\n    background-color: white;\n    cursor: pointer;\n}\n\n.search-result-text {\n    color: grey;\n\n}\n\n/* the container with the tab heads */\n#tab-heads {\n    display: flex;\n    flex-direction: row;\n}\n\n/* the tab heads them selves */\n#tab-heads>div {\n    margin-left: 10px;\n    padding: 5px;\n    border: 1px solid var(--blue);\n    border-bottom: none;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    cursor: pointer;\n}\n\n/* if the tab head is active, then it has a different colour */\n#tab-heads>.active {\n    background-color: var(--very-light-blue);\n}\n\n#tab-contents {\n    background-color: var(--very-light-blue);\n    flex-grow: 1;\n}\n\n#tab-contents>div {\n    display: none;\n}\n\n#tab-contents>div.active {\n    display: flex;\n    flex-direction: column;\n    overflow-y: scroll;\n}\n\n\n\n#tab-contents>div>div {\n    padding: 10px;\n    border-bottom: 1px solid var(--light-blue);\n}\n\np {\n    white-space: initial;\n}\n\n.checkbox-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.hidden {\n    display: none;\n}\n\n\n/*  a div with a button and caption in the left panel */\n.button-line {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.button-line>span.material-icons {\n    cursor: pointer;\n    color: var(--blue);\n    margin-left: 7px;\n    margin-right: 7px;\n}\n\n.button-line.disabled>span.material-icons {\n    cursor: default;\n    color: gray;\n}\n\n/* disabled class for button lines */\n\n.button-line.disabled {\n    color: gray;\n    cursor: default;\n}\n\n\n\n.growAndShrink {\n    transition: transform 0.3s ease-in-out;\n    /* Transition property for smooth scaling */\n    animation: growAndShrinkFrames 1s infinite ease-in-out;\n    /* Duration and easing */\n}\n\n/* Define the animation */\n@keyframes growAndShrinkFrames {\n\n    0%,\n    100% {\n        transform: scale(1);\n        /* Start and end state: normal size */\n    }\n\n    50% {\n        transform: scale(1.2);\n        color: red;\n        /* Middle state: slightly larger */\n    }\n}\n\n"],sourceRoot:""}]);const a=s},439:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"/* ***** progress panel ***/\n#progress-panel {\n    width : 100%;\n    position : absolute;\n    bottom : 0;\n    height : 20px;\n    display : flex;\n    align-items: flex-end;\n    font-size : 12px;\n    cursor: default;\n    padding : 0;\n}\n\n.tablet #progress-panel .material-icons {\n    font-size: 40px;\n}\n\n#progress-line {\n    height: 100%;\n    flex-grow: 1;\n    display : flex;\n    align-items: center;\n    justify-content: center;\n    cursor : pointer;\n}\n#progress-line > div {\n    height : 100%;\n    background-color: var(--very-light-blue);\n    border-left : 1px solid white;\n    display:  flex;\n}\n\n\n/* #progress-line .seen {\n    background-color: var(--very-light-blue);\n   } */\n\nbody.has-sound #progress-line .nosound {\n    background-color: lightgray;\n}\n\n#progress-line .recording {\n    background-color:  red;\n}\n\nbody.has-sound #progress-line .nosound.recording {\n    background-color:  red;\n}\n\n.progress-filler {\n    height: 100%;\n    background-color: var(--light-blue);\n}\n\nbody.has-sound #progress-line .nosound .progress-filler {\n    background-color: grey;\n}\n\n\n#progress-controls {\n    /* width : 110px; */\n    z-index: 5;\n    display : flex; \n    align-items: center;\n    padding-left: 5px;\n    padding-right:5px;\n}\n\n#progress-controls i {\n    cursor: pointer;\n}\n\n#progress-controls div {\n  flex-grow: 1;\n}\n\n\n#progress-controls div {\n    display : flex; \n    align-items: center;\n}\n\n#page-count {\n    width : 80px;\n    display : flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#page-count-enumerator {\n    font-size: 15px;\n}\n\n.playing #page-count-enumerator {\n    display : none;\n}\n\n.playing #page-count-denominator {\n    display : none;\n}\n\n#progress-panel:not(.playing) #time-elapsed {\n    display : none;\n}\n\n#progress-panel:not(.playing) #sound-speed {\n    opacity : 0;\n}\n\nbody:not(.has-sound) #play-button {\n    display: none;\n}\n\nbody:not(.has-sound) #sound-speed {\n    display : none;\n}\n\n#sound-speed {\n    cursor : pointer;\n}\n\n#page-count-denominator {\n    color :darkgray;\n}\n#next-event {\n    right: 0%;\n}","",{version:3,sources:["webpack://./src/viewer/css/progress.css"],names:[],mappings:"AAAA,2BAA2B;AAC3B;IACI,YAAY;IACZ,mBAAmB;IACnB,UAAU;IACV,aAAa;IACb,cAAc;IACd,qBAAqB;IACrB,gBAAgB;IAChB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,cAAc;IACd,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,wCAAwC;IACxC,6BAA6B;IAC7B,cAAc;AAClB;;;AAGA;;MAEM;;AAEN;IACI,2BAA2B;AAC/B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,mCAAmC;AACvC;;AAEA;IACI,sBAAsB;AAC1B;;;AAGA;IACI,mBAAmB;IACnB,UAAU;IACV,cAAc;IACd,mBAAmB;IACnB,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;EACE,YAAY;AACd;;;AAGA;IACI,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;AACA;IACI,SAAS;AACb",sourcesContent:["/* ***** progress panel ***/\n#progress-panel {\n    width : 100%;\n    position : absolute;\n    bottom : 0;\n    height : 20px;\n    display : flex;\n    align-items: flex-end;\n    font-size : 12px;\n    cursor: default;\n    padding : 0;\n}\n\n.tablet #progress-panel .material-icons {\n    font-size: 40px;\n}\n\n#progress-line {\n    height: 100%;\n    flex-grow: 1;\n    display : flex;\n    align-items: center;\n    justify-content: center;\n    cursor : pointer;\n}\n#progress-line > div {\n    height : 100%;\n    background-color: var(--very-light-blue);\n    border-left : 1px solid white;\n    display:  flex;\n}\n\n\n/* #progress-line .seen {\n    background-color: var(--very-light-blue);\n   } */\n\nbody.has-sound #progress-line .nosound {\n    background-color: lightgray;\n}\n\n#progress-line .recording {\n    background-color:  red;\n}\n\nbody.has-sound #progress-line .nosound.recording {\n    background-color:  red;\n}\n\n.progress-filler {\n    height: 100%;\n    background-color: var(--light-blue);\n}\n\nbody.has-sound #progress-line .nosound .progress-filler {\n    background-color: grey;\n}\n\n\n#progress-controls {\n    /* width : 110px; */\n    z-index: 5;\n    display : flex; \n    align-items: center;\n    padding-left: 5px;\n    padding-right:5px;\n}\n\n#progress-controls i {\n    cursor: pointer;\n}\n\n#progress-controls div {\n  flex-grow: 1;\n}\n\n\n#progress-controls div {\n    display : flex; \n    align-items: center;\n}\n\n#page-count {\n    width : 80px;\n    display : flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#page-count-enumerator {\n    font-size: 15px;\n}\n\n.playing #page-count-enumerator {\n    display : none;\n}\n\n.playing #page-count-denominator {\n    display : none;\n}\n\n#progress-panel:not(.playing) #time-elapsed {\n    display : none;\n}\n\n#progress-panel:not(.playing) #sound-speed {\n    opacity : 0;\n}\n\nbody:not(.has-sound) #play-button {\n    display: none;\n}\n\nbody:not(.has-sound) #sound-speed {\n    display : none;\n}\n\n#sound-speed {\n    cursor : pointer;\n}\n\n#page-count-denominator {\n    color :darkgray;\n}\n#next-event {\n    right: 0%;\n}"],sourceRoot:""}]);const a=s},658:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"\n  /* the sketch panel *********** */\n  .tool-panel {\n    position: fixed;\n    display : none;\n    right: 0;\n    width : 20px;\n    top : 50%;\n    transform: translate(0,-50%);\n    /* width : 40%; */\n    /* left : 30%; */\n    padding-top : 20px;\n    padding-bottom : 20px;\n     padding-left : 5px; \n     padding-right : 5px; \n    border-radius: 10px;\n    /* border-top-left-radius: 25px;\n    border-top-right-radius: 25px; */\n    background-color:lightcyan;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    z-index : 10;\n    /* border : 1px solid black; */\n}\n\n.tool-panel div {\n    font-family: Roboto;\n    margin : 5px;\n    padding : 2px;\n}\n\n.noselect {\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Old versions of Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome, Edge, Opera and Firefox */\n}\n\n.tool-panel i {\n    margin : 5px;\n    cursor : pointer;\n    border-radius : 5px;\n    padding : 2px;\n    font-size: 18px;\n}\n\n.tool-panel .disabled {\n  color : lightgrey;\n  cursor : default;\n}\n\n.tool-panel .selected {\n    border : 1px solid grey\n}\n\n#sketch-red {\n    color :red;\n}\n\n#sketch-blue {\n  color :blue;\n}\n\n","",{version:3,sources:["webpack://./src/viewer/css/sketch.css"],names:[],mappings:";EACE,iCAAiC;EACjC;IACE,eAAe;IACf,cAAc;IACd,QAAQ;IACR,YAAY;IACZ,SAAS;IACT,4BAA4B;IAC5B,iBAAiB;IACjB,gBAAgB;IAChB,kBAAkB;IAClB,qBAAqB;KACpB,kBAAkB;KAClB,mBAAmB;IACpB,mBAAmB;IACnB;oCACgC;IAChC,0BAA0B;IAC1B,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB,YAAY;IACZ,8BAA8B;AAClC;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,aAAa;AACjB;;AAEA;EACE,2BAA2B,EAAE,eAAe;IAC1C,yBAAyB,EAAE,WAAW;KACrC,wBAAwB,EAAE,mBAAmB;OAC3C,sBAAsB,EAAE,4BAA4B;QACnD,qBAAqB,EAAE,2BAA2B;YAC9C,iBAAiB,EAAE;gFACiD;AAChF;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;IACI;AACJ;;AAEA;IACI,UAAU;AACd;;AAEA;EACE,WAAW;AACb",sourcesContent:["\n  /* the sketch panel *********** */\n  .tool-panel {\n    position: fixed;\n    display : none;\n    right: 0;\n    width : 20px;\n    top : 50%;\n    transform: translate(0,-50%);\n    /* width : 40%; */\n    /* left : 30%; */\n    padding-top : 20px;\n    padding-bottom : 20px;\n     padding-left : 5px; \n     padding-right : 5px; \n    border-radius: 10px;\n    /* border-top-left-radius: 25px;\n    border-top-right-radius: 25px; */\n    background-color:lightcyan;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    z-index : 10;\n    /* border : 1px solid black; */\n}\n\n.tool-panel div {\n    font-family: Roboto;\n    margin : 5px;\n    padding : 2px;\n}\n\n.noselect {\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Old versions of Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome, Edge, Opera and Firefox */\n}\n\n.tool-panel i {\n    margin : 5px;\n    cursor : pointer;\n    border-radius : 5px;\n    padding : 2px;\n    font-size: 18px;\n}\n\n.tool-panel .disabled {\n  color : lightgrey;\n  cursor : default;\n}\n\n.tool-panel .selected {\n    border : 1px solid grey\n}\n\n#sketch-red {\n    color :red;\n}\n\n#sketch-blue {\n  color :blue;\n}\n\n"],sourceRoot:""}]);const a=s},175:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,":root {\n    --grafitowy : #2c2c2c;\n      --niebieski : #18A0FB;\n    --select-color : #daebf7;\n    --disabled-color : Silver;\n    --blue : #4646FF;\n    --light-blue : #B4C8FF;\n    --very-light-blue : #DCE6FF;\n  }\n\nbody, html {\n    height : 100%;\n    overflow: hidden;\n}\n\nbody, div, button {\n    font-family: 'Roboto';\n    font-weight: 200;\n    font-size: 12px;\n}\n\nbutton { \n    background-color: var(--very-light-blue);\n    border : 1px solid var(--niebieski);\n    border-radius: 3px;\n    cursor: pointer;\n}\n\nbody {\n    margin : 0;\n}\n\n\n#upper-panel {\n    position: absolute;\n    top : 0;\n    bottom : 20px;\n    width :100%;\n    display: flex;\n    flex-direction: row;\n    flex-grow: 1;\n    flex-shrink : 1;\n}\n\n#text-alert-box {\n    position : fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    z-index: 3;\n    display : none; \n}\n\n#text-alert-background {\n    position : absolute;\n    width : 100%;\n    height : 100%;\n    background-color : lightgray;\n    opacity: 90%; \n}\n\n#text-alert {\n padding: 10px;\n z-index: 1;\n}\n\n.hidden-svg {\n    position: absolute;\n    width : 0px;\n    height : 0px; \n}\n\n#svg-container {\n    flex-grow : 1;\n    flex-direction: column;\n    /* align-items : center; */\n}\n\n#svg { \n    flex-grow : 1;\n}\n\n/* this counters a display bug in figma */\npath:not([fill]) {\n    fill : transparent;\n}\n\n.sound-icon {\n    position : absolute;\n    color: red;\n    z-index : 2;\n}\n\n.invisible {\n    display: none;\n}\n\n","",{version:3,sources:["webpack://./src/viewer/css/viewer.css"],names:[],mappings:"AAAA;IACI,qBAAqB;MACnB,qBAAqB;IACvB,wBAAwB;IACxB,yBAAyB;IACzB,gBAAgB;IAChB,sBAAsB;IACtB,2BAA2B;EAC7B;;AAEF;IACI,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,wCAAwC;IACxC,mCAAmC;IACnC,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,UAAU;AACd;;;AAGA;IACI,kBAAkB;IAClB,OAAO;IACP,aAAa;IACb,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,SAAS;IACT,OAAO;IACP,QAAQ;IACR,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,4BAA4B;IAC5B,YAAY;AAChB;;AAEA;CACC,aAAa;CACb,UAAU;AACX;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;AACjB;;AAEA,yCAAyC;AACzC;IACI,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,UAAU;IACV,WAAW;AACf;;AAEA;IACI,aAAa;AACjB",sourcesContent:[":root {\n    --grafitowy : #2c2c2c;\n      --niebieski : #18A0FB;\n    --select-color : #daebf7;\n    --disabled-color : Silver;\n    --blue : #4646FF;\n    --light-blue : #B4C8FF;\n    --very-light-blue : #DCE6FF;\n  }\n\nbody, html {\n    height : 100%;\n    overflow: hidden;\n}\n\nbody, div, button {\n    font-family: 'Roboto';\n    font-weight: 200;\n    font-size: 12px;\n}\n\nbutton { \n    background-color: var(--very-light-blue);\n    border : 1px solid var(--niebieski);\n    border-radius: 3px;\n    cursor: pointer;\n}\n\nbody {\n    margin : 0;\n}\n\n\n#upper-panel {\n    position: absolute;\n    top : 0;\n    bottom : 20px;\n    width :100%;\n    display: flex;\n    flex-direction: row;\n    flex-grow: 1;\n    flex-shrink : 1;\n}\n\n#text-alert-box {\n    position : fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    z-index: 3;\n    display : none; \n}\n\n#text-alert-background {\n    position : absolute;\n    width : 100%;\n    height : 100%;\n    background-color : lightgray;\n    opacity: 90%; \n}\n\n#text-alert {\n padding: 10px;\n z-index: 1;\n}\n\n.hidden-svg {\n    position: absolute;\n    width : 0px;\n    height : 0px; \n}\n\n#svg-container {\n    flex-grow : 1;\n    flex-direction: column;\n    /* align-items : center; */\n}\n\n#svg { \n    flex-grow : 1;\n}\n\n/* this counters a display bug in figma */\npath:not([fill]) {\n    fill : transparent;\n}\n\n.sound-icon {\n    position : absolute;\n    color: red;\n    z-index : 2;\n}\n\n.invisible {\n    display: none;\n}\n\n"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&s[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},221:(t,e,n)=>{function r(t){return Array.isArray?Array.isArray(t):"[object Array]"===c(t)}n.r(e),n.d(e,{default:()=>W});function i(t){return"string"==typeof t}function o(t){return"number"==typeof t}function s(t){return"object"==typeof t}function a(t){return null!=t}function l(t){return!t.trim().length}function c(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Object.prototype.toString.call(t)}const u=t=>`Missing ${t} property in key`,d=t=>`Property 'weight' in key '${t}' must be a positive integer`,h=Object.prototype.hasOwnProperty;class p{constructor(t){this._keys=[],this._keyMap={};let e=0;t.forEach((t=>{let n=f(t);e+=n.weight,this._keys.push(n),this._keyMap[n.id]=n,e+=n.weight})),this._keys.forEach((t=>{t.weight/=e}))}get(t){return this._keyMap[t]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function f(t){let e=null,n=null,o=null,s=1,a=null;if(i(t)||r(t))o=t,e=g(t),n=A(t);else{if(!h.call(t,"name"))throw new Error(u("name"));const r=t.name;if(o=r,h.call(t,"weight")&&(s=t.weight,s<=0))throw new Error(d(r));e=g(r),n=A(r),a=t.getFn}return{path:e,id:n,weight:s,src:o,getFn:a}}function g(t){return r(t)?t:t.split(".")}function A(t){return r(t)?t.join("."):t}var m={isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(t,e)=>t.score===e.score?t.idx<e.idx?-1:1:t.score<e.score?-1:1,includeMatches:!1,findAllMatches:!1,minMatchCharLength:1,location:0,threshold:.6,distance:100,useExtendedSearch:!1,getFn:function(t,e){let n=[],l=!1;const u=(t,e,d)=>{if(a(t))if(e[d]){const h=t[e[d]];if(!a(h))return;if(d===e.length-1&&(i(h)||o(h)||function(t){return!0===t||!1===t||function(t){return s(t)&&null!==t}(t)&&"[object Boolean]"==c(t)}(h)))n.push(function(t){return null==t?"":function(t){if("string"==typeof t)return t;let e=t+"";return"0"==e&&1/t==-1/0?"-0":e}(t)}(h));else if(r(h)){l=!0;for(let t=0,n=h.length;t<n;t+=1)u(h[t],e,d+1)}else e.length&&u(h,e,d+1)}else n.push(t)};return u(t,i(e)?e.split("."):e,0),l?n:n[0]},ignoreLocation:!1,ignoreFieldNorm:!1,fieldNormWeight:1};const v=/[^ ]+/g;class y{constructor({getFn:t=m.getFn,fieldNormWeight:e=m.fieldNormWeight}={}){this.norm=function(t=1,e=3){const n=new Map,r=Math.pow(10,e);return{get(e){const i=e.match(v).length;if(n.has(i))return n.get(i);const o=1/Math.pow(i,.5*t),s=parseFloat(Math.round(o*r)/r);return n.set(i,s),s},clear(){n.clear()}}}(e,3),this.getFn=t,this.isCreated=!1,this.setIndexRecords()}setSources(t=[]){this.docs=t}setIndexRecords(t=[]){this.records=t}setKeys(t=[]){this.keys=t,this._keysMap={},t.forEach(((t,e)=>{this._keysMap[t.id]=e}))}create(){!this.isCreated&&this.docs.length&&(this.isCreated=!0,i(this.docs[0])?this.docs.forEach(((t,e)=>{this._addString(t,e)})):this.docs.forEach(((t,e)=>{this._addObject(t,e)})),this.norm.clear())}add(t){const e=this.size();i(t)?this._addString(t,e):this._addObject(t,e)}removeAt(t){this.records.splice(t,1);for(let e=t,n=this.size();e<n;e+=1)this.records[e].i-=1}getValueForItemAtKeyId(t,e){return t[this._keysMap[e]]}size(){return this.records.length}_addString(t,e){if(!a(t)||l(t))return;let n={v:t,i:e,n:this.norm.get(t)};this.records.push(n)}_addObject(t,e){let n={i:e,$:{}};this.keys.forEach(((e,o)=>{let s=e.getFn?e.getFn(t):this.getFn(t,e.path);if(a(s))if(r(s)){let t=[];const e=[{nestedArrIndex:-1,value:s}];for(;e.length;){const{nestedArrIndex:n,value:o}=e.pop();if(a(o))if(i(o)&&!l(o)){let e={v:o,i:n,n:this.norm.get(o)};t.push(e)}else r(o)&&o.forEach(((t,n)=>{e.push({nestedArrIndex:n,value:t})}))}n.$[o]=t}else if(i(s)&&!l(s)){let t={v:s,n:this.norm.get(s)};n.$[o]=t}})),this.records.push(n)}toJSON(){return{keys:this.keys,records:this.records}}}function _(t,e,{getFn:n=m.getFn,fieldNormWeight:r=m.fieldNormWeight}={}){const i=new y({getFn:n,fieldNormWeight:r});return i.setKeys(t.map(f)),i.setSources(e),i.create(),i}function x(t,{errors:e=0,currentLocation:n=0,expectedLocation:r=0,distance:i=m.distance,ignoreLocation:o=m.ignoreLocation}={}){const s=e/t.length;if(o)return s;const a=Math.abs(r-n);return i?s+a/i:a?1:s}const b=32;function C(t){let e={};for(let n=0,r=t.length;n<r;n+=1){const i=t.charAt(n);e[i]=(e[i]||0)|1<<r-n-1}return e}class w{constructor(t,{location:e=m.location,threshold:n=m.threshold,distance:r=m.distance,includeMatches:i=m.includeMatches,findAllMatches:o=m.findAllMatches,minMatchCharLength:s=m.minMatchCharLength,isCaseSensitive:a=m.isCaseSensitive,ignoreLocation:l=m.ignoreLocation}={}){if(this.options={location:e,threshold:n,distance:r,includeMatches:i,findAllMatches:o,minMatchCharLength:s,isCaseSensitive:a,ignoreLocation:l},this.pattern=a?t:t.toLowerCase(),this.chunks=[],!this.pattern.length)return;const c=(t,e)=>{this.chunks.push({pattern:t,alphabet:C(t),startIndex:e})},u=this.pattern.length;if(u>b){let t=0;const e=u%b,n=u-e;for(;t<n;)c(this.pattern.substr(t,b),t),t+=b;if(e){const t=u-b;c(this.pattern.substr(t),t)}}else c(this.pattern,0)}searchIn(t){const{isCaseSensitive:e,includeMatches:n}=this.options;if(e||(t=t.toLowerCase()),this.pattern===t){let e={isMatch:!0,score:0};return n&&(e.indices=[[0,t.length-1]]),e}const{location:r,distance:i,threshold:o,findAllMatches:s,minMatchCharLength:a,ignoreLocation:l}=this.options;let c=[],u=0,d=!1;this.chunks.forEach((({pattern:e,alphabet:h,startIndex:p})=>{const{isMatch:f,score:g,indices:A}=function(t,e,n,{location:r=m.location,distance:i=m.distance,threshold:o=m.threshold,findAllMatches:s=m.findAllMatches,minMatchCharLength:a=m.minMatchCharLength,includeMatches:l=m.includeMatches,ignoreLocation:c=m.ignoreLocation}={}){if(e.length>b)throw new Error("Pattern length exceeds max of 32.");const u=e.length,d=t.length,h=Math.max(0,Math.min(r,d));let p=o,f=h;const g=a>1||l,A=g?Array(d):[];let v;for(;(v=t.indexOf(e,f))>-1;){let t=x(e,{currentLocation:v,expectedLocation:h,distance:i,ignoreLocation:c});if(p=Math.min(t,p),f=v+u,g){let t=0;for(;t<u;)A[v+t]=1,t+=1}}f=-1;let y=[],_=1,C=u+d;const w=1<<u-1;for(let r=0;r<u;r+=1){let o=0,a=C;for(;o<a;)x(e,{errors:r,currentLocation:h+a,expectedLocation:h,distance:i,ignoreLocation:c})<=p?o=a:C=a,a=Math.floor((C-o)/2+o);C=a;let l=Math.max(1,h-a+1),m=s?d:Math.min(h+a,d)+u,v=Array(m+2);v[m+1]=(1<<r)-1;for(let o=m;o>=l;o-=1){let s=o-1,a=n[t.charAt(s)];if(g&&(A[s]=+!!a),v[o]=(v[o+1]<<1|1)&a,r&&(v[o]|=(y[o+1]|y[o])<<1|1|y[o+1]),v[o]&w&&(_=x(e,{errors:r,currentLocation:s,expectedLocation:h,distance:i,ignoreLocation:c}),_<=p)){if(p=_,f=s,f<=h)break;l=Math.max(1,2*h-f)}}if(x(e,{errors:r+1,currentLocation:h,expectedLocation:h,distance:i,ignoreLocation:c})>p)break;y=v}const B={isMatch:f>=0,score:Math.max(.001,_)};if(g){const t=function(t=[],e=m.minMatchCharLength){let n=[],r=-1,i=-1,o=0;for(let s=t.length;o<s;o+=1){let s=t[o];s&&-1===r?r=o:s||-1===r||(i=o-1,i-r+1>=e&&n.push([r,i]),r=-1)}return t[o-1]&&o-r>=e&&n.push([r,o-1]),n}(A,a);t.length?l&&(B.indices=t):B.isMatch=!1}return B}(t,e,h,{location:r+p,distance:i,threshold:o,findAllMatches:s,minMatchCharLength:a,includeMatches:n,ignoreLocation:l});f&&(d=!0),u+=g,f&&A&&(c=[...c,...A])}));let h={isMatch:d,score:d?u/this.chunks.length:1};return d&&n&&(h.indices=c),h}}class B{constructor(t){this.pattern=t}static isMultiMatch(t){return I(t,this.multiRegex)}static isSingleMatch(t){return I(t,this.singleRegex)}search(){}}function I(t,e){const n=t.match(e);return n?n[1]:null}class S extends B{constructor(t,{location:e=m.location,threshold:n=m.threshold,distance:r=m.distance,includeMatches:i=m.includeMatches,findAllMatches:o=m.findAllMatches,minMatchCharLength:s=m.minMatchCharLength,isCaseSensitive:a=m.isCaseSensitive,ignoreLocation:l=m.ignoreLocation}={}){super(t),this._bitapSearch=new w(t,{location:e,threshold:n,distance:r,includeMatches:i,findAllMatches:o,minMatchCharLength:s,isCaseSensitive:a,ignoreLocation:l})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(t){return this._bitapSearch.searchIn(t)}}class k extends B{constructor(t){super(t)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(t){let e,n=0;const r=[],i=this.pattern.length;for(;(e=t.indexOf(this.pattern,n))>-1;)n=e+i,r.push([e,n-1]);const o=!!r.length;return{isMatch:o,score:o?0:1,indices:r}}}const E=[class extends B{constructor(t){super(t)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(t){const e=t===this.pattern;return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}},k,class extends B{constructor(t){super(t)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(t){const e=t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}},class extends B{constructor(t){super(t)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(t){const e=!t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},class extends B{constructor(t){super(t)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(t){const e=!t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},class extends B{constructor(t){super(t)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(t){const e=t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[t.length-this.pattern.length,t.length-1]}}},class extends B{constructor(t){super(t)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(t){const e=-1===t.indexOf(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},S],T=E.length,M=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,L=new Set([S.type,k.type]);const O=[];function P(t,e){for(let n=0,r=O.length;n<r;n+=1){let r=O[n];if(r.condition(t,e))return new r(t,e)}return new w(t,e)}const R="$and",D="$path",z=t=>!(!t[R]&&!t.$or),F=t=>({[R]:Object.keys(t).map((e=>({[e]:t[e]})))});function N(t,e,{auto:n=!0}={}){const o=t=>{let a=Object.keys(t);const l=(t=>!!t[D])(t);if(!l&&a.length>1&&!z(t))return o(F(t));if((t=>!r(t)&&s(t)&&!z(t))(t)){const r=l?t[D]:a[0],o=l?t.$val:t[r];if(!i(o))throw new Error((t=>`Invalid value for key ${t}`)(r));const s={keyId:A(r),pattern:o};return n&&(s.searcher=P(o,e)),s}let c={children:[],operator:a[0]};return a.forEach((e=>{const n=t[e];r(n)&&n.forEach((t=>{c.children.push(o(t))}))})),c};return z(t)||(t=F(t)),o(t)}function j(t,e){const n=t.matches;e.matches=[],a(n)&&n.forEach((t=>{if(!a(t.indices)||!t.indices.length)return;const{indices:n,value:r}=t;let i={indices:n,value:r};t.key&&(i.key=t.key.src),t.idx>-1&&(i.refIndex=t.idx),e.matches.push(i)}))}function Y(t,e){e.score=t.score}class W{constructor(t,e={},n){this.options={...m,...e},this.options.useExtendedSearch,this._keyStore=new p(this.options.keys),this.setCollection(t,n)}setCollection(t,e){if(this._docs=t,e&&!(e instanceof y))throw new Error("Incorrect 'index' type");this._myIndex=e||_(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}add(t){a(t)&&(this._docs.push(t),this._myIndex.add(t))}remove(t=(()=>!1)){const e=[];for(let n=0,r=this._docs.length;n<r;n+=1){const i=this._docs[n];t(i,n)&&(this.removeAt(n),n-=1,r-=1,e.push(i))}return e}removeAt(t){this._docs.splice(t,1),this._myIndex.removeAt(t)}getIndex(){return this._myIndex}search(t,{limit:e=-1}={}){const{includeMatches:n,includeScore:r,shouldSort:s,sortFn:a,ignoreFieldNorm:l}=this.options;let c=i(t)?i(this._docs[0])?this._searchStringList(t):this._searchObjectList(t):this._searchLogical(t);return function(t,{ignoreFieldNorm:e=m.ignoreFieldNorm}){t.forEach((t=>{let n=1;t.matches.forEach((({key:t,norm:r,score:i})=>{const o=t?t.weight:null;n*=Math.pow(0===i&&o?Number.EPSILON:i,(o||1)*(e?1:r))})),t.score=n}))}(c,{ignoreFieldNorm:l}),s&&c.sort(a),o(e)&&e>-1&&(c=c.slice(0,e)),function(t,e,{includeMatches:n=m.includeMatches,includeScore:r=m.includeScore}={}){const i=[];return n&&i.push(j),r&&i.push(Y),t.map((t=>{const{idx:n}=t,r={item:e[n],refIndex:n};return i.length&&i.forEach((e=>{e(t,r)})),r}))}(c,this._docs,{includeMatches:n,includeScore:r})}_searchStringList(t){const e=P(t,this.options),{records:n}=this._myIndex,r=[];return n.forEach((({v:t,i:n,n:i})=>{if(!a(t))return;const{isMatch:o,score:s,indices:l}=e.searchIn(t);o&&r.push({item:t,idx:n,matches:[{score:s,value:t,norm:i,indices:l}]})})),r}_searchLogical(t){const e=N(t,this.options),n=(t,e,r)=>{if(!t.children){const{keyId:n,searcher:i}=t,o=this._findMatches({key:this._keyStore.get(n),value:this._myIndex.getValueForItemAtKeyId(e,n),searcher:i});return o&&o.length?[{idx:r,item:e,matches:o}]:[]}const i=[];for(let o=0,s=t.children.length;o<s;o+=1){const s=t.children[o],a=n(s,e,r);if(a.length)i.push(...a);else if(t.operator===R)return[]}return i},r=this._myIndex.records,i={},o=[];return r.forEach((({$:t,i:r})=>{if(a(t)){let s=n(e,t,r);s.length&&(i[r]||(i[r]={idx:r,item:t,matches:[]},o.push(i[r])),s.forEach((({matches:t})=>{i[r].matches.push(...t)})))}})),o}_searchObjectList(t){const e=P(t,this.options),{keys:n,records:r}=this._myIndex,i=[];return r.forEach((({$:t,i:r})=>{if(!a(t))return;let o=[];n.forEach(((n,r)=>{o.push(...this._findMatches({key:n,value:t[r],searcher:e}))})),o.length&&i.push({idx:r,item:t,matches:o})})),i}_findMatches({key:t,value:e,searcher:n}){if(!a(e))return[];let i=[];if(r(e))e.forEach((({v:e,i:r,n:o})=>{if(!a(e))return;const{isMatch:s,score:l,indices:c}=n.searchIn(e);s&&i.push({score:l,key:t,value:e,idx:r,norm:o,indices:c})}));else{const{v:r,n:o}=e,{isMatch:s,score:a,indices:l}=n.searchIn(r);s&&i.push({score:a,key:t,value:r,norm:o,indices:l})}return i}}W.version="6.6.2",W.createIndex=_,W.parseIndex=function(t,{getFn:e=m.getFn,fieldNormWeight:n=m.fieldNormWeight}={}){const{keys:r,records:i}=t,o=new y({getFn:e,fieldNormWeight:n});return o.setKeys(r),o.setIndexRecords(i),o},W.config=m,W.parseQuery=N,function(...t){O.push(...t)}(class{constructor(t,{isCaseSensitive:e=m.isCaseSensitive,includeMatches:n=m.includeMatches,minMatchCharLength:r=m.minMatchCharLength,ignoreLocation:i=m.ignoreLocation,findAllMatches:o=m.findAllMatches,location:s=m.location,threshold:a=m.threshold,distance:l=m.distance}={}){this.query=null,this.options={isCaseSensitive:e,includeMatches:n,minMatchCharLength:r,findAllMatches:o,ignoreLocation:i,location:s,threshold:a,distance:l},this.pattern=e?t:t.toLowerCase(),this.query=function(t,e={}){return t.split("|").map((t=>{let n=t.trim().split(M).filter((t=>t&&!!t.trim())),r=[];for(let t=0,i=n.length;t<i;t+=1){const i=n[t];let o=!1,s=-1;for(;!o&&++s<T;){const t=E[s];let n=t.isMultiMatch(i);n&&(r.push(new t(n,e)),o=!0)}if(!o)for(s=-1;++s<T;){const t=E[s];let n=t.isSingleMatch(i);if(n){r.push(new t(n,e));break}}}return r}))}(this.pattern,this.options)}static condition(t,e){return e.useExtendedSearch}searchIn(t){const e=this.query;if(!e)return{isMatch:!1,score:1};const{includeMatches:n,isCaseSensitive:r}=this.options;t=r?t:t.toLowerCase();let i=0,o=[],s=0;for(let r=0,a=e.length;r<a;r+=1){const a=e[r];o.length=0,i=0;for(let e=0,r=a.length;e<r;e+=1){const r=a[e],{isMatch:l,indices:c,score:u}=r.search(t);if(!l){s=0,i=0,o.length=0;break}if(i+=1,s+=u,n){const t=r.constructor.type;L.has(t)?o=[...o,...c]:o.push(c)}}if(i){let t={isMatch:!0,score:s/i};return n&&(t.indices=o),t}}return{isMatch:!1,score:1}}})},358:(t,e,n)=>{function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}n.r(e),n.d(e,{Back:()=>$n,Bounce:()=>Xn,CSSPlugin:()=>ci,Circ:()=>Gn,Cubic:()=>Yn,Elastic:()=>Zn,Expo:()=>Qn,Linear:()=>Nn,Power0:()=>Pn,Power1:()=>Rn,Power2:()=>Dn,Power3:()=>zn,Power4:()=>Fn,Quad:()=>jn,Quart:()=>Wn,Quint:()=>qn,Sine:()=>Vn,SteppedEase:()=>Hn,Strong:()=>Un,TimelineLite:()=>je,TimelineMax:()=>je,TweenLite:()=>Ge,TweenMax:()=>di,default:()=>ui,gsap:()=>ui});var o,s,a,l,c,u,d,h,p,f,g,A,m,v,y,_={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},x={duration:.5,overwrite:!1,delay:0},b=1e8,C=1e-8,w=2*Math.PI,B=w/4,I=0,S=Math.sqrt,k=Math.cos,E=Math.sin,T=function(t){return"string"==typeof t},M=function(t){return"function"==typeof t},L=function(t){return"number"==typeof t},O=function(t){return void 0===t},P=function(t){return"object"==typeof t},R=function(t){return!1!==t},D=function(){return"undefined"!=typeof window},z=function(t){return M(t)||T(t)},F="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},N=Array.isArray,j=/(?:-?\.?\d|\.)+/gi,Y=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,W=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,q=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,U=/[+-]=-?[.\d]+/,Z=/[^,'"\[\]\s]+/gi,$=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,H={},X={},V=function(t){return(X=wt(t,H))&&Bn},Q=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},G=function(t,e){return!e&&console.warn(t)},K=function(t,e){return t&&(H[t]=e)&&X&&(X[t]=e)||H},J=function(){return 0},tt={suppressEvents:!0,isStart:!0,kill:!1},et={suppressEvents:!0,kill:!1},nt={suppressEvents:!0},rt={},it=[],ot={},st={},at={},lt=30,ct=[],ut="",dt=function(t){var e,n,r=t[0];if(P(r)||M(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(n=ct.length;n--&&!ct[n].targetTest(r););e=ct[n]}for(n=t.length;n--;)t[n]&&(t[n]._gsap||(t[n]._gsap=new Fe(t[n],e)))||t.splice(n,1);return t},ht=function(t){return t._gsap||dt(ee(t))[0]._gsap},pt=function(t,e,n){return(n=t[e])&&M(n)?t[e]():O(n)&&t.getAttribute&&t.getAttribute(e)||n},ft=function(t,e){return(t=t.split(",")).forEach(e)||t},gt=function(t){return Math.round(1e5*t)/1e5||0},At=function(t){return Math.round(1e7*t)/1e7||0},mt=function(t,e){var n=e.charAt(0),r=parseFloat(e.substr(2));return t=parseFloat(t),"+"===n?t+r:"-"===n?t-r:"*"===n?t*r:t/r},vt=function(t,e){for(var n=e.length,r=0;t.indexOf(e[r])<0&&++r<n;);return r<n},yt=function(){var t,e,n=it.length,r=it.slice(0);for(ot={},it.length=0,t=0;t<n;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},_t=function(t,e,n,r){it.length&&!s&&yt(),t.render(e,n,r||s&&e<0&&(t._initted||t._startAt)),it.length&&!s&&yt()},xt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(Z).length<2?e:T(t)?t.trim():t},bt=function(t){return t},Ct=function(t,e){for(var n in e)n in t||(t[n]=e[n]);return t},wt=function(t,e){for(var n in e)t[n]=e[n];return t},Bt=function t(e,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=P(n[r])?t(e[r]||(e[r]={}),n[r]):n[r]);return e},It=function(t,e){var n,r={};for(n in t)n in e||(r[n]=t[n]);return r},St=function(t){var e,n=t.parent||l,r=t.keyframes?(e=N(t.keyframes),function(t,n){for(var r in n)r in t||"duration"===r&&e||"ease"===r||(t[r]=n[r])}):Ct;if(R(t.inherit))for(;n;)r(t,n.vars.defaults),n=n.parent||n._dp;return t},kt=function(t,e,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var o,s=t[r];if(i)for(o=e[i];s&&s[i]>o;)s=s._prev;return s?(e._next=s._next,s._next=e):(e._next=t[n],t[n]=e),e._next?e._next._prev=e:t[r]=e,e._prev=s,e.parent=e._dp=t,e},Et=function(t,e,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=e._prev,o=e._next;i?i._next=o:t[n]===e&&(t[n]=o),o?o._prev=i:t[r]===e&&(t[r]=i),e._next=e._prev=e.parent=null},Tt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},Mt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var n=t;n;)n._dirty=1,n=n.parent;return t},Lt=function(t,e,n,r){return t._startAt&&(s?t._startAt.revert(et):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,r))},Ot=function t(e){return!e||e._ts&&t(e.parent)},Pt=function(t){return t._repeat?Rt(t._tTime,t=t.duration()+t._rDelay)*t:0},Rt=function(t,e){var n=Math.floor(t/=e);return t&&n===t?n-1:n},Dt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},zt=function(t){return t._end=At(t._start+(t._tDur/Math.abs(t._ts||t._rts||C)||0))},Ft=function(t,e){var n=t._dp;return n&&n.smoothChildTiming&&t._ts&&(t._start=At(n._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),zt(t),n._dirty||Mt(n,t)),t},Nt=function(t,e){var n;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(n=Dt(t.rawTime(),e),(!e._dur||Gt(0,e.totalDuration(),n)-e._tTime>C)&&e.render(n,!0)),Mt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(n=t;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;t._zTime=-1e-8}},jt=function(t,e,n,r){return e.parent&&Tt(e),e._start=At((L(n)?n:n||t!==l?Xt(t,n,e):t._time)+e._delay),e._end=At(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),kt(t,e,"_first","_last",t._sort?"_start":0),Ut(e)||(t._recent=e),r||Nt(t,e),t._ts<0&&Ft(t,t._tTime),t},Yt=function(t,e){return(H.ScrollTrigger||Q("scrollTrigger",e))&&H.ScrollTrigger.create(e,t)},Wt=function(t,e,n,r,i){return $e(t,e,i),t._initted?!n&&t._pt&&!s&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&p!==Be.frame?(it.push(t),t._lazy=[i,r],1):void 0:1},qt=function t(e){var n=e.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||t(n))},Ut=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Zt=function(t,e,n,r){var i=t._repeat,o=At(e)||0,s=t._tTime/t._tDur;return s&&!r&&(t._time*=o/t._dur),t._dur=o,t._tDur=i?i<0?1e10:At(o*(i+1)+t._rDelay*i):o,s>0&&!r&&Ft(t,t._tTime=t._tDur*s),t.parent&&zt(t),n||Mt(t.parent,t),t},$t=function(t){return t instanceof je?Mt(t):Zt(t,t._dur)},Ht={_start:0,endTime:J,totalDuration:J},Xt=function t(e,n,r){var i,o,s,a=e.labels,l=e._recent||Ht,c=e.duration()>=b?l.endTime(!1):e._dur;return T(n)&&(isNaN(n)||n in a)?(o=n.charAt(0),s="%"===n.substr(-1),i=n.indexOf("="),"<"===o||">"===o?(i>=0&&(n=n.replace(/=/,"")),("<"===o?l._start:l.endTime(l._repeat>=0))+(parseFloat(n.substr(1))||0)*(s?(i<0?l:r).totalDuration()/100:1)):i<0?(n in a||(a[n]=c),a[n]):(o=parseFloat(n.charAt(i-1)+n.substr(i+1)),s&&r&&(o=o/100*(N(r)?r[0]:r).totalDuration()),i>1?t(e,n.substr(0,i-1),r)+o:c+o)):null==n?c:+n},Vt=function(t,e,n){var r,i,o=L(e[1]),s=(o?2:1)+(t<2?0:1),a=e[s];if(o&&(a.duration=e[1]),a.parent=n,t){for(r=a,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=R(i.vars.inherit)&&i.parent;a.immediateRender=R(r.immediateRender),t<2?a.runBackwards=1:a.startAt=e[s-1]}return new Ge(e[0],a,e[s+1])},Qt=function(t,e){return t||0===t?e(t):e},Gt=function(t,e,n){return n<t?t:n>e?e:n},Kt=function(t,e){return T(t)&&(e=$.exec(t))?e[1]:""},Jt=[].slice,te=function(t,e){return t&&P(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&P(t[0]))&&!t.nodeType&&t!==c},ee=function(t,e,n){return a&&!e&&a.selector?a.selector(t):!T(t)||n||!u&&Ie()?N(t)?function(t,e,n){return void 0===n&&(n=[]),t.forEach((function(t){var r;return T(t)&&!e||te(t,1)?(r=n).push.apply(r,ee(t)):n.push(t)}))||n}(t,n):te(t)?Jt.call(t,0):t?[t]:[]:Jt.call((e||d).querySelectorAll(t),0)},ne=function(t){return t=ee(t)[0]||G("Invalid scope")||{},function(e){var n=t.current||t.nativeElement||t;return ee(e,n.querySelectorAll?n:n===t?G("Invalid scope")||d.createElement("div"):t)}},re=function(t){return t.sort((function(){return.5-Math.random()}))},ie=function(t){if(M(t))return t;var e=P(t)?t:{each:t},n=Oe(e.ease),r=e.from||0,i=parseFloat(e.base)||0,o={},s=r>0&&r<1,a=isNaN(r)||s,l=e.axis,c=r,u=r;return T(r)?c=u={center:.5,edges:.5,end:1}[r]||0:!s&&a&&(c=r[0],u=r[1]),function(t,s,d){var h,p,f,g,A,m,v,y,_,x=(d||e).length,C=o[x];if(!C){if(!(_="auto"===e.grid?0:(e.grid||[1,b])[1])){for(v=-b;v<(v=d[_++].getBoundingClientRect().left)&&_<x;);_<x&&_--}for(C=o[x]=[],h=a?Math.min(_,x)*c-.5:r%_,p=_===b?0:a?x*u/_-.5:r/_|0,v=0,y=b,m=0;m<x;m++)f=m%_-h,g=p-(m/_|0),C[m]=A=l?Math.abs("y"===l?g:f):S(f*f+g*g),A>v&&(v=A),A<y&&(y=A);"random"===r&&re(C),C.max=v-y,C.min=y,C.v=x=(parseFloat(e.amount)||parseFloat(e.each)*(_>x?x-1:l?"y"===l?x/_:_:Math.max(_,x/_))||0)*("edges"===r?-1:1),C.b=x<0?i-x:i,C.u=Kt(e.amount||e.each)||0,n=n&&x<0?Me(n):n}return x=(C[t]-C.min)/C.max||0,At(C.b+(n?n(x):x)*C.v)+C.u}},oe=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(n){var r=At(Math.round(parseFloat(n)/t)*t*e);return(r-r%1)/e+(L(n)?0:Kt(n))}},se=function(t,e){var n,r,i=N(t);return!i&&P(t)&&(n=i=t.radius||b,t.values?(t=ee(t.values),(r=!L(t[0]))&&(n*=n)):t=oe(t.increment)),Qt(e,i?M(t)?function(e){return r=t(e),Math.abs(r-e)<=n?r:e}:function(e){for(var i,o,s=parseFloat(r?e.x:e),a=parseFloat(r?e.y:0),l=b,c=0,u=t.length;u--;)(i=r?(i=t[u].x-s)*i+(o=t[u].y-a)*o:Math.abs(t[u]-s))<l&&(l=i,c=u);return c=!n||l<=n?t[c]:e,r||c===e||L(e)?c:c+Kt(e)}:oe(t))},ae=function(t,e,n,r){return Qt(N(t)?!e:!0===n?!!(n=0):!r,(function(){return N(t)?t[~~(Math.random()*t.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((t-n/2+Math.random()*(e-t+.99*n))/n)*n*r)/r}))},le=function(t,e,n){return Qt(n,(function(n){return t[~~e(n)]}))},ce=function(t){for(var e,n,r,i,o=0,s="";~(e=t.indexOf("random(",o));)r=t.indexOf(")",e),i="["===t.charAt(e+7),n=t.substr(e+7,r-e-7).match(i?Z:j),s+=t.substr(o,e-o)+ae(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),o=r+1;return s+t.substr(o,t.length-o)},ue=function(t,e,n,r,i){var o=e-t,s=r-n;return Qt(i,(function(e){return n+((e-t)/o*s||0)}))},de=function(t,e,n){var r,i,o,s=t.labels,a=b;for(r in s)(i=s[r]-e)<0==!!n&&i&&a>(i=Math.abs(i))&&(o=r,a=i);return o},he=function(t,e,n){var r,i,o,s=t.vars,l=s[e],c=a,u=t._ctx;if(l)return r=s[e+"Params"],i=s.callbackScope||t,n&&it.length&&yt(),u&&(a=u),o=r?l.apply(i,r):l.call(i),a=c,o},pe=function(t){return Tt(t),t.scrollTrigger&&t.scrollTrigger.kill(!!s),t.progress()<1&&he(t,"onInterrupt"),t},fe=[],ge=function(t){if(D()&&t){var e=(t=!t.name&&t.default||t).name,n=M(t),r=e&&!n&&t.init?function(){this._props=[]}:t,i={init:J,render:an,add:Ue,kill:cn,modifier:ln,rawVars:0},o={targetTest:0,get:0,getSetter:nn,aliases:{},register:0};if(Ie(),t!==r){if(st[e])return;Ct(r,Ct(It(t,i),o)),wt(r.prototype,wt(i,It(t,o))),st[r.prop=e]=r,t.targetTest&&(ct.push(r),rt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}K(e,r),t.register&&t.register(Bn,r,hn)}else t&&fe.push(t)},Ae=255,me={aqua:[0,Ae,Ae],lime:[0,Ae,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Ae],navy:[0,0,128],white:[Ae,Ae,Ae],olive:[128,128,0],yellow:[Ae,Ae,0],orange:[Ae,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Ae,0,0],pink:[Ae,192,203],cyan:[0,Ae,Ae],transparent:[Ae,Ae,Ae,0]},ve=function(t,e,n){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(n-e)*t*6:t<.5?n:3*t<2?e+(n-e)*(2/3-t)*6:e)*Ae+.5|0},ye=function(t,e,n){var r,i,o,s,a,l,c,u,d,h,p=t?L(t)?[t>>16,t>>8&Ae,t&Ae]:0:me.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),me[t])p=me[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),i=t.charAt(2),o=t.charAt(3),t="#"+r+r+i+i+o+o+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Ae,p&Ae,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Ae,t&Ae]}else if("hsl"===t.substr(0,3))if(p=h=t.match(j),e){if(~t.indexOf("="))return p=t.match(Y),n&&p.length<4&&(p[3]=1),p}else s=+p[0]%360/360,a=+p[1]/100,r=2*(l=+p[2]/100)-(i=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=ve(s+1/3,r,i),p[1]=ve(s,r,i),p[2]=ve(s-1/3,r,i);else p=t.match(j)||me.transparent;p=p.map(Number)}return e&&!h&&(r=p[0]/Ae,i=p[1]/Ae,o=p[2]/Ae,l=((c=Math.max(r,i,o))+(u=Math.min(r,i,o)))/2,c===u?s=a=0:(d=c-u,a=l>.5?d/(2-c-u):d/(c+u),s=c===r?(i-o)/d+(i<o?6:0):c===i?(o-r)/d+2:(r-i)/d+4,s*=60),p[0]=~~(s+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),n&&p.length<4&&(p[3]=1),p},_e=function(t){var e=[],n=[],r=-1;return t.split(be).forEach((function(t){var i=t.match(W)||[];e.push.apply(e,i),n.push(r+=i.length+1)})),e.c=n,e},xe=function(t,e,n){var r,i,o,s,a="",l=(t+a).match(be),c=e?"hsla(":"rgba(",u=0;if(!l)return t;if(l=l.map((function(t){return(t=ye(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),n&&(o=_e(t),(r=n.c).join(a)!==o.c.join(a)))for(s=(i=t.replace(be,"1").split(W)).length-1;u<s;u++)a+=i[u]+(~r.indexOf(u)?l.shift()||c+"0,0,0,0)":(o.length?o:l.length?l:n).shift());if(!i)for(s=(i=t.split(be)).length-1;u<s;u++)a+=i[u]+l[u];return a+i[s]},be=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in me)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Ce=/hsl[a]?\(/,we=function(t){var e,n=t.join(" ");if(be.lastIndex=0,be.test(n))return e=Ce.test(n),t[1]=xe(t[1],e),t[0]=xe(t[0],e,_e(t[1])),!0},Be=function(){var t,e,n,r,i,o,s=Date.now,a=500,l=33,p=s(),f=p,A=1e3/240,m=A,v=[],y=function n(c){var u,d,h,g,y=s()-f,_=!0===c;if(y>a&&(p+=y-l),((u=(h=(f+=y)-p)-m)>0||_)&&(g=++r.frame,i=h-1e3*r.time,r.time=h/=1e3,m+=u+(u>=A?4:A-u),d=1),_||(t=e(n)),d)for(o=0;o<v.length;o++)v[o](h,i,g,c)};return r={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(t){return i/(1e3/(t||60))},wake:function(){h&&(!u&&D()&&(c=u=window,d=c.document||{},H.gsap=Bn,(c.gsapVersions||(c.gsapVersions=[])).push(Bn.version),V(X||c.GreenSockGlobals||!c.gsap&&c||{}),n=c.requestAnimationFrame,fe.forEach(ge)),t&&r.sleep(),e=n||function(t){return setTimeout(t,m-1e3*r.time+1|0)},g=1,y(2))},sleep:function(){(n?c.cancelAnimationFrame:clearTimeout)(t),g=0,e=J},lagSmoothing:function(t,e){a=t||1/0,l=Math.min(e||33,a)},fps:function(t){A=1e3/(t||240),m=1e3*r.time+A},add:function(t,e,n){var i=e?function(e,n,o,s){t(e,n,o,s),r.remove(i)}:t;return r.remove(t),v[n?"unshift":"push"](i),Ie(),i},remove:function(t,e){~(e=v.indexOf(t))&&v.splice(e,1)&&o>=e&&o--},_listeners:v}}(),Ie=function(){return!g&&Be.wake()},Se={},ke=/^[\d.\-M][\d.\-,\s]/,Ee=/["']/g,Te=function(t){for(var e,n,r,i={},o=t.substr(1,t.length-3).split(":"),s=o[0],a=1,l=o.length;a<l;a++)n=o[a],e=a!==l-1?n.lastIndexOf(","):n.length,r=n.substr(0,e),i[s]=isNaN(r)?r.replace(Ee,"").trim():+r,s=n.substr(e+1).trim();return i},Me=function(t){return function(e){return 1-t(1-e)}},Le=function t(e,n){for(var r,i=e._first;i;)i instanceof je?t(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?t(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},Oe=function(t,e){return t&&(M(t)?t:Se[t]||function(t){var e,n,r,i,o=(t+"").split("("),s=Se[o[0]];return s&&o.length>1&&s.config?s.config.apply(null,~t.indexOf("{")?[Te(o[1])]:(e=t,n=e.indexOf("(")+1,r=e.indexOf(")"),i=e.indexOf("(",n),e.substring(n,~i&&i<r?e.indexOf(")",r+1):r)).split(",").map(xt)):Se._CE&&ke.test(t)?Se._CE("",t):s}(t))||e},Pe=function(t,e,n,r){void 0===n&&(n=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,o={easeIn:e,easeOut:n,easeInOut:r};return ft(t,(function(t){for(var e in Se[t]=H[t]=o,Se[i=t.toLowerCase()]=n,o)Se[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Se[t+"."+e]=o[e]})),o},Re=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},De=function t(e,n,r){var i=n>=1?n:1,o=(r||(e?.3:.45))/(n<1?n:1),s=o/w*(Math.asin(1/i)||0),a=function(t){return 1===t?1:i*Math.pow(2,-10*t)*E((t-s)*o)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Re(a);return o=w/o,l.config=function(n,r){return t(e,n,r)},l},ze=function t(e,n){void 0===n&&(n=1.70158);var r=function(t){return t?--t*t*((n+1)*t+n)+1:0},i="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:Re(r);return i.config=function(n){return t(e,n)},i};ft("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var n=e<5?e+1:e;Pe(t+",Power"+(n-1),e?function(t){return Math.pow(t,n)}:function(t){return t},(function(t){return 1-Math.pow(1-t,n)}),(function(t){return t<.5?Math.pow(2*t,n)/2:1-Math.pow(2*(1-t),n)/2}))})),Se.Linear.easeNone=Se.none=Se.Linear.easeIn,Pe("Elastic",De("in"),De("out"),De()),A=7.5625,v=1/(m=2.75),Pe("Bounce",(function(t){return 1-y(1-t)}),y=function(t){return t<v?A*t*t:t<.7272727272727273?A*Math.pow(t-1.5/m,2)+.75:t<.9090909090909092?A*(t-=2.25/m)*t+.9375:A*Math.pow(t-2.625/m,2)+.984375}),Pe("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Pe("Circ",(function(t){return-(S(1-t*t)-1)})),Pe("Sine",(function(t){return 1===t?1:1-k(t*B)})),Pe("Back",ze("in"),ze("out"),ze()),Se.SteppedEase=Se.steps=H.SteppedEase={config:function(t,e){void 0===t&&(t=1);var n=1/t,r=t+(e?0:1),i=e?1:0;return function(t){return((r*Gt(0,.99999999,t)|0)+i)*n}}},x.ease=Se["quad.out"],ft("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ut+=t+","+t+"Params,"}));var Fe=function(t,e){this.id=I++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:pt,this.set=e?e.getSetter:nn},Ne=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Zt(this,+t.duration,1,1),this.data=t.data,a&&(this._ctx=a,a.data.push(this)),g||Be.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Zt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Ie(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(Ft(this,t),!n._dp||n.parent||Nt(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&jt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===C||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),_t(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Pt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Pt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*n,e):this._repeat?Rt(this._tTime,n)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var n=this.parent&&this._ts?Dt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Gt(-Math.abs(this._delay),this._tDur,n),!1!==e),zt(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Ie(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==C&&(this._tTime-=C)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&jt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(R(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Dt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=nt);var e=s;return s=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),s=e,this},e.globalTime=function(t){for(var e=this,n=arguments.length?t:e.rawTime();e;)n=e._start+n/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):n},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,$t(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,$t(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Xt(this,t),R(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,R(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,n=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=n&&t<this.endTime(!0)-C))},e.eventCallback=function(t,e,n){var r=this.vars;return arguments.length>1?(e?(r[t]=e,n&&(r[t+"Params"]=n),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(n){var r=M(t)?t:bt,i=function(){var t=e.then;e.then=null,M(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),n(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){pe(this)},t}();Ct(Ne.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var je=function(t){function e(e,n){var i;return void 0===e&&(e={}),(i=t.call(this,e)||this).labels={},i.smoothChildTiming=!!e.smoothChildTiming,i.autoRemoveChildren=!!e.autoRemoveChildren,i._sort=R(e.sortChildren),l&&jt(e.parent||l,r(i),n),e.reversed&&i.reverse(),e.paused&&i.paused(!0),e.scrollTrigger&&Yt(r(i),e.scrollTrigger),i}i(e,t);var n=e.prototype;return n.to=function(t,e,n){return Vt(0,arguments,this),this},n.from=function(t,e,n){return Vt(1,arguments,this),this},n.fromTo=function(t,e,n,r){return Vt(2,arguments,this),this},n.set=function(t,e,n){return e.duration=0,e.parent=this,St(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Ge(t,e,Xt(this,n),1),this},n.call=function(t,e,n){return jt(this,Ge.delayedCall(0,t,e),n)},n.staggerTo=function(t,e,n,r,i,o,s){return n.duration=e,n.stagger=n.stagger||r,n.onComplete=o,n.onCompleteParams=s,n.parent=this,new Ge(t,n,Xt(this,i)),this},n.staggerFrom=function(t,e,n,r,i,o,s){return n.runBackwards=1,St(n).immediateRender=R(n.immediateRender),this.staggerTo(t,e,n,r,i,o,s)},n.staggerFromTo=function(t,e,n,r,i,o,s,a){return r.startAt=n,St(r).immediateRender=R(r.immediateRender),this.staggerTo(t,e,r,i,o,s,a)},n.render=function(t,e,n){var r,i,o,a,c,u,d,h,p,f,g,A,m=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,_=t<=0?0:At(t),x=this._zTime<0!=t<0&&(this._initted||!y);if(this!==l&&_>v&&t>=0&&(_=v),_!==this._tTime||n||x){if(m!==this._time&&y&&(_+=this._time-m,t+=this._time-m),r=_,p=this._start,u=!(h=this._ts),x&&(y||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(g=this._yoyo,c=y+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*c+t,e,n);if(r=At(_%c),_===v?(a=this._repeat,r=y):((a=~~(_/c))&&a===_/c&&(r=y,a--),r>y&&(r=y)),f=Rt(this._tTime,c),!m&&this._tTime&&f!==a&&this._tTime-f*c-this._dur<=0&&(f=a),g&&1&a&&(r=y-r,A=1),a!==f&&!this._lock){var b=g&&1&f,w=b===(g&&1&a);if(a<f&&(b=!b),m=b?0:_%y?y:_,this._lock=1,this.render(m||(A?0:At(a*c)),e,!y)._lock=0,this._tTime=_,!e&&this.parent&&he(this,"onRepeat"),this.vars.repeatRefresh&&!A&&(this.invalidate()._lock=1),m&&m!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,w&&(this._lock=2,m=b?y:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!A&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Le(this,A)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(t,e,n){var r;if(n>e)for(r=t._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,At(m),At(r)),d&&(_-=r-(r=d._start))),this._tTime=_,this._time=r,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&r&&!e&&!a&&(he(this,"onStart"),this._tTime!==_))return this;if(r>=m&&t>=0)for(i=this._first;i;){if(o=i._next,(i._act||r>=i._start)&&i._ts&&d!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,e,n),r!==this._time||!this._ts&&!u){d=0,o&&(_+=this._zTime=-1e-8);break}}i=o}else{i=this._last;for(var B=t<0?t:r;i;){if(o=i._prev,(i._act||B<=i._end)&&i._ts&&d!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(B-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(B-i._start)*i._ts,e,n||s&&(i._initted||i._startAt)),r!==this._time||!this._ts&&!u){d=0,o&&(_+=this._zTime=B?-1e-8:C);break}}i=o}}if(d&&!e&&(this.pause(),d.render(r>=m?0:-1e-8)._zTime=r>=m?1:-1,this._ts))return this._start=p,zt(this),this.render(t,e,n);this._onUpdate&&!e&&he(this,"onUpdate",!0),(_===v&&this._tTime>=this.totalDuration()||!_&&m)&&(p!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((t||!y)&&(_===v&&this._ts>0||!_&&this._ts<0)&&Tt(this,1),e||t<0&&!m||!_&&!m&&v||(he(this,_===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(_<v&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(t,e){var n=this;if(L(e)||(e=Xt(this,e,t)),!(t instanceof Ne)){if(N(t))return t.forEach((function(t){return n.add(t,e)})),this;if(T(t))return this.addLabel(t,e);if(!M(t))return this;t=Ge.delayedCall(0,t)}return this!==t?jt(this,t,e):this},n.getChildren=function(t,e,n,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===n&&(n=!0),void 0===r&&(r=-b);for(var i=[],o=this._first;o;)o._start>=r&&(o instanceof Ge?e&&i.push(o):(n&&i.push(o),t&&i.push.apply(i,o.getChildren(!0,e,n)))),o=o._next;return i},n.getById=function(t){for(var e=this.getChildren(1,1,1),n=e.length;n--;)if(e[n].vars.id===t)return e[n]},n.remove=function(t){return T(t)?this.removeLabel(t):M(t)?this.killTweensOf(t):(Et(this,t),t===this._recent&&(this._recent=this._last),Mt(this))},n.totalTime=function(e,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=At(Be.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,n),this._forcing=0,this):this._tTime},n.addLabel=function(t,e){return this.labels[t]=Xt(this,e),this},n.removeLabel=function(t){return delete this.labels[t],this},n.addPause=function(t,e,n){var r=Ge.delayedCall(0,e||J,n);return r.data="isPause",this._hasPause=1,jt(this,r,Xt(this,t))},n.removePause=function(t){var e=this._first;for(t=Xt(this,t);e;)e._start===t&&"isPause"===e.data&&Tt(e),e=e._next},n.killTweensOf=function(t,e,n){for(var r=this.getTweensOf(t,n),i=r.length;i--;)Ye!==r[i]&&r[i].kill(t,e);return this},n.getTweensOf=function(t,e){for(var n,r=[],i=ee(t),o=this._first,s=L(e);o;)o instanceof Ge?vt(o._targets,i)&&(s?(!Ye||o._initted&&o._ts)&&o.globalTime(0)<=e&&o.globalTime(o.totalDuration())>e:!e||o.isActive())&&r.push(o):(n=o.getTweensOf(i,e)).length&&r.push.apply(r,n),o=o._next;return r},n.tweenTo=function(t,e){e=e||{};var n,r=this,i=Xt(r,t),o=e,s=o.startAt,a=o.onStart,l=o.onStartParams,c=o.immediateRender,u=Ge.to(r,Ct({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(s&&"time"in s?s.time:r._time))/r.timeScale())||C,onStart:function(){if(r.pause(),!n){var t=e.duration||Math.abs((i-(s&&"time"in s?s.time:r._time))/r.timeScale());u._dur!==t&&Zt(u,t,0,1).render(u._time,!0,!0),n=1}a&&a.apply(u,l||[])}},e));return c?u.render(0):u},n.tweenFromTo=function(t,e,n){return this.tweenTo(e,Ct({startAt:{time:Xt(this,t)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(t){return void 0===t&&(t=this._time),de(this,Xt(this,t))},n.previousLabel=function(t){return void 0===t&&(t=this._time),de(this,Xt(this,t),1)},n.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+C)},n.shiftChildren=function(t,e,n){void 0===n&&(n=0);for(var r,i=this._first,o=this.labels;i;)i._start>=n&&(i._start+=t,i._end+=t),i=i._next;if(e)for(r in o)o[r]>=n&&(o[r]+=t);return Mt(this)},n.invalidate=function(e){var n=this._first;for(this._lock=0;n;)n.invalidate(e),n=n._next;return t.prototype.invalidate.call(this,e)},n.clear=function(t){void 0===t&&(t=!0);for(var e,n=this._first;n;)e=n._next,this.remove(n),n=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Mt(this)},n.totalDuration=function(t){var e,n,r,i=0,o=this,s=o._last,a=b;if(arguments.length)return o.timeScale((o._repeat<0?o.duration():o.totalDuration())/(o.reversed()?-t:t));if(o._dirty){for(r=o.parent;s;)e=s._prev,s._dirty&&s.totalDuration(),(n=s._start)>a&&o._sort&&s._ts&&!o._lock?(o._lock=1,jt(o,s,n-s._delay,1)._lock=0):a=n,n<0&&s._ts&&(i-=n,(!r&&!o._dp||r&&r.smoothChildTiming)&&(o._start+=n/o._ts,o._time-=n,o._tTime-=n),o.shiftChildren(-n,!1,-Infinity),a=0),s._end>i&&s._ts&&(i=s._end),s=e;Zt(o,o===l&&o._time>i?o._time:i,1,1),o._dirty=0}return o._tDur},e.updateRoot=function(t){if(l._ts&&(_t(l,Dt(t,l)),p=Be.frame),Be.frame>=lt){lt+=_.autoSleep||120;var e=l._first;if((!e||!e._ts)&&_.autoSleep&&Be._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Be.sleep()}}},e}(Ne);Ct(je.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ye,We,qe=function(t,e,n,r,i,o,s){var a,l,c,u,d,h,p,f,g=new hn(this._pt,t,e,0,1,sn,null,i),A=0,m=0;for(g.b=n,g.e=r,n+="",(p=~(r+="").indexOf("random("))&&(r=ce(r)),o&&(o(f=[n,r],t,e),n=f[0],r=f[1]),l=n.match(q)||[];a=q.exec(r);)u=a[0],d=r.substring(A,a.index),c?c=(c+1)%5:"rgba("===d.substr(-5)&&(c=1),u!==l[m++]&&(h=parseFloat(l[m-1])||0,g._pt={_next:g._pt,p:d||1===m?d:",",s:h,c:"="===u.charAt(1)?mt(h,u)-h:parseFloat(u)-h,m:c&&c<4?Math.round:0},A=q.lastIndex);return g.c=A<r.length?r.substring(A,r.length):"",g.fp=s,(U.test(r)||p)&&(g.e=0),this._pt=g,g},Ue=function(t,e,n,r,i,o,s,a,l,c){M(r)&&(r=r(i||0,t,o));var u,d=t[e],h="get"!==n?n:M(d)?l?t[e.indexOf("set")||!M(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():d,p=M(d)?l?tn:Je:Ke;if(T(r)&&(~r.indexOf("random(")&&(r=ce(r)),"="===r.charAt(1)&&((u=mt(h,r)+(Kt(h)||0))||0===u)&&(r=u)),!c||h!==r||We)return isNaN(h*r)||""===r?(!d&&!(e in t)&&Q(e,r),qe.call(this,t,e,h,r,p,a||_.stringFilter,l)):(u=new hn(this._pt,t,e,+h||0,r-(h||0),"boolean"==typeof d?on:rn,0,p),l&&(u.fp=l),s&&u.modifier(s,this,t),this._pt=u)},Ze=function(t,e,n,r,i,o){var s,a,l,c;if(st[t]&&!1!==(s=new st[t]).init(i,s.rawVars?e[t]:function(t,e,n,r,i){if(M(t)&&(t=Xe(t,i,e,n,r)),!P(t)||t.style&&t.nodeType||N(t)||F(t))return T(t)?Xe(t,i,e,n,r):t;var o,s={};for(o in t)s[o]=Xe(t[o],i,e,n,r);return s}(e[t],r,i,o,n),n,r,o)&&(n._pt=a=new hn(n._pt,i,t,0,1,s.render,s,0,s.priority),n!==f))for(l=n._ptLookup[n._targets.indexOf(i)],c=s._props.length;c--;)l[s._props[c]]=a;return s},$e=function t(e,n,r){var i,a,c,u,d,h,p,f,g,A,m,v,y,_=e.vars,w=_.ease,B=_.startAt,I=_.immediateRender,S=_.lazy,k=_.onUpdate,E=_.runBackwards,T=_.yoyoEase,M=_.keyframes,L=_.autoRevert,O=e._dur,P=e._startAt,D=e._targets,z=e.parent,F=z&&"nested"===z.data?z.vars.targets:D,N="auto"===e._overwrite&&!o,j=e.timeline;if(j&&(!M||!w)&&(w="none"),e._ease=Oe(w,x.ease),e._yEase=T?Me(Oe(!0===T?w:T,x.ease)):0,T&&e._yoyo&&!e._repeat&&(T=e._yEase,e._yEase=e._ease,e._ease=T),e._from=!j&&!!_.runBackwards,!j||M&&!_.stagger){if(v=(f=D[0]?ht(D[0]).harness:0)&&_[f.prop],i=It(_,rt),P&&(P._zTime<0&&P.progress(1),n<0&&E&&I&&!L?P.render(-1,!0):P.revert(E&&O?et:tt),P._lazy=0),B){if(Tt(e._startAt=Ge.set(D,Ct({data:"isStart",overwrite:!1,parent:z,immediateRender:!0,lazy:!P&&R(S),startAt:null,delay:0,onUpdate:k&&function(){return he(e,"onUpdate")},stagger:0},B))),e._startAt._dp=0,e._startAt._sat=e,n<0&&(s||!I&&!L)&&e._startAt.revert(et),I&&O&&n<=0&&r<=0)return void(n&&(e._zTime=n))}else if(E&&O&&!P)if(n&&(I=!1),c=Ct({overwrite:!1,data:"isFromStart",lazy:I&&!P&&R(S),immediateRender:I,stagger:0,parent:z},i),v&&(c[f.prop]=v),Tt(e._startAt=Ge.set(D,c)),e._startAt._dp=0,e._startAt._sat=e,n<0&&(s?e._startAt.revert(et):e._startAt.render(-1,!0)),e._zTime=n,I){if(!n)return}else t(e._startAt,C,C);for(e._pt=e._ptCache=0,S=O&&R(S)||S&&!O,a=0;a<D.length;a++){if(p=(d=D[a])._gsap||dt(D)[a]._gsap,e._ptLookup[a]=A={},ot[p.id]&&it.length&&yt(),m=F===D?a:F.indexOf(d),f&&!1!==(g=new f).init(d,v||i,e,m,F)&&(e._pt=u=new hn(e._pt,d,g.name,0,1,g.render,g,0,g.priority),g._props.forEach((function(t){A[t]=u})),g.priority&&(h=1)),!f||v)for(c in i)st[c]&&(g=Ze(c,i,e,m,d,F))?g.priority&&(h=1):A[c]=u=Ue.call(e,d,c,"get",i[c],m,F,0,_.stringFilter);e._op&&e._op[a]&&e.kill(d,e._op[a]),N&&e._pt&&(Ye=e,l.killTweensOf(d,A,e.globalTime(n)),y=!e.parent,Ye=0),e._pt&&S&&(ot[p.id]=1)}h&&dn(e),e._onInit&&e._onInit(e)}e._onUpdate=k,e._initted=(!e._op||e._pt)&&!y,M&&n<=0&&j.render(b,!0,!0)},He=function(t,e,n,r){var i,o,s=e.ease||r||"power1.inOut";if(N(e))o=n[t]||(n[t]=[]),e.forEach((function(t,n){return o.push({t:n/(e.length-1)*100,v:t,e:s})}));else for(i in e)o=n[i]||(n[i]=[]),"ease"===i||o.push({t:parseFloat(t),v:e[i],e:s})},Xe=function(t,e,n,r,i){return M(t)?t.call(e,n,r,i):T(t)&&~t.indexOf("random(")?ce(t):t},Ve=ut+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Qe={};ft(Ve+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Qe[t]=1}));var Ge=function(t){function e(e,n,i,s){var a;"number"==typeof n&&(i.duration=n,n=i,i=null);var c,u,d,h,p,f,g,A,m=(a=t.call(this,s?n:St(n))||this).vars,v=m.duration,y=m.delay,x=m.immediateRender,b=m.stagger,C=m.overwrite,w=m.keyframes,B=m.defaults,I=m.scrollTrigger,S=m.yoyoEase,k=n.parent||l,E=(N(e)||F(e)?L(e[0]):"length"in n)?[e]:ee(e);if(a._targets=E.length?dt(E):G("GSAP target "+e+" not found. https://gsap.com",!_.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=C,w||b||z(v)||z(y)){if(n=a.vars,(c=a.timeline=new je({data:"nested",defaults:B||{},targets:k&&"nested"===k.data?k.vars.targets:E})).kill(),c.parent=c._dp=r(a),c._start=0,b||z(v)||z(y)){if(h=E.length,g=b&&ie(b),P(b))for(p in b)~Ve.indexOf(p)&&(A||(A={}),A[p]=b[p]);for(u=0;u<h;u++)(d=It(n,Qe)).stagger=0,S&&(d.yoyoEase=S),A&&wt(d,A),f=E[u],d.duration=+Xe(v,r(a),u,f,E),d.delay=(+Xe(y,r(a),u,f,E)||0)-a._delay,!b&&1===h&&d.delay&&(a._delay=y=d.delay,a._start+=y,d.delay=0),c.to(f,d,g?g(u,f,E):0),c._ease=Se.none;c.duration()?v=y=0:a.timeline=0}else if(w){St(Ct(c.vars.defaults,{ease:"none"})),c._ease=Oe(w.ease||n.ease||"none");var T,M,O,D=0;if(N(w))w.forEach((function(t){return c.to(E,t,">")})),c.duration();else{for(p in d={},w)"ease"===p||"easeEach"===p||He(p,w[p],d,w.easeEach);for(p in d)for(T=d[p].sort((function(t,e){return t.t-e.t})),D=0,u=0;u<T.length;u++)(O={ease:(M=T[u]).e,duration:(M.t-(u?T[u-1].t:0))/100*v})[p]=M.v,c.to(E,O,D),D+=O.duration;c.duration()<v&&c.to({},{duration:v-c.duration()})}}v||a.duration(v=c.duration())}else a.timeline=0;return!0!==C||o||(Ye=r(a),l.killTweensOf(E),Ye=0),jt(k,r(a),i),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(x||!v&&!w&&a._start===At(k._time)&&R(x)&&Ot(r(a))&&"nested"!==k.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-y)||0)),I&&Yt(r(a),I),a}i(e,t);var n=e.prototype;return n.render=function(t,e,n){var r,i,o,a,l,c,u,d,h,p=this._time,f=this._tDur,g=this._dur,A=t<0,m=t>f-C&&!A?f:t<C?0:t;if(g){if(m!==this._tTime||!t||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==A){if(r=m,d=this.timeline,this._repeat){if(a=g+this._rDelay,this._repeat<-1&&A)return this.totalTime(100*a+t,e,n);if(r=At(m%a),m===f?(o=this._repeat,r=g):((o=~~(m/a))&&o===At(m/a)&&(r=g,o--),r>g&&(r=g)),(c=this._yoyo&&1&o)&&(h=this._yEase,r=g-r),l=Rt(this._tTime,a),r===p&&!n&&this._initted&&o===l)return this._tTime=m,this;o!==l&&(d&&this._yEase&&Le(d,c),this.vars.repeatRefresh&&!c&&!this._lock&&this._time!==g&&this._initted&&(this._lock=n=1,this.render(At(a*o),!0).invalidate()._lock=0))}if(!this._initted){if(Wt(this,A?t:r,n,e,m))return this._tTime=0,this;if(!(p===this._time||n&&this.vars.repeatRefresh&&o!==l))return this;if(g!==this._dur)return this.render(t,e,n)}if(this._tTime=m,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(h||this._ease)(r/g),this._from&&(this.ratio=u=1-u),r&&!p&&!e&&!o&&(he(this,"onStart"),this._tTime!==m))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;d&&d.render(t<0?t:!r&&c?-1e-8:d._dur*d._ease(r/this._dur),e,n)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(A&&Lt(this,t,0,n),he(this,"onUpdate")),this._repeat&&o!==l&&this.vars.onRepeat&&!e&&this.parent&&he(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(A&&!this._onUpdate&&Lt(this,t,0,!0),(t||!g)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&Tt(this,1),e||A&&!p||!(m||p||c)||(he(this,m===f?"onComplete":"onReverseComplete",!0),this._prom&&!(m<f&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,n,r){var i,o,a,l=t.ratio,c=e<0||!e&&(!t._start&&qt(t)&&(t._initted||!Ut(t))||(t._ts<0||t._dp._ts<0)&&!Ut(t))?0:1,u=t._rDelay,d=0;if(u&&t._repeat&&(d=Gt(0,t._tDur,e),o=Rt(d,u),t._yoyo&&1&o&&(c=1-c),o!==Rt(t._tTime,u)&&(l=1-c,t.vars.repeatRefresh&&t._initted&&t.invalidate())),c!==l||s||r||t._zTime===C||!e&&t._zTime){if(!t._initted&&Wt(t,e,r,n,d))return;for(a=t._zTime,t._zTime=e||(n?C:0),n||(n=e&&!a),t.ratio=c,t._from&&(c=1-c),t._time=0,t._tTime=d,i=t._pt;i;)i.r(c,i.d),i=i._next;e<0&&Lt(t,e,0,!0),t._onUpdate&&!n&&he(t,"onUpdate"),d&&t._repeat&&!n&&t.parent&&he(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===c&&(c&&Tt(t,1),n||s||(he(t,c?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,n);return this},n.targets=function(){return this._targets},n.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},n.resetTo=function(t,e,n,r,i){g||Be.wake(),this._ts||this.play();var o=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||$e(this,o),function(t,e,n,r,i,o,s,a){var l,c,u,d,h=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!h)for(h=t._ptCache[e]=[],u=t._ptLookup,d=t._targets.length;d--;){if((l=u[d][e])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==e&&l.fp!==e;)l=l._next;if(!l)return We=1,t.vars[e]="+=0",$e(t,s),We=0,a?G(e+" not eligible for reset"):1;h.push(l)}for(d=h.length;d--;)(l=(c=h[d])._pt||c).s=!r&&0!==r||i?l.s+(r||0)+o*l.c:r,l.c=n-l.s,c.e&&(c.e=gt(n)+Kt(c.e)),c.b&&(c.b=l.s+Kt(c.b))}(this,t,e,n,r,this._ease(o/this._dur),o,i)?this.resetTo(t,e,n,r,1):(Ft(this,0),this.parent||kt(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?pe(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ye&&!0!==Ye.vars.overwrite)._first||pe(this),this.parent&&n!==this.timeline.totalDuration()&&Zt(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,o,s,a,l,c,u=this._targets,d=t?ee(t):u,h=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var n=t.length,r=n===e.length;r&&n--&&t[n]===e[n];);return n<0}(u,d))return"all"===e&&(this._pt=0),pe(this);for(r=this._op=this._op||[],"all"!==e&&(T(e)&&(a={},ft(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var n,r,i,o,s=t[0]?ht(t[0]).harness:0,a=s&&s.aliases;if(!a)return e;for(r in n=wt({},e),a)if(r in n)for(i=(o=a[r].split(",")).length;i--;)n[o[i]]=n[r];return n}(u,e)),c=u.length;c--;)if(~d.indexOf(u[c]))for(a in i=h[c],"all"===e?(r[c]=e,s=i,o={}):(o=r[c]=r[c]||{},s=e),s)(l=i&&i[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Et(this,l,"_pt"),delete i[a]),"all"!==o&&(o[a]=1);return this._initted&&!this._pt&&p&&pe(this),this},e.to=function(t,n){return new e(t,n,arguments[2])},e.from=function(t,e){return Vt(1,arguments)},e.delayedCall=function(t,n,r,i){return new e(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},e.fromTo=function(t,e,n){return Vt(2,arguments)},e.set=function(t,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new e(t,n)},e.killTweensOf=function(t,e,n){return l.killTweensOf(t,e,n)},e}(Ne);Ct(Ge.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ft("staggerTo,staggerFrom,staggerFromTo",(function(t){Ge[t]=function(){var e=new je,n=Jt.call(arguments,0);return n.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,n)}}));var Ke=function(t,e,n){return t[e]=n},Je=function(t,e,n){return t[e](n)},tn=function(t,e,n,r){return t[e](r.fp,n)},en=function(t,e,n){return t.setAttribute(e,n)},nn=function(t,e){return M(t[e])?Je:O(t[e])&&t.setAttribute?en:Ke},rn=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},on=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},sn=function(t,e){var n=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*t):Math.round(1e4*(n.s+n.c*t))/1e4)+r,n=n._next;r+=e.c}e.set(e.t,e.p,r,e)},an=function(t,e){for(var n=e._pt;n;)n.r(t,n.d),n=n._next},ln=function(t,e,n,r){for(var i,o=this._pt;o;)i=o._next,o.p===r&&o.modifier(t,e,n),o=i},cn=function(t){for(var e,n,r=this._pt;r;)n=r._next,r.p===t&&!r.op||r.op===t?Et(this,r,"_pt"):r.dep||(e=1),r=n;return!e},un=function(t,e,n,r){r.mSet(t,e,r.m.call(r.tween,n,r.mt),r)},dn=function(t){for(var e,n,r,i,o=t._pt;o;){for(e=o._next,n=r;n&&n.pr>o.pr;)n=n._next;(o._prev=n?n._prev:i)?o._prev._next=o:r=o,(o._next=n)?n._prev=o:i=o,o=e}t._pt=r},hn=function(){function t(t,e,n,r,i,o,s,a,l){this.t=e,this.s=r,this.c=i,this.p=n,this.r=o||rn,this.d=s||this,this.set=a||Ke,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,n){this.mSet=this.mSet||this.set,this.set=un,this.m=t,this.mt=n,this.tween=e},t}();ft(ut+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return rt[t]=1})),H.TweenMax=H.TweenLite=Ge,H.TimelineLite=H.TimelineMax=je,l=new je({sortChildren:!1,defaults:x,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),_.stringFilter=we;var pn=[],fn={},gn=[],An=0,mn=0,vn=function(t){return(fn[t]||gn).map((function(t){return t()}))},yn=function(){var t=Date.now(),e=[];t-An>2&&(vn("matchMediaInit"),pn.forEach((function(t){var n,r,i,o,s=t.queries,a=t.conditions;for(r in s)(n=c.matchMedia(s[r]).matches)&&(i=1),n!==a[r]&&(a[r]=n,o=1);o&&(t.revert(),i&&e.push(t))})),vn("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),An=t,vn("matchMedia"))},_n=function(){function t(t,e){this.selector=e&&ne(e),this.data=[],this._r=[],this.isReverted=!1,this.id=mn++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,n){M(t)&&(n=e,e=t,t=M);var r=this,i=function(){var t,i=a,o=r.selector;return i&&i!==r&&i.data.push(r),n&&(r.selector=ne(n)),a=r,t=e.apply(r,arguments),M(t)&&r._r.push(t),a=i,r.selector=o,r.isReverted=!1,t};return r.last=i,t===M?i(r,(function(t){return r.add(null,t)})):t?r[t]=i:i},e.ignore=function(t){var e=a;a=null,t(this),a=e},e.getTweens=function(){var e=[];return this.data.forEach((function(n){return n instanceof t?e.push.apply(e,n.getTweens()):n instanceof Ge&&!(n.parent&&"nested"===n.parent.data)&&e.push(n)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var n=this;if(t?function(){for(var e,r=n.getTweens(),i=n.data.length;i--;)"isFlip"===(e=n.data[i]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return r.splice(r.indexOf(t),1)})));for(r.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),i=n.data.length;i--;)(e=n.data[i])instanceof je?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof Ge)&&e.revert&&e.revert(t);n._r.forEach((function(e){return e(t,n)})),n.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var r=pn.length;r--;)pn[r].id===this.id&&pn.splice(r,1)},e.revert=function(t){this.kill(t||{})},t}(),xn=function(){function t(t){this.contexts=[],this.scope=t}var e=t.prototype;return e.add=function(t,e,n){P(t)||(t={matches:t});var r,i,o,s=new _n(0,n||this.scope),l=s.conditions={};for(i in a&&!s.selector&&(s.selector=a.selector),this.contexts.push(s),e=s.add("onMatch",e),s.queries=t,t)"all"===i?o=1:(r=c.matchMedia(t[i]))&&(pn.indexOf(s)<0&&pn.push(s),(l[i]=r.matches)&&(o=1),r.addListener?r.addListener(yn):r.addEventListener("change",yn));return o&&e(s,(function(t){return s.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),bn={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e.forEach((function(t){return ge(t)}))},timeline:function(t){return new je(t)},getTweensOf:function(t,e){return l.getTweensOf(t,e)},getProperty:function(t,e,n,r){T(t)&&(t=ee(t)[0]);var i=ht(t||{}).get,o=n?bt:xt;return"native"===n&&(n=""),t?e?o((st[e]&&st[e].get||i)(t,e,n,r)):function(e,n,r){return o((st[e]&&st[e].get||i)(t,e,n,r))}:t},quickSetter:function(t,e,n){if((t=ee(t)).length>1){var r=t.map((function(t){return Bn.quickSetter(t,e,n)})),i=r.length;return function(t){for(var e=i;e--;)r[e](t)}}t=t[0]||{};var o=st[e],s=ht(t),a=s.harness&&(s.harness.aliases||{})[e]||e,l=o?function(e){var r=new o;f._pt=0,r.init(t,n?e+n:e,f,0,[t]),r.render(1,r),f._pt&&an(1,f)}:s.set(t,a);return o?l:function(e){return l(t,a,n?e+n:e,s,1)}},quickTo:function(t,e,n){var r,i=Bn.to(t,wt(((r={})[e]="+=0.1",r.paused=!0,r),n||{})),o=function(t,n,r){return i.resetTo(e,t,n,r)};return o.tween=i,o},isTweening:function(t){return l.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Oe(t.ease,x.ease)),Bt(x,t||{})},config:function(t){return Bt(_,t||{})},registerEffect:function(t){var e=t.name,n=t.effect,r=t.plugins,i=t.defaults,o=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!st[t]&&!H[t]&&G(e+" effect requires "+t+" plugin.")})),at[e]=function(t,e,r){return n(ee(t),Ct(e||{},i),r)},o&&(je.prototype[e]=function(t,n,r){return this.add(at[e](t,P(n)?n:(r=n)&&{},this),r)})},registerEase:function(t,e){Se[t]=Oe(e)},parseEase:function(t,e){return arguments.length?Oe(t,e):Se},getById:function(t){return l.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var n,r,i=new je(t);for(i.smoothChildTiming=R(t.smoothChildTiming),l.remove(i),i._dp=0,i._time=i._tTime=l._time,n=l._first;n;)r=n._next,!e&&!n._dur&&n instanceof Ge&&n.vars.onComplete===n._targets[0]||jt(i,n,n._start-n._delay),n=r;return jt(l,i,0),i},context:function(t,e){return t?new _n(t,e):a},matchMedia:function(t){return new xn(t)},matchMediaRefresh:function(){return pn.forEach((function(t){var e,n,r=t.conditions;for(n in r)r[n]&&(r[n]=!1,e=1);e&&t.revert()}))||yn()},addEventListener:function(t,e){var n=fn[t]||(fn[t]=[]);~n.indexOf(e)||n.push(e)},removeEventListener:function(t,e){var n=fn[t],r=n&&n.indexOf(e);r>=0&&n.splice(r,1)},utils:{wrap:function t(e,n,r){var i=n-e;return N(e)?le(e,t(0,e.length),n):Qt(r,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,n,r){var i=n-e,o=2*i;return N(e)?le(e,t(0,e.length-1),n):Qt(r,(function(t){return e+((t=(o+(t-e)%o)%o||0)>i?o-t:t)}))},distribute:ie,random:ae,snap:se,normalize:function(t,e,n){return ue(t,e,0,1,n)},getUnit:Kt,clamp:function(t,e,n){return Qt(n,(function(n){return Gt(t,e,n)}))},splitColor:ye,toArray:ee,selector:ne,mapRange:ue,pipe:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(n){return t(parseFloat(n))+(e||Kt(n))}},interpolate:function t(e,n,r,i){var o=isNaN(e+n)?0:function(t){return(1-t)*e+t*n};if(!o){var s,a,l,c,u,d=T(e),h={};if(!0===r&&(i=1)&&(r=null),d)e={p:e},n={p:n};else if(N(e)&&!N(n)){for(l=[],c=e.length,u=c-2,a=1;a<c;a++)l.push(t(e[a-1],e[a]));c--,o=function(t){t*=c;var e=Math.min(u,~~t);return l[e](t-e)},r=n}else i||(e=wt(N(e)?[]:{},e));if(!l){for(s in n)Ue.call(h,e,s,"get",n[s]);o=function(t){return an(t,h)||(d?e.p:e)}}}return Qt(r,o)},shuffle:re},install:V,effects:at,ticker:Be,updateRoot:je.updateRoot,plugins:st,globalTimeline:l,core:{PropTween:hn,globals:K,Tween:Ge,Timeline:je,Animation:Ne,getCache:ht,_removeLinkedListItem:Et,reverting:function(){return s},context:function(t){return t&&a&&(a.data.push(t),t._ctx=a),a},suppressOverwrites:function(t){return o=t}}};ft("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return bn[t]=Ge[t]})),Be.add(je.updateRoot),f=bn.to({},{duration:0});var Cn=function(t,e){for(var n=t._pt;n&&n.p!==e&&n.op!==e&&n.fp!==e;)n=n._next;return n},wn=function(t,e){return{name:t,rawVars:1,init:function(t,n,r){r._onInit=function(t){var r,i;if(T(n)&&(r={},ft(n,(function(t){return r[t]=1})),n=r),e){for(i in r={},n)r[i]=e(n[i]);n=r}!function(t,e){var n,r,i,o=t._targets;for(n in e)for(r=o.length;r--;)(i=t._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=Cn(i,n)),i&&i.modifier&&i.modifier(e[n],t,o[r],n))}(t,n)}}}},Bn=bn.registerPlugin({name:"attr",init:function(t,e,n,r,i){var o,s,a;for(o in this.tween=n,e)a=t.getAttribute(o)||"",(s=this.add(t,"setAttribute",(a||0)+"",e[o],r,i,0,0,o)).op=o,s.b=a,this._props.push(o)},render:function(t,e){for(var n=e._pt;n;)s?n.set(n.t,n.p,n.b,n):n.r(t,n.d),n=n._next}},{name:"endArray",init:function(t,e){for(var n=e.length;n--;)this.add(t,n,t[n]||0,e[n],0,0,0,0,0,1)}},wn("roundProps",oe),wn("modifiers"),wn("snap",se))||bn;Ge.version=je.version=Bn.version="3.12.3",h=1,D()&&Ie();var In,Sn,kn,En,Tn,Mn,Ln,On,Pn=Se.Power0,Rn=Se.Power1,Dn=Se.Power2,zn=Se.Power3,Fn=Se.Power4,Nn=Se.Linear,jn=Se.Quad,Yn=Se.Cubic,Wn=Se.Quart,qn=Se.Quint,Un=Se.Strong,Zn=Se.Elastic,$n=Se.Back,Hn=Se.SteppedEase,Xn=Se.Bounce,Vn=Se.Sine,Qn=Se.Expo,Gn=Se.Circ,Kn={},Jn=180/Math.PI,tr=Math.PI/180,er=Math.atan2,nr=/([A-Z])/g,rr=/(left|right|width|margin|padding|x)/i,ir=/[\s,\(]\S/,or={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},sr=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},ar=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},lr=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},cr=function(t,e){var n=e.s+e.c*t;e.set(e.t,e.p,~~(n+(n<0?-.5:.5))+e.u,e)},ur=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},dr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},hr=function(t,e,n){return t.style[e]=n},pr=function(t,e,n){return t.style.setProperty(e,n)},fr=function(t,e,n){return t._gsap[e]=n},gr=function(t,e,n){return t._gsap.scaleX=t._gsap.scaleY=n},Ar=function(t,e,n,r,i){var o=t._gsap;o.scaleX=o.scaleY=n,o.renderTransform(i,o)},mr=function(t,e,n,r,i){var o=t._gsap;o[e]=n,o.renderTransform(i,o)},vr="transform",yr=vr+"Origin",_r=function t(e,n){var r=this,i=this.target,o=i.style,s=i._gsap;if(e in Kn&&o){if(this.tfm=this.tfm||{},"transform"===e)return or.transform.split(",").forEach((function(e){return t.call(r,e,n)}));if(~(e=or[e]||e).indexOf(",")?e.split(",").forEach((function(t){return r.tfm[t]=Fr(i,t)})):this.tfm[e]=s.x?s[e]:Fr(i,e),e===yr&&(this.tfm.zOrigin=s.zOrigin),this.props.indexOf(vr)>=0)return;s.svg&&(this.svgo=i.getAttribute("data-svg-origin"),this.props.push(yr,n,"")),e=vr}(o||n)&&this.props.push(e,n,o[e])},xr=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},br=function(){var t,e,n=this.props,r=this.target,i=r.style,o=r._gsap;for(t=0;t<n.length;t+=3)n[t+1]?r[n[t]]=n[t+2]:n[t+2]?i[n[t]]=n[t+2]:i.removeProperty("--"===n[t].substr(0,2)?n[t]:n[t].replace(nr,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)o[e]=this.tfm[e];o.svg&&(o.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(t=Ln())&&t.isStart||i[vr]||(xr(i),o.zOrigin&&i[yr]&&(i[yr]+=" "+o.zOrigin+"px",o.zOrigin=0,o.renderTransform()),o.uncache=1)}},Cr=function(t,e){var n={target:t,props:[],revert:br,save:_r};return t._gsap||Bn.core.getCache(t),e&&e.split(",").forEach((function(t){return n.save(t)})),n},wr=function(t,e){var n=Sn.createElementNS?Sn.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):Sn.createElement(t);return n&&n.style?n:Sn.createElement(t)},Br=function t(e,n,r){var i=getComputedStyle(e);return i[n]||i.getPropertyValue(n.replace(nr,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&t(e,Sr(n)||n,1)||""},Ir="O,Moz,ms,Ms,Webkit".split(","),Sr=function(t,e,n){var r=(e||Tn).style,i=5;if(t in r&&!n)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(Ir[i]+t in r););return i<0?null:(3===i?"ms":i>=0?Ir[i]:"")+t},kr=function(){"undefined"!=typeof window&&window.document&&(In=window,Sn=In.document,kn=Sn.documentElement,Tn=wr("div")||{style:{}},wr("div"),vr=Sr(vr),yr=vr+"Origin",Tn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",On=!!Sr("perspective"),Ln=Bn.core.reverting,En=1)},Er=function t(e){var n,r=wr("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,o=this.nextSibling,s=this.style.cssText;if(kn.appendChild(r),r.appendChild(this),this.style.display="block",e)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(o?i.insertBefore(this,o):i.appendChild(this)),kn.removeChild(r),this.style.cssText=s,n},Tr=function(t,e){for(var n=e.length;n--;)if(t.hasAttribute(e[n]))return t.getAttribute(e[n])},Mr=function(t){var e;try{e=t.getBBox()}catch(n){e=Er.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===Er||(e=Er.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+Tr(t,["x","cx","x1"])||0,y:+Tr(t,["y","cy","y1"])||0,width:0,height:0}},Lr=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Mr(t))},Or=function(t,e){if(e){var n,r=t.style;e in Kn&&e!==yr&&(e=vr),r.removeProperty?("ms"!==(n=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty("--"===n?e:e.replace(nr,"-$1").toLowerCase())):r.removeAttribute(e)}},Pr=function(t,e,n,r,i,o){var s=new hn(t._pt,e,n,0,1,o?dr:ur);return t._pt=s,s.b=r,s.e=i,t._props.push(n),s},Rr={deg:1,rad:1,turn:1},Dr={grid:1,flex:1},zr=function t(e,n,r,i){var o,s,a,l,c=parseFloat(r)||0,u=(r+"").trim().substr((c+"").length)||"px",d=Tn.style,h=rr.test(n),p="svg"===e.tagName.toLowerCase(),f=(p?"client":"offset")+(h?"Width":"Height"),g=100,A="px"===i,m="%"===i;if(i===u||!c||Rr[i]||Rr[u])return c;if("px"!==u&&!A&&(c=t(e,n,r,"px")),l=e.getCTM&&Lr(e),(m||"%"===u)&&(Kn[n]||~n.indexOf("adius")))return o=l?e.getBBox()[h?"width":"height"]:e[f],gt(m?c/o*g:c/100*o);if(d[h?"width":"height"]=g+(A?u:i),s=~n.indexOf("adius")||"em"===i&&e.appendChild&&!p?e:e.parentNode,l&&(s=(e.ownerSVGElement||{}).parentNode),s&&s!==Sn&&s.appendChild||(s=Sn.body),(a=s._gsap)&&m&&a.width&&h&&a.time===Be.time&&!a.uncache)return gt(c/a.width*g);if(!m||"height"!==n&&"width"!==n)(m||"%"===u)&&!Dr[Br(s,"display")]&&(d.position=Br(e,"position")),s===e&&(d.position="static"),s.appendChild(Tn),o=Tn[f],s.removeChild(Tn),d.position="absolute";else{var v=e.style[n];e.style[n]=g+i,o=e[f],v?e.style[n]=v:Or(e,n)}return h&&m&&((a=ht(s)).time=Be.time,a.width=s[f]),gt(A?o*c/g:o&&c?g/o*c:0)},Fr=function(t,e,n,r){var i;return En||kr(),e in or&&"transform"!==e&&~(e=or[e]).indexOf(",")&&(e=e.split(",")[0]),Kn[e]&&"transform"!==e?(i=Vr(t,r),i="transformOrigin"!==e?i[e]:i.svg?i.origin:Qr(Br(t,yr))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=Wr[e]&&Wr[e](t,e,n)||Br(t,e)||pt(t,e)||("opacity"===e?1:0)),n&&!~(i+"").trim().indexOf(" ")?zr(t,e,i,n)+n:i},Nr=function(t,e,n,r){if(!n||"none"===n){var i=Sr(e,t,1),o=i&&Br(t,i,1);o&&o!==n?(e=i,n=o):"borderColor"===e&&(n=Br(t,"borderTopColor"))}var s,a,l,c,u,d,h,p,f,g,A,m=new hn(this._pt,t.style,e,0,1,sn),v=0,y=0;if(m.b=n,m.e=r,n+="","auto"==(r+="")&&(d=t.style[e],t.style[e]=r,r=Br(t,e)||r,d?t.style[e]=d:Or(t,e)),we(s=[n,r]),r=s[1],l=(n=s[0]).match(W)||[],(r.match(W)||[]).length){for(;a=W.exec(r);)h=a[0],f=r.substring(v,a.index),u?u=(u+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(u=1),h!==(d=l[y++]||"")&&(c=parseFloat(d)||0,A=d.substr((c+"").length),"="===h.charAt(1)&&(h=mt(c,h)+A),p=parseFloat(h),g=h.substr((p+"").length),v=W.lastIndex-g.length,g||(g=g||_.units[e]||A,v===r.length&&(r+=g,m.e+=g)),A!==g&&(c=zr(t,e,d,g)||0),m._pt={_next:m._pt,p:f||1===y?f:",",s:c,c:p-c,m:u&&u<4||"zIndex"===e?Math.round:0});m.c=v<r.length?r.substring(v,r.length):""}else m.r="display"===e&&"none"===r?dr:ur;return U.test(r)&&(m.e=0),this._pt=m,m},jr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Yr=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var n,r,i,o=e.t,s=o.style,a=e.u,l=o._gsap;if("all"===a||!0===a)s.cssText="",r=1;else for(i=(a=a.split(",")).length;--i>-1;)n=a[i],Kn[n]&&(r=1,n="transformOrigin"===n?yr:vr),Or(o,n);r&&(Or(o,vr),l&&(l.svg&&o.removeAttribute("transform"),Vr(o,1),l.uncache=1,xr(s)))}},Wr={clearProps:function(t,e,n,r,i){if("isFromStart"!==i.data){var o=t._pt=new hn(t._pt,e,n,0,0,Yr);return o.u=r,o.pr=-10,o.tween=i,t._props.push(n),1}}},qr=[1,0,0,1,0,0],Ur={},Zr=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},$r=function(t){var e=Br(t,vr);return Zr(e)?qr:e.substr(7).match(Y).map(gt)},Hr=function(t,e){var n,r,i,o,s=t._gsap||ht(t),a=t.style,l=$r(t);return s.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?qr:l:(l!==qr||t.offsetParent||t===kn||s.svg||(i=a.display,a.display="block",(n=t.parentNode)&&t.offsetParent||(o=1,r=t.nextElementSibling,kn.appendChild(t)),l=$r(t),i?a.display=i:Or(t,"display"),o&&(r?n.insertBefore(t,r):n?n.appendChild(t):kn.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},Xr=function(t,e,n,r,i,o){var s,a,l,c=t._gsap,u=i||Hr(t,!0),d=c.xOrigin||0,h=c.yOrigin||0,p=c.xOffset||0,f=c.yOffset||0,g=u[0],A=u[1],m=u[2],v=u[3],y=u[4],_=u[5],x=e.split(" "),b=parseFloat(x[0])||0,C=parseFloat(x[1])||0;n?u!==qr&&(a=g*v-A*m)&&(l=b*(-A/a)+C*(g/a)-(g*_-A*y)/a,b=b*(v/a)+C*(-m/a)+(m*_-v*y)/a,C=l):(b=(s=Mr(t)).x+(~x[0].indexOf("%")?b/100*s.width:b),C=s.y+(~(x[1]||x[0]).indexOf("%")?C/100*s.height:C),"xOrigin"in c||!b&&!C||(b-=s.x,C-=s.y)),r||!1!==r&&c.smooth?(y=b-d,_=C-h,c.xOffset=p+(y*g+_*m)-y,c.yOffset=f+(y*A+_*v)-_):c.xOffset=c.yOffset=0,c.xOrigin=b,c.yOrigin=C,c.smooth=!!r,c.origin=e,c.originIsAbsolute=!!n,t.style[yr]="0px 0px",o&&(Pr(o,c,"xOrigin",d,b),Pr(o,c,"yOrigin",h,C),Pr(o,c,"xOffset",p,c.xOffset),Pr(o,c,"yOffset",f,c.yOffset)),t.setAttribute("data-svg-origin",b+" "+C)},Vr=function(t,e){var n=t._gsap||new Fe(t);if("x"in n&&!e&&!n.uncache)return n;var r,i,o,s,a,l,c,u,d,h,p,f,g,A,m,v,y,x,b,C,w,B,I,S,k,E,T,M,L,O,P,R,D=t.style,z=n.scaleX<0,F="px",N="deg",j=getComputedStyle(t),Y=Br(t,yr)||"0";return r=i=o=l=c=u=d=h=p=0,s=a=1,n.svg=!(!t.getCTM||!Lr(t)),j.translate&&("none"===j.translate&&"none"===j.scale&&"none"===j.rotate||(D[vr]=("none"!==j.translate?"translate3d("+(j.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==j.rotate?"rotate("+j.rotate+") ":"")+("none"!==j.scale?"scale("+j.scale.split(" ").join(",")+") ":"")+("none"!==j[vr]?j[vr]:"")),D.scale=D.rotate=D.translate="none"),A=Hr(t,n.svg),n.svg&&(n.uncache?(k=t.getBBox(),Y=n.xOrigin-k.x+"px "+(n.yOrigin-k.y)+"px",S=""):S=!e&&t.getAttribute("data-svg-origin"),Xr(t,S||Y,!!S||n.originIsAbsolute,!1!==n.smooth,A)),f=n.xOrigin||0,g=n.yOrigin||0,A!==qr&&(x=A[0],b=A[1],C=A[2],w=A[3],r=B=A[4],i=I=A[5],6===A.length?(s=Math.sqrt(x*x+b*b),a=Math.sqrt(w*w+C*C),l=x||b?er(b,x)*Jn:0,(d=C||w?er(C,w)*Jn+l:0)&&(a*=Math.abs(Math.cos(d*tr))),n.svg&&(r-=f-(f*x+g*C),i-=g-(f*b+g*w))):(R=A[6],O=A[7],T=A[8],M=A[9],L=A[10],P=A[11],r=A[12],i=A[13],o=A[14],c=(m=er(R,L))*Jn,m&&(S=B*(v=Math.cos(-m))+T*(y=Math.sin(-m)),k=I*v+M*y,E=R*v+L*y,T=B*-y+T*v,M=I*-y+M*v,L=R*-y+L*v,P=O*-y+P*v,B=S,I=k,R=E),u=(m=er(-C,L))*Jn,m&&(v=Math.cos(-m),P=w*(y=Math.sin(-m))+P*v,x=S=x*v-T*y,b=k=b*v-M*y,C=E=C*v-L*y),l=(m=er(b,x))*Jn,m&&(S=x*(v=Math.cos(m))+b*(y=Math.sin(m)),k=B*v+I*y,b=b*v-x*y,I=I*v-B*y,x=S,B=k),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,u=180-u),s=gt(Math.sqrt(x*x+b*b+C*C)),a=gt(Math.sqrt(I*I+R*R)),m=er(B,I),d=Math.abs(m)>2e-4?m*Jn:0,p=P?1/(P<0?-P:P):0),n.svg&&(S=t.getAttribute("transform"),n.forceCSS=t.setAttribute("transform","")||!Zr(Br(t,vr)),S&&t.setAttribute("transform",S))),Math.abs(d)>90&&Math.abs(d)<270&&(z?(s*=-1,d+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,d+=d<=0?180:-180)),e=e||n.uncache,n.x=r-((n.xPercent=r&&(!e&&n.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*n.xPercent/100:0)+F,n.y=i-((n.yPercent=i&&(!e&&n.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*n.yPercent/100:0)+F,n.z=o+F,n.scaleX=gt(s),n.scaleY=gt(a),n.rotation=gt(l)+N,n.rotationX=gt(c)+N,n.rotationY=gt(u)+N,n.skewX=d+N,n.skewY=h+N,n.transformPerspective=p+F,(n.zOrigin=parseFloat(Y.split(" ")[2])||!e&&n.zOrigin||0)&&(D[yr]=Qr(Y)),n.svg||(n.xOffset=n.yOffset=0),n.force3D=_.force3D,n.renderTransform=n.svg?ri:On?ni:Kr,n.uncache=0,n},Qr=function(t){return(t=t.split(" "))[0]+" "+t[1]},Gr=function(t,e,n){var r=Kt(e);return gt(parseFloat(e)+parseFloat(zr(t,"x",n+"px",r)))+r},Kr=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,ni(t,e)},Jr="0deg",ti="0px",ei=") ",ni=function(t,e){var n=e||this,r=n.xPercent,i=n.yPercent,o=n.x,s=n.y,a=n.z,l=n.rotation,c=n.rotationY,u=n.rotationX,d=n.skewX,h=n.skewY,p=n.scaleX,f=n.scaleY,g=n.transformPerspective,A=n.force3D,m=n.target,v=n.zOrigin,y="",_="auto"===A&&t&&1!==t||!0===A;if(v&&(u!==Jr||c!==Jr)){var x,b=parseFloat(c)*tr,C=Math.sin(b),w=Math.cos(b);b=parseFloat(u)*tr,x=Math.cos(b),o=Gr(m,o,C*x*-v),s=Gr(m,s,-Math.sin(b)*-v),a=Gr(m,a,w*x*-v+v)}g!==ti&&(y+="perspective("+g+ei),(r||i)&&(y+="translate("+r+"%, "+i+"%) "),(_||o!==ti||s!==ti||a!==ti)&&(y+=a!==ti||_?"translate3d("+o+", "+s+", "+a+") ":"translate("+o+", "+s+ei),l!==Jr&&(y+="rotate("+l+ei),c!==Jr&&(y+="rotateY("+c+ei),u!==Jr&&(y+="rotateX("+u+ei),d===Jr&&h===Jr||(y+="skew("+d+", "+h+ei),1===p&&1===f||(y+="scale("+p+", "+f+ei),m.style[vr]=y||"translate(0, 0)"},ri=function(t,e){var n,r,i,o,s,a=e||this,l=a.xPercent,c=a.yPercent,u=a.x,d=a.y,h=a.rotation,p=a.skewX,f=a.skewY,g=a.scaleX,A=a.scaleY,m=a.target,v=a.xOrigin,y=a.yOrigin,_=a.xOffset,x=a.yOffset,b=a.forceCSS,C=parseFloat(u),w=parseFloat(d);h=parseFloat(h),p=parseFloat(p),(f=parseFloat(f))&&(p+=f=parseFloat(f),h+=f),h||p?(h*=tr,p*=tr,n=Math.cos(h)*g,r=Math.sin(h)*g,i=Math.sin(h-p)*-A,o=Math.cos(h-p)*A,p&&(f*=tr,s=Math.tan(p-f),i*=s=Math.sqrt(1+s*s),o*=s,f&&(s=Math.tan(f),n*=s=Math.sqrt(1+s*s),r*=s)),n=gt(n),r=gt(r),i=gt(i),o=gt(o)):(n=g,o=A,r=i=0),(C&&!~(u+"").indexOf("px")||w&&!~(d+"").indexOf("px"))&&(C=zr(m,"x",u,"px"),w=zr(m,"y",d,"px")),(v||y||_||x)&&(C=gt(C+v-(v*n+y*i)+_),w=gt(w+y-(v*r+y*o)+x)),(l||c)&&(s=m.getBBox(),C=gt(C+l/100*s.width),w=gt(w+c/100*s.height)),s="matrix("+n+","+r+","+i+","+o+","+C+","+w+")",m.setAttribute("transform",s),b&&(m.style[vr]=s)},ii=function(t,e,n,r,i){var o,s,a=360,l=T(i),c=parseFloat(i)*(l&&~i.indexOf("rad")?Jn:1)-r,u=r+c+"deg";return l&&("short"===(o=i.split("_")[1])&&(c%=a)!=c%180&&(c+=c<0?a:-360),"cw"===o&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===o&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),t._pt=s=new hn(t._pt,e,n,r,c,ar),s.e=u,s.u="deg",t._props.push(n),s},oi=function(t,e){for(var n in e)t[n]=e[n];return t},si=function(t,e,n){var r,i,o,s,a,l,c,u=oi({},n._gsap),d=n.style;for(i in u.svg?(o=n.getAttribute("transform"),n.setAttribute("transform",""),d[vr]=e,r=Vr(n,1),Or(n,vr),n.setAttribute("transform",o)):(o=getComputedStyle(n)[vr],d[vr]=e,r=Vr(n,1),d[vr]=o),Kn)(o=u[i])!==(s=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(a=Kt(o)!==(c=Kt(s))?zr(n,i,o,c):parseFloat(o),l=parseFloat(s),t._pt=new hn(t._pt,r,i,a,l-a,sr),t._pt.u=c||0,t._props.push(i));oi(r,u)};ft("padding,margin,Width,Radius",(function(t,e){var n="Top",r="Right",i="Bottom",o="Left",s=(e<3?[n,r,i,o]:[n+o,n+r,i+r,i+o]).map((function(n){return e<2?t+n:"border"+n+t}));Wr[e>1?"border"+t:t]=function(t,e,n,r,i){var o,a;if(arguments.length<4)return o=s.map((function(e){return Fr(t,e,n)})),5===(a=o.join(" ")).split(o[0]).length?o[0]:a;o=(r+"").split(" "),a={},s.forEach((function(t,e){return a[t]=o[e]=o[e]||o[(e-1)/2|0]})),t.init(e,a,i)}}));var ai,li,ci={name:"css",register:kr,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,n,r,i){var o,s,a,l,c,u,d,h,p,f,g,A,m,v,y,x,b,C,w,B,I=this._props,S=t.style,k=n.vars.startAt;for(d in En||kr(),this.styles=this.styles||Cr(t),x=this.styles.props,this.tween=n,e)if("autoRound"!==d&&(s=e[d],!st[d]||!Ze(d,e,n,r,t,i)))if(c=typeof s,u=Wr[d],"function"===c&&(c=typeof(s=s.call(n,r,t,i))),"string"===c&&~s.indexOf("random(")&&(s=ce(s)),u)u(this,t,d,s,n)&&(y=1);else if("--"===d.substr(0,2))o=(getComputedStyle(t).getPropertyValue(d)+"").trim(),s+="",be.lastIndex=0,be.test(o)||(h=Kt(o),p=Kt(s)),p?h!==p&&(o=zr(t,d,o,p)+p):h&&(s+=h),this.add(S,"setProperty",o,s,r,i,0,0,d),I.push(d),x.push(d,0,S[d]);else if("undefined"!==c){if(k&&d in k?(o="function"==typeof k[d]?k[d].call(n,r,t,i):k[d],T(o)&&~o.indexOf("random(")&&(o=ce(o)),Kt(o+"")||"auto"===o||(o+=_.units[d]||Kt(Fr(t,d))||""),"="===(o+"").charAt(1)&&(o=Fr(t,d))):o=Fr(t,d),l=parseFloat(o),(f="string"===c&&"="===s.charAt(1)&&s.substr(0,2))&&(s=s.substr(2)),a=parseFloat(s),d in or&&("autoAlpha"===d&&(1===l&&"hidden"===Fr(t,"visibility")&&a&&(l=0),x.push("visibility",0,S.visibility),Pr(this,S,"visibility",l?"inherit":"hidden",a?"inherit":"hidden",!a)),"scale"!==d&&"transform"!==d&&~(d=or[d]).indexOf(",")&&(d=d.split(",")[0])),g=d in Kn)if(this.styles.save(d),A||((m=t._gsap).renderTransform&&!e.parseTransform||Vr(t,e.parseTransform),v=!1!==e.smoothOrigin&&m.smooth,(A=this._pt=new hn(this._pt,S,vr,0,1,m.renderTransform,m,0,-1)).dep=1),"scale"===d)this._pt=new hn(this._pt,m,"scaleY",m.scaleY,(f?mt(m.scaleY,f+a):a)-m.scaleY||0,sr),this._pt.u=0,I.push("scaleY",d),d+="X";else{if("transformOrigin"===d){x.push(yr,0,S[yr]),C=void 0,w=void 0,B=void 0,w=(C=(b=s).split(" "))[0],B=C[1]||"50%","top"!==w&&"bottom"!==w&&"left"!==B&&"right"!==B||(b=w,w=B,B=b),C[0]=jr[w]||w,C[1]=jr[B]||B,s=C.join(" "),m.svg?Xr(t,s,0,v,0,this):((p=parseFloat(s.split(" ")[2])||0)!==m.zOrigin&&Pr(this,m,"zOrigin",m.zOrigin,p),Pr(this,S,d,Qr(o),Qr(s)));continue}if("svgOrigin"===d){Xr(t,s,1,v,0,this);continue}if(d in Ur){ii(this,m,d,l,f?mt(l,f+s):s);continue}if("smoothOrigin"===d){Pr(this,m,"smooth",m.smooth,s);continue}if("force3D"===d){m[d]=s;continue}if("transform"===d){si(this,s,t);continue}}else d in S||(d=Sr(d)||d);if(g||(a||0===a)&&(l||0===l)&&!ir.test(s)&&d in S)a||(a=0),(h=(o+"").substr((l+"").length))!==(p=Kt(s)||(d in _.units?_.units[d]:h))&&(l=zr(t,d,o,p)),this._pt=new hn(this._pt,g?m:S,d,l,(f?mt(l,f+a):a)-l,g||"px"!==p&&"zIndex"!==d||!1===e.autoRound?sr:cr),this._pt.u=p||0,h!==p&&"%"!==p&&(this._pt.b=o,this._pt.r=lr);else if(d in S)Nr.call(this,t,d,o,f?f+s:s);else if(d in t)this.add(t,d,o||t[d],f?f+s:s,r,i);else if("parseTransform"!==d){Q(d,s);continue}g||(d in S?x.push(d,0,S[d]):x.push(d,1,o||t[d])),I.push(d)}y&&dn(this)},render:function(t,e){if(e.tween._time||!Ln())for(var n=e._pt;n;)n.r(t,n.d),n=n._next;else e.styles.revert()},get:Fr,aliases:or,getSetter:function(t,e,n){var r=or[e];return r&&r.indexOf(",")<0&&(e=r),e in Kn&&e!==yr&&(t._gsap.x||Fr(t,"x"))?n&&Mn===n?"scale"===e?gr:fr:(Mn=n||{})&&("scale"===e?Ar:mr):t.style&&!O(t.style[e])?hr:~e.indexOf("-")?pr:nn(t,e)},core:{_removeProperty:Or,_getMatrix:Hr}};Bn.utils.checkPrefix=Sr,Bn.core.getStyleSaver=Cr,li=ft("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(ai="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Kn[t]=1})),ft(ai,(function(t){_.units[t]="deg",Ur[t]=1})),or[li[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+ai,ft("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");or[e[1]]=li[e[0]]})),ft("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){_.units[t]="px"})),Bn.registerPlugin(ci);var ui=Bn.registerPlugin(ci)||Bn,di=ui.core.Tween},339:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),l=n.n(a),c=n(565),u=n.n(c),d=n(216),h=n.n(d),p=n(589),f=n.n(p),g=n(114),A={};A.styleTagTransform=f(),A.setAttributes=u(),A.insert=l().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=h(),i()(g.Z,A);const m=g.Z&&g.Z.locals?g.Z.locals:void 0},932:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),l=n.n(a),c=n(565),u=n.n(c),d=n(216),h=n.n(d),p=n(589),f=n.n(p),g=n(439),A={};A.styleTagTransform=f(),A.setAttributes=u(),A.insert=l().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=h(),i()(g.Z,A);const m=g.Z&&g.Z.locals?g.Z.locals:void 0},430:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),l=n.n(a),c=n(565),u=n.n(c),d=n(216),h=n.n(d),p=n(589),f=n.n(p),g=n(658),A={};A.styleTagTransform=f(),A.setAttributes=u(),A.insert=l().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=h(),i()(g.Z,A);const m=g.Z&&g.Z.locals?g.Z.locals:void 0},233:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),l=n.n(a),c=n(565),u=n.n(c),d=n(216),h=n.n(d),p=n(589),f=n.n(p),g=n(175),A={};A.styleTagTransform=f(),A.setAttributes=u(),A.insert=l().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=h(),i()(g.Z,A);const m=g.Z&&g.Z.locals?g.Z.locals:void 0},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},s=[],a=0;a<t.length;a++){var l=t[a],c=r.base?l[0]+r.base:l[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var h=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var f=i(p,r);r.byIndex=a,e.splice(a,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var l=r(t,i),c=0;c<o.length;c++){var u=n(o[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=l}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},490:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{l(r.next(t))}catch(t){o(t)}}function a(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.exportPdf=void 0;const i=n(67),o=n(796),s=n(519);function a(t){document.body.appendChild(t);const e=t.getBoundingClientRect();t.querySelectorAll("*").forEach((t=>{const n=t.getBoundingClientRect();(n.x+n.width<e.x||n.y+n.height<e.y||n.x>e.x+e.width||n.y>e.y+e.height)&&t.remove()})),document.body.removeChild(t)}e.exportPdf=function(){return r(this,void 0,void 0,(function*(){const t=document.getElementById("svg"),e=t.viewBox.baseVal,n=1*e.width,r=1*e.height,l=(0,i.currentStep)();let c=(0,i.allSteps)();const u={type:"toPdf",svg:void 0,width:n,height:r,presentation:s.manifest.presentation,maxindex:0,index:0};for(const t of c)u.maxindex++;const d=document.querySelector("#pdf-export-status");try{for(const e of c){yield(0,i.gotoStep)(e,"silent");const n=t.cloneNode(!0);a(n),u.svg=(new XMLSerializer).serializeToString(n),u.index++;const r=yield(0,o.sendToServer)(u);if("pdf created"!=r.status)throw"error"==r.status?r.explanation:"unexpected response from server";d.innerHTML="Exporting slide "+u.index+"/"+u.maxindex}d.innerHTML="Successfully exported pdf.";const e=document.querySelector("#link-to-pdf");e.classList.add("growAndShrink"),console.log("adding new"),setTimeout((()=>{e.classList.remove("growAndShrink")}),3e3)}catch(t){d.innerHTML="Failed to export:"+t}(0,i.gotoStep)(l,"silent")}))}},491:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.findZoomEvent=e.eventDescription=e.runOverlay=e.isOverlay=e.zoomSlide=e.createEventTree=void 0;const r=n(519),i=n(100),o=n(358),s=n(67),a=n(779);e.isOverlay=function(t){return"show"==t.type||"hide"==t.type},e.zoomSlide=function(t,e="animated"){function n(t){return" "+t.x+" "+t.y+" "+t.width+" "+t.height}const r=document.getElementById("svg"),s=(0,i.applyTransform)(a.transforms.get(t),a.localRect.get(t));"silent"==e?r.setAttribute("viewBox",n(s)):new o.TimelineMax({}).to(r,1.5,{attr:{viewBox:n(s)}})},e.runOverlay=function(t,e,n){let r;r="show"==t.type&&1==e||"hide"==t.type&&-1==e?1:0;const i=a.svgMap.get(t);null!=i&&("animated"==n?o.gsap.to(i,{duration:.3,opacity:r}):i.style.opacity=r.toString())},e.createEventTree=function(){!function t(e,n){if(e.parent=n,"child"==e.type)for(const n of e.children)t(n,e)}(r.manifest.tree,void 0)},e.eventDescription=function(t){const e={type:"event",slideId:void 0,eventId:void 0};return t instanceof s.OverlayStep?(e.slideId=t.overlays[0].parent.id,e.eventId=t.overlays[0].eventId):t instanceof s.ZoomStep?(e.slideId=t.source.id,(0,s.zoomsIn)(t)?e.eventId=t.target.eventId:e.eventId="finish"):(e.slideId=r.manifest.tree.id,e.eventId="finish"),e},e.findZoomEvent=function(t){return function e(n){if(n.id==t)return n;for(const t of n.children)if("child"==t.type){const n=e(t);if(null!=n)return n}}(r.manifest.tree)}},796:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{l(r.next(t))}catch(t){o(t)}}function a(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.probeServer=e.fetchJSON=e.sendToServer=e.fileName=e.presentationDir=void 0;const i=n(915),o=n(519);e.presentationDir=function(){return"."},e.fileName=function(t,e){return null==t?"./"+e:"./"+o.manifest.slideDict[t]+"/"+e},e.sendToServer=function(t){return r(this,void 0,void 0,(function*(){"slides"!=t.type&&"wav"!=t.type||(t.presentation=o.manifest.presentation);const e=JSON.stringify(t),n=yield fetch("http://localhost:3001",{method:"POST",body:e});return n.ok?yield n.json():{status:"error",explanation:"not connected"}}))},e.fetchJSON=function(t){return r(this,void 0,void 0,(function*(){try{const e=yield fetch(t);if(e.ok)return e.json();throw"not connected"}catch(e){return(0,i.userAlert)("Could not load slide file "+t),null}}))},e.probeServer=function(){return r(this,void 0,void 0,(function*(){try{return yield fetch("http://localhost:3001",{method:"POST",body:JSON.stringify({type:"probe"})}),!0}catch(t){return!1}}))}},915:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{l(r.next(t))}catch(t){o(t)}}function a(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.userDefinedKeys=e.timelineHTML=e.timelineSeen=e.soundIcon=e.markDisabled=e.userAlert=e.updatePageNumber=e.removeLoading=e.openPanelTreeRec=e.openPanelTree=e.initPanels=e.updateTimelineDisplay=e.audioPlaying=e.markSeen=void 0;const i=n(519),o=n(208),s=n(195),a=n(358),l=n(674),c=n(67),u=n(490),d=new Map,h=new Map,p=new Map,f=new Map;function g(){p.clear();const t=document.getElementById("progress-line");t.innerHTML="";for(const e of(0,c.allSteps)()){const n=document.createElement("div"),r=document.createElement("div");r.classList.add("progress-filler"),r.style.width="0%",n.appendChild(r),t.appendChild(n),n.addEventListener("click",(function(t){A(e,t)}));const i=o.sounds.get(e);null!=i?(n.classList.remove("nosound"),n.style.flexGrow=i.duration.toString()):(n.classList.add("nosound"),n.style.flexGrow="10"),p.set(e,n),m(e,c.timeline.past.includes(e))}}function A(t,e){const n=e.offsetX,r=p.get(t).offsetWidth;t==(0,c.currentStep)()?(0,o.gotoAudio)(n/r):(0,c.gotoStep)(t)}function m(t,e){const n=p.get(t);null!=n&&(e?(n.firstChild.style.width="100%",n.classList.add("seen")):(n.firstChild.style.width="0%",n.classList.remove("seen")))}function v(t,e){const n=d.get(t).childNodes[0];e?(h.get(t).classList.remove("slide-stack-hidden"),n.innerHTML="expand_more"):(h.get(t).classList.add("slide-stack-hidden"),n.innerHTML="chevron_right")}function y(t){const e=Math.floor(t/60),n=Math.floor(t)%60;return n<10?e+":0"+n:e+":"+n}function _(){o.soundState==o.SoundState.Play?document.getElementById("progress-panel").classList.add("playing"):document.getElementById("progress-panel").classList.remove("playing")}function x(){const t=document.getElementById("play-button");switch((0,o.endOfSound)()?t.style.opacity="0":t.style.opacity="1",o.soundState!=o.SoundState.None&&document.body.classList.add("has-sound"),o.soundState){case o.SoundState.Play:t.style.color="black",t.innerHTML="pause";break;case o.SoundState.None:{t.style.color="black";const e=o.sounds.get((0,c.currentStep)());null==e?t.innerHTML="play_disabled":null!=e.audio?t.innerHTML="play_arrow":t.innerHTML="cached";for(const t of(0,c.allSteps)())p.get(t).classList.remove("recording");break}case o.SoundState.Recording:t.style.color="black",t.innerHTML="mic",p.get((0,c.currentStep)()).classList.add("recording");break;case o.SoundState.Live:t.style.color="red",t.innerHTML="mic_none"}_()}function b(t){const e=document.getElementById("left-panel");t?a.gsap.to(e,{width:"30%",duration:.3}):a.gsap.to(e,{width:0,duration:.3})}function C(){document.getElementById("left-panel").clientWidth>0?b(!1):b(!0)}let w;e.timelineHTML=g,e.timelineSeen=m,e.markSeen=function(t,e){let n;t instanceof c.OverlayStep&&(n=d.get(t.overlays[0])),t instanceof c.ZoomStep&&(0,c.zoomsIn)(t)&&(n=d.get(t.target));const r=p.get(t);1==e?(null!=n&&n.classList.add("tree-view-item-seen"),m(t,!0)):(null!=n&&n.classList.remove("tree-view-item-seen"),null!=r&&m(t,!1))},e.markDisabled=function(t){const e=d.get(t);null!=e&&(e.classList.add("disabled-event"),e.classList.remove("tree-view-item-loading"))},e.openPanelTree=v,e.openPanelTreeRec=function t(e){null!=e.parent&&("child"==e.type&&v(e,!0),t(e.parent))},e.removeLoading=function(t){null!=d.get(t)&&d.get(t).classList.remove("tree-view-item-loading");for(const e of t.children)"show"!=e.type&&"hide"!=e.type||null!=d.get(e)&&d.get(e).classList.remove("tree-view-item-loading")},e.audioPlaying=function(t){try{if(t==(0,o.stepAudio)((0,c.currentStep)())){const e=t.currentTime,n=t.duration,r=e+o.sounds.get((0,c.currentStep)()).previousDuration;document.getElementById("time-elapsed").innerHTML=y(r)+"/"+y(o.totalSoundDuration),p.get((0,c.currentStep)()).firstChild.style.width=100*e/n+"%"}}catch(t){console.log("tried to play illegally")}},e.updateTimelineDisplay=_,e.soundIcon=x;const B={};function I(t){for(const t of document.querySelectorAll(".key-binding"))t.classList.remove("disabled");w=t.key;for(const t of document.querySelectorAll(".most-recently-pressed-key"))t.innerHTML=w}function S(t){if(1==t.touches.length&&"none"==l.currentTool){const e=document.getElementById("svg").getBoundingClientRect(),n=(t.touches[0].clientX-e.x)/e.width;n>.9&&(0,i.nextButton)(),n<.1&&(0,i.prevButton)()}2==t.touches.length&&(0,l.toggleSketchpad)()}e.userDefinedKeys=B,e.initPanels=function(){document.getElementById("svg").addEventListener("touchstart",S),document.getElementById("open-menu").addEventListener("click",C),document.getElementById("prev-event").addEventListener("click",i.prevButton),document.getElementById("next-event").addEventListener("click",i.nextButton),document.getElementById("play-button").addEventListener("click",i.playButton),document.getElementById("sound-speed").addEventListener("click",o.playbackRateChange),function t(e){if(f.set(e,!1),null==e.parent)h.set(e,document.getElementById("slide-stack"));else if(e.merged&&"child"!=e.type);else{const t=h.get(e.parent),n=document.createElement("div");let r;if(d.set(e,n),n.classList.add("tree-view-item"),n.classList.add("tree-view-item-loading"),"show"==e.type&&(r="visibility"),"hide"==e.type&&(r="visibility_off"),"child"==e.type&&(r="chevron_right"),n.innerHTML='<i class="material-icons">'+r+"</i> "+e.name,n.addEventListener("click",(function(t){if("I"==t.target.nodeName){if("child"==e.type){const t=!f.get(e);f.set(e,t),v(e,t)}}else(0,c.gotoEvent)(e)})),t.appendChild(n),"child"==e.type){const n=document.createElement("div");n.classList.add("slide-stack"),n.classList.add("slide-stack-hidden"),t.appendChild(n),h.set(e,n)}}if("child"==e.type)for(const n of e.children)t(n)}(i.manifest.tree),g(),(0,s.initSearch)(),Object.keys(i.manifest.soundDict).length>0&&document.body.classList.add("has-sound"),x(),function(){function t(){let t="";document.getElementById("list-of-key-bindings").innerHTML="";for(let e in B)B[e]==i.prevButton&&(t=t+e+": previous slide <br>"),B[e]==i.nextButton&&(t=t+e+": next slide <br>");document.getElementById("list-of-key-bindings").innerHTML=t}!function(){r(this,void 0,void 0,(function*(){null!=i.manifest.pdfFile&&document.getElementById("link-to-pdf").classList.remove("hidden")}))}(),document.getElementById("tab-heads").addEventListener("click",(t=>{const e=t.target;var n;e.id.endsWith("tab-head")&&(n=e.id.slice(0,-9),document.getElementById("tab-heads").querySelectorAll("*").forEach((t=>t.classList.remove("active"))),document.getElementById(n+"-tab-head").classList.add("active"),document.getElementById("tab-contents").querySelectorAll("*").forEach((t=>t.classList.remove("active"))),document.getElementById(n+"-tab").classList.add("active"))})),document.getElementById("drawing-tools-checkbox").addEventListener("change",(t=>{(0,l.toggleSketchpad)()})),document.addEventListener("keydown",I);for(const e of document.querySelectorAll("span"))switch(e.id){case"new-prev-key":e.addEventListener("click",(e=>{null!=w&&(B[w]=i.prevButton),t()}));break;case"new-next-key":e.addEventListener("click",(e=>{e.target,null!=w&&(B[w]=i.nextButton),t()}));break;case"pdf-print-button":e.addEventListener("click",(t=>{(0,u.exportPdf)()}));break;case"link-to-pdf":e.addEventListener("click",(t=>{window.open(i.manifest.pdfFile,"open")}))}}()},e.userAlert=function(t){document.getElementById("text-alert").innerHTML=t,function(t){const e=a.gsap.timeline();t.style.display="inherit",e.to(t,{opacity:"100%",duration:.1}).to(t,{duration:2}).to(t,{opacity:"0",duration:1}),e.eventCallback("onComplete",(function(){t.style.display="none"}))}(document.getElementById("text-alert-box"))},e.updatePageNumber=function(){!function(){const t=new URL(window.location.href).searchParams;let e="?";for(const n of t.keys())"step"!=n&&(e+=`${n}=${t.get(n)}&`);t.keys()&&history.pushState({},null,e+"step="+c.timeline.past.length.toString())}(),document.getElementById("page-count-enumerator").innerHTML=(0,c.currentStep)().pageNumber.toString(),document.getElementById("page-count-denominator").innerHTML=" / "+c.timeline.lastStep.pageNumber.toString(),0==c.timeline.past.length?document.getElementById("prev-event").style.visibility="hidden":document.getElementById("prev-event").style.visibility="visible",0==c.timeline.future.length?document.getElementById("next-event").style.visibility="hidden":document.getElementById("next-event").style.visibility="visible"}},779:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.transforms=e.localRect=e.svgMap=e.addToQueue=void 0;const r=n(491),i=n(796),o=n(915),s=n(67),a=n(100),l=n(519),c={waiting:new Set,loading:new Set,onceEmpty:[],onError:[]},u=new Map;e.transforms=u;const d=new Map;e.svgMap=d;const h=new Map,p=new Map;function f(){const t=new Set;for(const e of c.waiting)if(null==e.parent||null!=d.get(e.parent)){const t=document.createElement("object"),n=(0,i.fileName)(e.id,"image.svg");t.setAttribute("data",n),t.setAttribute("type","image/svg+xml"),t.classList.add("hidden-svg"),document.body.appendChild(t),t.onload=function(){g(e,t)},c.loading.add(e)}else t.add(e);if(c.waiting=t,0==c.waiting.size&&0==c.loading.size){for(const t of c.onceEmpty)t();c.onceEmpty=[],c.onError=[]}}function g(t,e){try{let n,i;for(const t of e.contentDocument.firstElementChild.children)if("g"==t.nodeName){n=t;break}if(null==n)throw new Error("No apppropriate svg element found.");for(const n of e.contentDocument.firstElementChild.children)if("defs"==n.nodeName){i=n,h.set(t,i),A(i,t);break}for(const e of n.querySelectorAll("rect"))m(e,t,i);for(const t of n.querySelectorAll("a")){let e=t.firstElementChild,n=t.previousElementSibling;if(null!=n&&null!=e){let t=n.getBBox();const r=t.x||0,i=t.y||0;e.setAttribute("x",r.toString()),e.setAttribute("y",i.toString())}}d.set(t,n);const c=n.children;for(const e of t.children)if((0,r.isOverlay)(e))for(const t of c)t.id==e.id&&d.set(e,t);for(const e of c)for(const n of t.children)"child"==n.type&&n.id==e.id&&(e.style.opacity="0");if((0,s.futureSlide)(t))for(const e of(0,s.allSteps)().reverse())e instanceof s.OverlayStep&&e.event().parent==t&&e.reverse().run("silent");else for(const e of(0,s.allSteps)())e instanceof s.OverlayStep&&e.event().parent==t&&e.run("silent");(0,o.removeLoading)(t),function(t){const e=d.get(t);if(p.set(t,(0,a.getBoundRect)(e)),null==t.parent)u.set(t,(0,a.idTransform)());else{let e;for(const n of d.get(t.parent).children)if(n.id==t.id){let t;if("rect"==n.nodeName)t=n;else{const e=n.querySelectorAll("rect");if(0==e.length)throw"found no rectangles";t=e[0]}e={x:t.x.baseVal.value,y:t.y.baseVal.value,width:t.width.baseVal.value,height:t.height.baseVal.value}}const n=(0,a.applyTransform)(u.get(t.parent),e),r=(0,a.getTransform)(p.get(t),n);u.set(t,r)}e.setAttribute("transform",(0,a.transformToString)(u.get(t))),document.getElementById("svg").appendChild(e),null!=h.get(t)&&document.getElementById("svg").appendChild(h.get(t)),null==t.parent&&((0,r.zoomSlide)(t,"silent"),(0,l.updatePageNumber)())}(t)}catch(e){!function(){console.log("error");for(const t of c.onError)t();c.onceEmpty=[],c.onError=[]}(),(0,o.markDisabled)(t),(0,o.userAlert)("Failed to load svg for "+t.name),console.log(e)}c.loading.delete(t),f()}function A(t,e){for(const n of t.childNodes){let t=n;if(t.id=e.id+t.id,"clipPath"==t.nodeName&&t.remove(),"pattern"==t.nodeName)for(const n of t.getElementsByTagName("use")){const t=n.getAttribute("xlink:href"),r="#"+e.id+t.slice(1);n.setAttribute("xlink:href",r)}}}function m(t,e,n){let r,i=t.getAttribute("fill");if(null!=i&&i.startsWith("url(#")?(i="url(#"+e.id+i.slice(5),t.setAttribute("fill",i)):i=null,null!=n&&null!=i){let t=i.slice(5).slice(0,-1);for(const e of n.childNodes)if("pattern"==e.nodeName){const n=e;n.id==t&&(r=n)}}if(null!=r)for(const e of r.childNodes)if("use"==e.nodeName){let i,a=e.getAttribute("xlink:href");if(null!=a)for(const t of n.childNodes)if("image"==t.nodeName){const e=t;e.id==a.slice(1)&&(i=e)}if(null!=i){let e=document.createElementNS("http://www.w3.org/2000/svg","g");const n=parseFloat(i.getAttribute("width")||"1"),a=parseFloat(i.getAttribute("height")||"1");let l,c=parseFloat(t.getAttribute("width")||"1")/n,u=parseFloat(t.getAttribute("height")||"1")/a;if(t.hasAttribute("x")&&t.hasAttribute("y"))l=[c,0,0,u,parseFloat(t.getAttribute("x")||"0"),parseFloat(t.getAttribute("y")||"0")];else{if(!t.hasAttribute("transform"))throw"unknown type of rect with image";o=[c,0,0,u,0,0],l=[(s=t.getAttribute("transform").slice(7,-1).split(" ").map(parseFloat))[0]*o[0]+s[2]*o[1],s[1]*o[0]+s[3]*o[1],s[0]*o[2]+s[2]*o[3],s[1]*o[2]+s[3]*o[3],s[0]*o[4]+s[2]*o[5]+s[4],s[1]*o[4]+s[3]*o[5]+s[5]]}const d=l.map(String).join(" ");console.log(d),e.setAttribute("transform","matrix("+d+")"),e.id=t.id;let h=i.cloneNode(!0),p=t.parentNode;p.insertBefore(e,t),e.appendChild(h),p.removeChild(t),r.remove();break}}var o,s}e.localRect=p,e.addToQueue=function(t){return new Promise(((e,n)=>{c.onceEmpty.push(e),c.onError.push(n);for(const e of t)if("child"==e.type){let t=e;for(;null!=t&&null==d.get(t);)c.waiting.has(t)||c.loading.has(t)||c.waiting.add(e),t=t.parent}f()}))}},195:function(t,e,n){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.initSearch=void 0;const i=r(n(221)),o=n(67),s=n(519);let a;function l(){const t=document.getElementById("search-input").value,e=document.getElementById("search-results");e.innerHTML="";for(const n of a.search(t)){const t=n.item.slide;let r;r="child"==t.type?t.name:t.parent.name;const i=document.createElement("div");i.classList.add("one-result"),i.innerHTML=`<div class='search-result-slide'> ${r}</div> <div class='search-result-text'>${n.item.text}</div>`,i.addEventListener("click",(()=>{(0,o.gotoEvent)(t)})),e.appendChild(i)}}e.initSearch=function(){const t=[];!function e(n){for(const e of n.keywords)t.push({slide:n,text:e});if("child"==n.type)for(const t of n.children)e(t)}(s.manifest.tree),a=new i.default(t,{keys:["text"]});const e=document.getElementById("search-input");e.addEventListener("input",l),e.addEventListener("keyup",(t=>{"Escape"==t.key&&(e.value="",l())}))}},674:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.currentTool=e.toggleSketchpad=void 0;let n="none";e.currentTool=n;const r=[];let i=-1;const o={sigCanvas:void 0,matrix:void 0,point:void 0,curPath:void 0,curPathText:void 0,original:{x:0,y:0},rect:void 0};function s(){i>=0&&(r[i].remove(),i-=1),l()}function a(){if(i<r.length-1){i+=1;const t=r[i];o.sigCanvas.appendChild(t)}l()}function l(){i>=0?document.getElementById("sketch-undo").classList.remove("disabled"):document.getElementById("sketch-undo").classList.add("disabled"),i<r.length-1?document.getElementById("sketch-redo").classList.remove("disabled"):document.getElementById("sketch-redo").classList.add("disabled")}function c(t){document.getElementById("sketch-red").classList.remove("selected"),document.getElementById("sketch-blue").classList.remove("selected"),"red"==t?document.getElementById("sketch-red").classList.add("selected"):"blue"==t&&document.getElementById("sketch-blue").classList.add("selected"),e.currentTool=n=t}e.toggleSketchpad=function(){const t=document.getElementById("sketch-panel"),e=document.getElementById("drawing-tools-checkbox");switch(n){case"red":case"blue":e.checked=!1,t.style.display="none",c("none");break;case"none":e.checked=!0,c("red"),t.style.display="flex",l();break;default:throw"unsupported sketchpad case"}},document.getElementById("sketch-panel").addEventListener("click",(function(t){const e=t.target;"sketch-undo"==e.id&&s(),"sketch-redo"==e.id&&a(),"sketch-red"==e.id&&c("red"),"sketch-blue"==e.id&&c("blue")})),document.addEventListener("keydown",(function(t){"u"==t.key&&s(),"i"==t.key&&a()})),"ontouchstart"in document.documentElement&&document.getElementById("svg").addEventListener("touchmove",(function(t){t.preventDefault()})),document.getElementById("svg").addEventListener("pointerdown",(function t(e){if("pointerdown"==e.type&&(o.sigCanvas=document.getElementById("svg"),o.point=o.sigCanvas.createSVGPoint(),o.matrix=o.sigCanvas.getScreenCTM().inverse(),o.sigCanvas.addEventListener("pointermove",t,!1),o.sigCanvas.addEventListener("pointerup",t,!1)),o.point.x=e.clientX,o.point.y=e.clientY,o.point=o.point.matrixTransform(o.matrix),"none"==n){if("pointerdown"==e.type&&(o.original={x:o.point.x,y:o.point.y},o.rect=document.createElementNS("http://www.w3.org/2000/svg","rect"),o.rect.setAttributeNS(null,"x",o.point.x.toString()),o.rect.setAttributeNS(null,"y",o.point.y.toString()),o.rect.setAttributeNS(null,"fill","yellow"),o.rect.setAttributeNS(null,"opacity","20%"),o.sigCanvas.appendChild(o.rect)),"pointermove"==e.type){let t,e,n=o.point.y-o.original.y,r=o.point.x-o.original.x;n>=0?e=o.original.y:(n=-n,e=o.point.y),r>=0?t=o.original.x:(r=-r,t=o.point.x),o.rect.setAttributeNS(null,"x",t.toString()),o.rect.setAttributeNS(null,"y",e.toString()),o.rect.setAttributeNS(null,"height",n.toString()),o.rect.setAttributeNS(null,"width",r.toString())}"pointerup"==e.type&&o.rect.remove()}if("blue"==n||"red"==n){if("pointerdown"==e.type){o.curPath=document.createElementNS("http://www.w3.org/2000/svg","path"),o.curPathText="M "+o.point.x+" "+o.point.y,o.curPath.setAttributeNS(null,"d",o.curPathText);const t="blue"==n?"blue":"red";o.curPath.setAttributeNS(null,"stroke",t),o.curPath.setAttributeNS(null,"stroke-width",o.matrix.a.toString()),o.sigCanvas.appendChild(o.curPath),r.splice(i+1),r.push(o.curPath),i+=1,l()}"pointermove"==e.type&&(o.curPathText+=" L "+o.point.x+" "+o.point.y,o.curPath.setAttributeNS(null,"d",o.curPathText))}"pointerup"!=e.type&&"pointerout"!=e.type||(o.sigCanvas.removeEventListener("pointermove",t,!1),o.sigCanvas.removeEventListener("pointerup",t,!1))}),!1)},208:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{l(r.next(t))}catch(t){o(t)}}function a(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.stepAudio=e.endRecording=e.soundLive=e.SoundState=e.cacheFlush=e.endOfSound=e.soundPaused=e.resetSound=e.initSoundTimeline=e.totalSoundDuration=e.sounds=e.soundAdvance=e.gotoAudio=e.playbackRateChange=e.soundState=e.loadSound=e.soundRecord=e.soundPlay=e.soundStop=void 0;const i=n(519),o=n(796),s=n(491),a=n(915),l=n(67);var c;!function(t){t.Recording="Record",t.Live="Live",t.Play="Play",t.None="Right"}(c||(c={})),e.SoundState=c;let u=c.None;e.soundState=u;let d=0;e.totalSoundDuration=d;const h=new Map;e.sounds=h;let p,f,g="";function A(){g+="?"+Date.now()}function m(){if(u==c.Play){const t=B((0,l.currentStep)());null!=t&&(t.pause(),(0,a.audioPlaying)(t))}u!=c.Recording&&u!=c.Live||v(0),e.soundState=u=c.None,(0,a.soundIcon)()}function v(t){if(null==f||"recording"!=f.state)return;let e;switch(u){case c.Recording:e=!1;break;case c.Live:e=!0;break;default:throw"should not be in this state"}const n={presentation:void 0,type:"wav",forWhat:void 0,file:void 0};if(e)switch(n.forWhat={type:"step",description:void 0},t){case 1:n.forWhat.description=(0,l.currentStep)().description();break;case-1:{const t=l.timeline.past[l.timeline.past.length-1];n.forWhat.description=t.reverse().description();break}case 0:n.forWhat.description={type:"last",page:(0,l.currentStep)().pageNumber}}else n.forWhat=(0,s.eventDescription)((0,l.currentStep)());f.onstop=()=>{const t=new Blob(p),e=new FileReader;e.onload=function(t){const e=t.target.result,s=new Uint8Array(e);n.file=Array.from(s),function(){r(this,void 0,void 0,(function*(){try{const t=yield(0,o.sendToServer)(n);if("sound recorded"!=t.status)throw t.status;if(u==c.None){const t=yield(0,i.getManifest)();i.manifest.soundDict=t.soundDict,A(),w(void 0),(0,l.loadNearbySounds)(),(0,a.timelineHTML)()}}catch(t){console.log(t),(0,a.userAlert)("Failed to record sound. "+t)}}))}()},e.readAsArrayBuffer(t)},f.stop()}function y(t){(function(){return r(this,void 0,void 0,(function*(){const t=yield navigator.mediaDevices.getUserMedia({audio:!0});f=new MediaRecorder(t),p=[],f.start(),f.addEventListener("dataavailable",(t=>{p.push(t.data)}))}))})().then((()=>{e.soundState=u="live"==t?c.Live:c.Recording,(0,a.soundIcon)()})).catch((t=>{e.soundState=u=c.None,(0,a.soundIcon)(),"Safari"==(0,i.userAgent)()?(0,a.userAlert)("To enable Mediarecorder  in Safari, use Develop/Experimental features"):(0,a.userAlert)(t)}))}function _(){l.timeline.future.length>0?(I(),(0,l.moveHead)(1),C()):m()}e.cacheFlush=A,e.soundPaused=function(){const t=B((0,l.currentStep)());return null!=t&&t.currentTime>0},e.soundStop=m,e.endRecording=v,e.soundRecord=y,e.soundLive=function(){const t={type:"startLive",presentation:i.manifest.presentation};(0,l.gotoStep)((0,l.allSteps)()[0]).then((()=>{(0,o.sendToServer)(t),y("live"),(0,a.soundIcon)()}))};const x=[1,1.5,2,.7];let b=0;function C(t="normal"){try{const n=B((0,l.currentStep)());if(null==n)throw"no audio";return n.playbackRate=x[b],"fromEnd"==t&&(n.currentTime=Math.max(0,n.duration-10)),n.play(),e.soundState=u=c.Play,(0,a.soundIcon)(),!0}catch(t){return null!=h.get((0,l.currentStep)())&&(0,a.userAlert)("No sounds for this event"),m(),!1}}function w(t){null!=new URL(window.location.href).searchParams.get("nocache")&&A(),h.clear(),e.totalSoundDuration=d=0;let n=0;for(const r of(0,l.allSteps)())try{const a={filename:void 0,audio:void 0,duration:void 0,previousDuration:d};if(null==t){const t=(0,s.eventDescription)(r);a.duration=i.manifest.soundDict[t.slideId][t.eventId],a.filename=(0,o.fileName)(t.slideId,t.eventId+".mp3"+g)}else a.duration=t.steps[n].duration,a.filename=`${t.dir}/${n}.mp3${g}`,n++;if(null==a.duration)throw"no duration";h.set(r,a),e.totalSoundDuration=d+=a.duration}catch(t){}}function B(t){const e=h.get(t);return null!=e?e.audio:void 0}function I(){const t=B((0,l.currentStep)());null!=t&&(t.pause(),t.currentTime=0,(0,a.audioPlaying)(t),(0,a.soundIcon)())}e.playbackRateChange=function(){b=(b+1)%x.length;const t=B((0,l.currentStep)());null!=t&&(t.playbackRate=x[b]),document.getElementById("sound-speed").innerHTML="×"+x[b]},e.soundPlay=C,e.initSoundTimeline=w,e.loadSound=function(t){return new Promise(((e,n)=>{const r=h.get(t);if(null==r||null!=r.audio)e();else{const i=r.filename,o=new Audio(i);o.addEventListener("ended",_),o.addEventListener("progress",(()=>{r.audio=o,t==(0,l.currentStep)()&&(0,a.soundIcon)(),e()})),o.addEventListener("error",(()=>{h.delete(t),t==(0,l.currentStep)()&&(0,a.soundIcon)(),n()})),o.addEventListener("timeupdate",(t=>{(0,a.audioPlaying)(t.target)}))}}))},e.gotoAudio=function(t){const e=B((0,l.currentStep)());null!=e&&(e.currentTime=e.duration*t)},e.soundAdvance=function(t){const e=B((0,l.currentStep)());t<0?e.currentTime<1?(I(),(0,l.moveHead)(-1),C("fromEnd")):(e.currentTime=Math.max(0,e.currentTime-10),(0,a.soundIcon)()):e.currentTime=Math.min(e.duration-.01,e.currentTime+10)},e.stepAudio=B,e.resetSound=I,e.endOfSound=function(){const t=B((0,l.currentStep)());return 0==l.timeline.future.length&&null!=t&&t.currentTime==t.duration}},67:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{l(r.next(t))}catch(t){o(t)}}function a(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.loadNearbySounds=e.allSteps=e.futureSlide=e.gotoStep=e.gotoEvent=e.currentStep=e.zoomsIn=e.ZoomStep=e.OverlayStep=e.Step=e.timeline=e.moveHead=e.createTimeline=void 0;const i=n(491),o=n(915),s=n(519),a=n(208),l=n(779);class c{constructor(){}event(){return s.manifest.tree}description(){return{type:"last",page:this.pageNumber}}reverse(){return new c}run(t){}}e.Step=c;class u extends c{constructor(t,e){super(),this.direction=e,this.overlays=t}event(){return this.overlays[0]}description(){return{type:"overlays",page:this.pageNumber,slide:this.overlays[0].parent.id,direction:this.direction,overlays:this.overlays.map((t=>t.eventId))}}reverse(){return new u(this.overlays,1==this.direction?-1:1)}run(t){for(const e of this.overlays)(0,i.runOverlay)(e,this.direction,t)}}e.OverlayStep=u;class d extends c{constructor(t,e){super(),this.source=t,this.target=e}reverse(){return new d(this.target,this.source)}event(){return this.source}description(){return{type:"zoom",page:this.pageNumber,source:this.source.id,target:this.target.id}}run(t){(0,l.addToQueue)(this.target.children),(0,i.zoomSlide)(this.target,t),null!=this.target.parent&&(0,o.openPanelTree)(this.target,!0),this.source!=this.target.parent&&(0,o.openPanelTree)(this.source,!1)}}e.ZoomStep=d;const h={type:void 0,past:[],future:[],lastStep:new c};function p(t=0){if(h.future.length>t)return h.future[h.future.length-1-t];if(h.future.length==t)return h.lastStep;throw"tried to access step that does not exist"}function f(t){if(t==s.manifest.tree)return h.lastStep;const e=h.past.concat(h.future);if("child"==t.type)for(const n of e)if(n instanceof d&&n.target==t)return n;if("show"==t.type||"hide"==t.type)for(const n of e)if(n instanceof u&&n.overlays.includes(t))return n}function g(t){let e,n;if(1==t?(e=h.future,n=h.past):(e=h.past,n=h.future),0==e.length)return void console.log("cannot fall off the tape");(0,a.endRecording)(t);let r=e.pop();n.push(r),(0,o.markSeen)(r,t),-1==t&&(r=r.reverse()),r.run("animated"),v(),(0,o.soundIcon)(),(0,s.updatePageNumber)()}function A(){for(;h.past.length>0;){const t=h.past.pop();h.future.push(t)}}function m(t,e="animated"){return r(this,void 0,void 0,(function*(){let n;if(t instanceof u)n=t.overlays[0];else if(t instanceof d)n=t.source;else{if(t!=h.lastStep)throw"Wanted to go to a step that does not exist";n=s.manifest.tree}const r=[];let a;for(a="child"==n.type?n:n.parent;null!=a;){r.push(a);for(const t of a.children)"child"==t.type&&r.push(t);a=a.parent}for(yield(0,l.addToQueue)(r),(0,o.openPanelTreeRec)(n),A();p()!=t;){const t=h.future.pop();t instanceof u&&t.run("silent"),(0,o.markSeen)(t,1),h.past.push(t)}for(const t of h.future)(0,o.markSeen)(t,-1),t instanceof u&&t.reverse().run("silent");null!=h.lastStep&&(0,o.timelineSeen)(h.lastStep,!1);let c=n;"child"!=n.type&&(c=n.parent),"silent"==e?(0,i.zoomSlide)(c,"silent"):(0,i.zoomSlide)(c),v(),(0,o.soundIcon)(),(0,s.updatePageNumber)()}))}function v(){(0,a.loadSound)(p()),h.past.length>0&&(0,a.loadSound)(h.past[h.past.length-1]),h.future.length>1&&(0,a.loadSound)(h.future[h.future.length-2]),1==h.future.length&&(0,a.loadSound)(h.lastStep)}function y(){const t=h.past.slice().concat(h.future.slice().reverse());return Object.keys(s.manifest.soundDict).length>0&&t.push(h.lastStep),t}e.timeline=h,e.currentStep=p,e.createTimeline=function(t){if(null==t?function t(e){h.type="default";const n=[];for(const t of e.children)if(t.merged){const e=n.pop();e.push(t),n.push(e)}else n.push([t]);for(const r of n)if((0,i.isOverlay)(r[0]))h.past.push(new u(r,1));else{const n=r;h.past.push(new d(e,n[0])),t(n[0]);for(let e=1;e<n.length;e++)h.past.push(new d(n[e-1],n[e])),t(n[e]);h.past.push(new d(n[n.length-1],e))}}(s.manifest.tree):function(){h.type="recorded";for(const e of t.steps){let t;switch(e.step.type){case"zoom":t=new d((0,i.findZoomEvent)(e.step.source),(0,i.findZoomEvent)(e.step.target));break;case"overlays":{const n=[],r=(0,i.findZoomEvent)(e.step.slide);for(const t of e.step.overlays)for(const e of r.children)"child"!=e.type&&e.eventId==t&&n.push(e);t=new u(n,e.step.direction);break}case"last":t=new c}t.pageNumber=e.step.page,h.past.push(t)}h.lastStep=h.past.pop()}(),A(),null==t){const t=new Set;let e=1;for(const n of y())n.pageNumber=e,n instanceof d&&!t.has(n.target)&&null!=n.target.parent&&(e++,t.add(n.target));h.lastStep.pageNumber=e}},e.futureSlide=function(t){const e=f(t);return h.future.includes(e)},e.zoomsIn=function(t){return t instanceof d&&t.source==t.target.parent},e.moveHead=g,e.gotoStep=m,e.gotoEvent=function(t){const e=f(t);null!=e?m(e).then((()=>g(1))):console.log("this event has no associated step",t)},e.loadNearbySounds=v,e.allSteps=y},100:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getBoundRect=e.idTransform=e.transformToString=e.getTransform=e.applyTransform=void 0,e.applyTransform=function(t,e){return{x:e.x*t.scalex+t.deltax,y:e.y*t.scaley+t.deltay,width:e.width*t.scalex,height:e.height*t.scaley}},e.getTransform=function(t,e){const n=e.width/t.width,r=e.height/t.height;return{scalex:n,scaley:r,deltax:e.x-t.x*n,deltay:e.y-t.y*r}},e.transformToString=function(t){return"translate("+t.deltax+" "+t.deltay+") scale("+t.scalex+" "+t.scaley+")"},e.idTransform=function(){return{scalex:1,scaley:1,deltax:0,deltay:0}},e.getBoundRect=function(t){const e=t.firstElementChild,n={width:e.width.baseVal.value,height:e.height.baseVal.value,x:0,y:0},r=e.transform.baseVal;return r.length>0&&(n.x=r[0].matrix.e,n.y=r[0].matrix.f),e.remove(),n}},519:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{l(r.next(t))}catch(t){o(t)}}function a(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}l((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.playButton=e.prevButton=e.nextButton=e.userAgent=e.updatePageNumber=e.getManifest=e.manifest=void 0,n(233),n(339),n(932),n(430);const i=n(491),o=n(915);Object.defineProperty(e,"updatePageNumber",{enumerable:!0,get:function(){return o.updatePageNumber}});const s=n(208),a=n(796),l=n(674),c=n(67);let u;function d(){switch(s.soundState){case s.SoundState.Play:case s.SoundState.Recording:case s.SoundState.Live:(0,s.soundStop)();break;case s.SoundState.None:(0,s.endOfSound)()||(0,s.soundPlay)()}}function h(){if(c.timeline.future.length>0)switch(s.soundState){case s.SoundState.Play:(0,s.soundAdvance)(1);break;case s.SoundState.Recording:case s.SoundState.Live:(0,c.moveHead)(1),s.soundState==s.SoundState.Live?(0,s.soundRecord)("live"):(0,s.soundRecord)("event");break;case s.SoundState.None:(0,s.resetSound)(),(0,c.moveHead)(1)}}function p(){if(c.timeline.past.length>0)switch(s.soundState){case s.SoundState.Play:(0,s.soundAdvance)(-1);break;case s.SoundState.Recording:(0,s.soundStop)();break;case s.SoundState.Live:(0,c.moveHead)(-1),(0,s.soundRecord)("live");break;case s.SoundState.None:(0,s.soundPaused)()?(0,s.resetSound)():(0,c.moveHead)(-1)}}function f(t){if(t.target!=document.getElementById("search-input"))switch(t.key){case"ArrowRight":case"PageDown":h();break;case"ArrowLeft":case"PageUp":p();break;case" ":d();break;case"d":(0,l.toggleSketchpad)();break;case"r":"default"==c.timeline.type&&m()&&(s.soundState==s.SoundState.Recording?(0,s.soundStop)():((0,s.soundStop)(),(0,s.soundRecord)("event")));break;case"l":"default"==c.timeline.type&&m()&&(s.soundState==s.SoundState.Live?(0,s.soundStop)():s.soundState==s.SoundState.None&&(0,s.soundLive)());break;default:t.key in o.userDefinedKeys&&o.userDefinedKeys[t.key]()}}function g(){return r(this,void 0,void 0,(function*(){const t=yield(0,a.fetchJSON)((0,a.presentationDir)()+"/manifest.json");if(null==t)throw"The manifest is missing for the presentation";return t}))}e.manifest=u,e.userAgent=function(){return-1!==navigator.userAgent.indexOf("Chrome")?"Chrome":-1!==navigator.userAgent.indexOf("Firefox")?"Firefox":-1!==navigator.userAgent.indexOf("Safari")?"Safari":null},e.playButton=d,e.nextButton=h,e.prevButton=p,e.getManifest=g;let A=!1;function m(){return A}window.runFromApp=function(){},window.onload=function(){document.getElementById("loader-text").remove(),document.getElementById("upper-panel").style.opacity="",document.getElementById("progress-panel").style.opacity="",function(){r(this,void 0,void 0,(function*(){"server working"==(yield(0,a.sendToServer)({type:"probe"})).status&&(A=!0,document.getElementById("author-tab").classList.remove("hidden"),document.getElementById("author-tab-head").classList.remove("hidden"))}))}(),("ontouchstart"in window||navigator.maxTouchPoints>0)&&document.body.classList.add("tablet"),g().then((t=>{e.manifest=u=t,document.title=u.presentation,(0,i.createEventTree)();const n=function(){const t=new URL(window.location.href).searchParams;try{const e=parseInt(t.get("live"));return u.live[e]}catch(t){return}}();(0,c.createTimeline)(n),(0,s.initSoundTimeline)(n),(0,o.initPanels)(),document.addEventListener("keydown",f);const r=function(){const t=new URL(window.location.href).searchParams;try{return(0,c.currentStep)(parseInt(t.get("step")))}catch(t){return(0,c.currentStep)()}}();(0,c.gotoStep)(r).then((()=>{document.getElementById("svg").style.opacity="1"}))})).catch((t=>(0,o.userAlert)(t)))}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nc=void 0,n(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUtvakIsSUFBVXBrQixPQUFPQyxVQUFVTyxlQUFlTixLQUFLYyxFQUFLb2pCLEdDQ2xGZ2hDLEVBQW9Cai9CLEVBQUs1b0IsSUFDSCxvQkFBWHFvRCxRQUEwQkEsT0FBT0MsYUFDMUM3bEQsT0FBTzBsRCxlQUFlbm9ELEVBQVNxb0QsT0FBT0MsWUFBYSxDQUFFdG1ELE1BQU8sV0FFN0RTLE9BQU8wbEQsZUFBZW5vRCxFQUFTLGFBQWMsQ0FBRWdDLE9BQU8sR0FBTyxFQ0w5RDZsRCxFQUFvQlUsUUFBS3JuRCxFQ0dDMm1ELEVBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vc3JjL3ZpZXdlci9jc3MvbGVmdC1wYW5lbC5jc3MiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vc3JjL3ZpZXdlci9jc3MvcHJvZ3Jlc3MuY3NzIiwid2VicGFjazovL3NsYWpkb21hdC8uL3NyYy92aWV3ZXIvY3NzL3NrZXRjaC5jc3MiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vc3JjL3ZpZXdlci9jc3Mvdmlld2VyLmNzcyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3NsYWpkb21hdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3NsYWpkb21hdC8uL25vZGVfbW9kdWxlcy9mdXNlLmpzL2Rpc3QvZnVzZS5lc20uanMiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzIiwid2VicGFjazovL3NsYWpkb21hdC8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9zcmMvdmlld2VyL2Nzcy9sZWZ0LXBhbmVsLmNzcz85MGJhIiwid2VicGFjazovL3NsYWpkb21hdC8uL3NyYy92aWV3ZXIvY3NzL3Byb2dyZXNzLmNzcz9hZGU1Iiwid2VicGFjazovL3NsYWpkb21hdC8uL3NyYy92aWV3ZXIvY3NzL3NrZXRjaC5jc3M/MTk3YSIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9zcmMvdmlld2VyL2Nzcy92aWV3ZXIuY3NzP2U3ODkiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3NsYWpkb21hdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3NsYWpkb21hdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9zcmMvdmlld2VyL2NsaWVudC1wcmludC50cyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9zcmMvdmlld2VyL2V2ZW50LnRzIiwid2VicGFjazovL3NsYWpkb21hdC8uL3NyYy92aWV3ZXIvZmlsZXMudHMiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vc3JjL3ZpZXdlci9odG1sLnRzIiwid2VicGFjazovL3NsYWpkb21hdC8uL3NyYy92aWV3ZXIvbG9hZFNWRy50cyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9zcmMvdmlld2VyL3NlYXJjaC50cyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9zcmMvdmlld2VyL3NrZXRjaHBhZC50cyIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvLi9zcmMvdmlld2VyL3NvdW5kLnRzIiwid2VicGFjazovL3NsYWpkb21hdC8uL3NyYy92aWV3ZXIvdGltZWxpbmUudHMiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vc3JjL3ZpZXdlci90cmFuc2Zvcm0udHMiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0Ly4vc3JjL3ZpZXdlci92aWV3ZXIudHMiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NsYWpkb21hdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9zbGFqZG9tYXQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3NsYWpkb21hdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3NsYWpkb21hdC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3NsYWpkb21hdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vc2xhamRvbWF0L3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLyogc3R5bGUgc2hlZXQgZm9yIHRoZSBwYW5lbCBvbiB0aGUgbGVmdCwgd2hpY2ggY29udGFpbnMgdGhlIHRyZWUgdmlldyBvZiB0aGUgc2xpZGVzICovXG5cblxuXG4jbGVmdC1wYW5lbCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGNvbG9yOiBibGFjaztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGlnaHQtYmx1ZSk7XG4gICAgd2lkdGg6IDA7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHJlc2l6ZTogaG9yaXpvbnRhbDtcbiAgICBmb250LXNpemU6IDEycHg7XG59XG5cblxuXG4udHJlZS12aWV3LWl0ZW0ge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBjb2xvcjogZ3JheTtcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4udHJlZS12aWV3LWl0ZW0tc2VlbiB7XG4gICAgY29sb3I6IGJsYWNrO1xufVxuXG4udHJlZS12aWV3LWl0ZW0tbG9hZGluZyB7XG4gICAgY29sb3I6IHJlZDtcbn1cblxuLnRyZWUtdmlldy1pdGVtIGkge1xuICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBmb250LXNpemU6IDEwcHg7XG59XG5cbi5zbGlkZS1zdGFjayB7XG4gICAgZm9udC1zaXplOiAxMHB4O1xuICAgIG1hcmdpbi10b3A6IDVweDtcbiAgICBtYXJnaW4tbGVmdDogMS41ZW07XG4gICAgb3ZlcmZsb3c6IHNjcm9sbDtcbn1cblxuLnNsaWRlLXN0YWNrLWhpZGRlbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuI3NsaWRlLXN0YWNrLWNvbnRhaW5lciB7XG4gICAgb3ZlcmZsb3c6IHNjcm9sbDtcbiAgICBtYXJnaW4tdG9wOiAxMHB4XG59XG5cbi5kaXNhYmxlZC1ldmVudCB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG59XG5cblxuI21hZGUtdXNpbmctc2xhamRvbWF0IHtcbiAgICBtYXJnaW46IDEwcHg7XG4gICAgcGFkZGluZy1sZWZ0OiA3cHg7XG4gICAgLyogZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7ICovXG59XG5cbiNtYWRlLXVzaW5nLXNsYWpkb21hdCBpbWcge1xuICAgIHdpZHRoOiAxMDBweDtcbn1cblxuLyogdGhpcyBpcyB0aGUgcGRmIGJ1dHRvbiAqL1xuI2xpbmstdG8tcGRmIHtcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGNvbG9yOiB2YXIoLS1ibHVlKTtcbn1cblxuXG4jbG9nby1saW5lIHtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgbWFyZ2luLXRvcDogNXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDVweDtcbn1cblxuI2xvZ28tc2Vjb25kLWxpbmUge1xuICAgIG1hcmdpbjogMHB4O1xufVxuXG4jc2VhcmNoLXBhbmVsIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbiNzZWFyY2gtYm94IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDVweDtcbn1cblxuI3NlYXJjaC1ib3ggaSB7XG4gICAgbWFyZ2luOiAzcHg7XG4gICAgZm9udC1zaXplOiAxOHB4O1xufVxuXG4jc2VhcmNoLWJveCBpbnB1dCB7XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbiNzZWFyY2gtcmVzdWx0cyB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBtYXJnaW4tdG9wOiA1cHg7XG59XG5cbi5vbmUtcmVzdWx0IHtcbiAgICBwYWRkaW5nOiA1cHg7XG59XG5cbi5vbmUtcmVzdWx0OmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5zZWFyY2gtcmVzdWx0LXRleHQge1xuICAgIGNvbG9yOiBncmV5O1xuXG59XG5cbi8qIHRoZSBjb250YWluZXIgd2l0aCB0aGUgdGFiIGhlYWRzICovXG4jdGFiLWhlYWRzIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG59XG5cbi8qIHRoZSB0YWIgaGVhZHMgdGhlbSBzZWx2ZXMgKi9cbiN0YWItaGVhZHM+ZGl2IHtcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmx1ZSk7XG4gICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA1cHg7XG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDVweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi8qIGlmIHRoZSB0YWIgaGVhZCBpcyBhY3RpdmUsIHRoZW4gaXQgaGFzIGEgZGlmZmVyZW50IGNvbG91ciAqL1xuI3RhYi1oZWFkcz4uYWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS12ZXJ5LWxpZ2h0LWJsdWUpO1xufVxuXG4jdGFiLWNvbnRlbnRzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS12ZXJ5LWxpZ2h0LWJsdWUpO1xuICAgIGZsZXgtZ3JvdzogMTtcbn1cblxuI3RhYi1jb250ZW50cz5kaXYge1xuICAgIGRpc3BsYXk6IG5vbmU7XG59XG5cbiN0YWItY29udGVudHM+ZGl2LmFjdGl2ZSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbn1cblxuXG5cbiN0YWItY29udGVudHM+ZGl2PmRpdiB7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tbGlnaHQtYmx1ZSk7XG59XG5cbnAge1xuICAgIHdoaXRlLXNwYWNlOiBpbml0aWFsO1xufVxuXG4uY2hlY2tib3gtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuXG4uaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xufVxuXG5cbi8qICBhIGRpdiB3aXRoIGEgYnV0dG9uIGFuZCBjYXB0aW9uIGluIHRoZSBsZWZ0IHBhbmVsICovXG4uYnV0dG9uLWxpbmUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG5cbi5idXR0b24tbGluZT5zcGFuLm1hdGVyaWFsLWljb25zIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgY29sb3I6IHZhcigtLWJsdWUpO1xuICAgIG1hcmdpbi1sZWZ0OiA3cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA3cHg7XG59XG5cbi5idXR0b24tbGluZS5kaXNhYmxlZD5zcGFuLm1hdGVyaWFsLWljb25zIHtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgY29sb3I6IGdyYXk7XG59XG5cbi8qIGRpc2FibGVkIGNsYXNzIGZvciBidXR0b24gbGluZXMgKi9cblxuLmJ1dHRvbi1saW5lLmRpc2FibGVkIHtcbiAgICBjb2xvcjogZ3JheTtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cblxuXG4uZ3Jvd0FuZFNocmluayB7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQ7XG4gICAgLyogVHJhbnNpdGlvbiBwcm9wZXJ0eSBmb3Igc21vb3RoIHNjYWxpbmcgKi9cbiAgICBhbmltYXRpb246IGdyb3dBbmRTaHJpbmtGcmFtZXMgMXMgaW5maW5pdGUgZWFzZS1pbi1vdXQ7XG4gICAgLyogRHVyYXRpb24gYW5kIGVhc2luZyAqL1xufVxuXG4vKiBEZWZpbmUgdGhlIGFuaW1hdGlvbiAqL1xuQGtleWZyYW1lcyBncm93QW5kU2hyaW5rRnJhbWVzIHtcblxuICAgIDAlLFxuICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgICAgICAvKiBTdGFydCBhbmQgZW5kIHN0YXRlOiBub3JtYWwgc2l6ZSAqL1xuICAgIH1cblxuICAgIDUwJSB7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTtcbiAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgLyogTWlkZGxlIHN0YXRlOiBzbGlnaHRseSBsYXJnZXIgKi9cbiAgICB9XG59XG5cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3ZpZXdlci9jc3MvbGVmdC1wYW5lbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsc0ZBQXNGOzs7O0FBSXRGO0lBQ0ksa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1DQUFtQztJQUNuQyxRQUFRO0lBQ1IsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixlQUFlO0FBQ25COzs7O0FBSUE7SUFDSSxnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksVUFBVTtBQUNkOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixlQUFlO0FBQ25COztBQUVBO0lBQ0ksZUFBZTtJQUNmLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQjtBQUNKOztBQUVBO0lBQ0ksNkJBQTZCO0FBQ2pDOzs7QUFHQTtJQUNJLFlBQVk7SUFDWixpQkFBaUI7SUFDakI7OzBCQUVzQjtBQUMxQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUEsMkJBQTJCO0FBQzNCO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7OztBQUdBO0lBQ0ksZUFBZTtJQUNmLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QixlQUFlO0FBQ25COztBQUVBO0lBQ0ksV0FBVzs7QUFFZjs7QUFFQSxxQ0FBcUM7QUFDckM7SUFDSSxhQUFhO0lBQ2IsbUJBQW1CO0FBQ3ZCOztBQUVBLDhCQUE4QjtBQUM5QjtJQUNJLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osNkJBQTZCO0lBQzdCLG1CQUFtQjtJQUNuQiwyQkFBMkI7SUFDM0IsNEJBQTRCO0lBQzVCLGVBQWU7QUFDbkI7O0FBRUEsOERBQThEO0FBQzlEO0lBQ0ksd0NBQXdDO0FBQzVDOztBQUVBO0lBQ0ksd0NBQXdDO0lBQ3hDLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixrQkFBa0I7QUFDdEI7Ozs7QUFJQTtJQUNJLGFBQWE7SUFDYiwwQ0FBMEM7QUFDOUM7O0FBRUE7SUFDSSxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLG1CQUFtQjtBQUN2Qjs7O0FBR0E7SUFDSSxhQUFhO0FBQ2pCOzs7QUFHQSx1REFBdUQ7QUFDdkQ7SUFDSSxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLG1CQUFtQjtBQUN2Qjs7O0FBR0E7SUFDSSxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsV0FBVztBQUNmOztBQUVBLG9DQUFvQzs7QUFFcEM7SUFDSSxXQUFXO0lBQ1gsZUFBZTtBQUNuQjs7OztBQUlBO0lBQ0ksc0NBQXNDO0lBQ3RDLDJDQUEyQztJQUMzQyxzREFBc0Q7SUFDdEQsd0JBQXdCO0FBQzVCOztBQUVBLHlCQUF5QjtBQUN6Qjs7SUFFSTs7UUFFSSxtQkFBbUI7UUFDbkIscUNBQXFDO0lBQ3pDOztJQUVBO1FBQ0kscUJBQXFCO1FBQ3JCLFVBQVU7UUFDVixrQ0FBa0M7SUFDdEM7QUFDSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiBzdHlsZSBzaGVldCBmb3IgdGhlIHBhbmVsIG9uIHRoZSBsZWZ0LCB3aGljaCBjb250YWlucyB0aGUgdHJlZSB2aWV3IG9mIHRoZSBzbGlkZXMgKi9cXG5cXG5cXG5cXG4jbGVmdC1wYW5lbCB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saWdodC1ibHVlKTtcXG4gICAgd2lkdGg6IDA7XFxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgcmVzaXplOiBob3Jpem9udGFsO1xcbiAgICBmb250LXNpemU6IDEycHg7XFxufVxcblxcblxcblxcbi50cmVlLXZpZXctaXRlbSB7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBjb2xvcjogZ3JheTtcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi50cmVlLXZpZXctaXRlbS1zZWVuIHtcXG4gICAgY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4udHJlZS12aWV3LWl0ZW0tbG9hZGluZyB7XFxuICAgIGNvbG9yOiByZWQ7XFxufVxcblxcbi50cmVlLXZpZXctaXRlbSBpIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgZm9udC1zaXplOiAxMHB4O1xcbn1cXG5cXG4uc2xpZGUtc3RhY2sge1xcbiAgICBmb250LXNpemU6IDEwcHg7XFxuICAgIG1hcmdpbi10b3A6IDVweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDEuNWVtO1xcbiAgICBvdmVyZmxvdzogc2Nyb2xsO1xcbn1cXG5cXG4uc2xpZGUtc3RhY2staGlkZGVuIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuI3NsaWRlLXN0YWNrLWNvbnRhaW5lciB7XFxuICAgIG92ZXJmbG93OiBzY3JvbGw7XFxuICAgIG1hcmdpbi10b3A6IDEwcHhcXG59XFxuXFxuLmRpc2FibGVkLWV2ZW50IHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XFxufVxcblxcblxcbiNtYWRlLXVzaW5nLXNsYWpkb21hdCB7XFxuICAgIG1hcmdpbjogMTBweDtcXG4gICAgcGFkZGluZy1sZWZ0OiA3cHg7XFxuICAgIC8qIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7ICovXFxufVxcblxcbiNtYWRlLXVzaW5nLXNsYWpkb21hdCBpbWcge1xcbiAgICB3aWR0aDogMTAwcHg7XFxufVxcblxcbi8qIHRoaXMgaXMgdGhlIHBkZiBidXR0b24gKi9cXG4jbGluay10by1wZGYge1xcbiAgICBmbG9hdDogcmlnaHQ7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgY29sb3I6IHZhcigtLWJsdWUpO1xcbn1cXG5cXG5cXG4jbG9nby1saW5lIHtcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICBtYXJnaW4tdG9wOiA1cHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcXG59XFxuXFxuI2xvZ28tc2Vjb25kLWxpbmUge1xcbiAgICBtYXJnaW46IDBweDtcXG59XFxuXFxuI3NlYXJjaC1wYW5lbCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbiNzZWFyY2gtYm94IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgbWFyZ2luLXRvcDogNXB4O1xcbn1cXG5cXG4jc2VhcmNoLWJveCBpIHtcXG4gICAgbWFyZ2luOiAzcHg7XFxuICAgIGZvbnQtc2l6ZTogMThweDtcXG59XFxuXFxuI3NlYXJjaC1ib3ggaW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuI3NlYXJjaC1yZXN1bHRzIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcXG4gICAgbWFyZ2luLXRvcDogNXB4O1xcbn1cXG5cXG4ub25lLXJlc3VsdCB7XFxuICAgIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuLm9uZS1yZXN1bHQ6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uc2VhcmNoLXJlc3VsdC10ZXh0IHtcXG4gICAgY29sb3I6IGdyZXk7XFxuXFxufVxcblxcbi8qIHRoZSBjb250YWluZXIgd2l0aCB0aGUgdGFiIGhlYWRzICovXFxuI3RhYi1oZWFkcyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxufVxcblxcbi8qIHRoZSB0YWIgaGVhZHMgdGhlbSBzZWx2ZXMgKi9cXG4jdGFiLWhlYWRzPmRpdiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJsdWUpO1xcbiAgICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA1cHg7XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA1cHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLyogaWYgdGhlIHRhYiBoZWFkIGlzIGFjdGl2ZSwgdGhlbiBpdCBoYXMgYSBkaWZmZXJlbnQgY29sb3VyICovXFxuI3RhYi1oZWFkcz4uYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdmVyeS1saWdodC1ibHVlKTtcXG59XFxuXFxuI3RhYi1jb250ZW50cyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXZlcnktbGlnaHQtYmx1ZSk7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG59XFxuXFxuI3RhYi1jb250ZW50cz5kaXYge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4jdGFiLWNvbnRlbnRzPmRpdi5hY3RpdmUge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XFxufVxcblxcblxcblxcbiN0YWItY29udGVudHM+ZGl2PmRpdiB7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1saWdodC1ibHVlKTtcXG59XFxuXFxucCB7XFxuICAgIHdoaXRlLXNwYWNlOiBpbml0aWFsO1xcbn1cXG5cXG4uY2hlY2tib3gtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuXFxuLmhpZGRlbiB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcblxcbi8qICBhIGRpdiB3aXRoIGEgYnV0dG9uIGFuZCBjYXB0aW9uIGluIHRoZSBsZWZ0IHBhbmVsICovXFxuLmJ1dHRvbi1saW5lIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuXFxuLmJ1dHRvbi1saW5lPnNwYW4ubWF0ZXJpYWwtaWNvbnMge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGNvbG9yOiB2YXIoLS1ibHVlKTtcXG4gICAgbWFyZ2luLWxlZnQ6IDdweDtcXG4gICAgbWFyZ2luLXJpZ2h0OiA3cHg7XFxufVxcblxcbi5idXR0b24tbGluZS5kaXNhYmxlZD5zcGFuLm1hdGVyaWFsLWljb25zIHtcXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgICBjb2xvcjogZ3JheTtcXG59XFxuXFxuLyogZGlzYWJsZWQgY2xhc3MgZm9yIGJ1dHRvbiBsaW5lcyAqL1xcblxcbi5idXR0b24tbGluZS5kaXNhYmxlZCB7XFxuICAgIGNvbG9yOiBncmF5O1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcblxcblxcbi5ncm93QW5kU2hyaW5rIHtcXG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQ7XFxuICAgIC8qIFRyYW5zaXRpb24gcHJvcGVydHkgZm9yIHNtb290aCBzY2FsaW5nICovXFxuICAgIGFuaW1hdGlvbjogZ3Jvd0FuZFNocmlua0ZyYW1lcyAxcyBpbmZpbml0ZSBlYXNlLWluLW91dDtcXG4gICAgLyogRHVyYXRpb24gYW5kIGVhc2luZyAqL1xcbn1cXG5cXG4vKiBEZWZpbmUgdGhlIGFuaW1hdGlvbiAqL1xcbkBrZXlmcmFtZXMgZ3Jvd0FuZFNocmlua0ZyYW1lcyB7XFxuXFxuICAgIDAlLFxcbiAgICAxMDAlIHtcXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgICAgICAvKiBTdGFydCBhbmQgZW5kIHN0YXRlOiBub3JtYWwgc2l6ZSAqL1xcbiAgICB9XFxuXFxuICAgIDUwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XFxuICAgICAgICBjb2xvcjogcmVkO1xcbiAgICAgICAgLyogTWlkZGxlIHN0YXRlOiBzbGlnaHRseSBsYXJnZXIgKi9cXG4gICAgfVxcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8qICoqKioqIHByb2dyZXNzIHBhbmVsICoqKi9cbiNwcm9ncmVzcy1wYW5lbCB7XG4gICAgd2lkdGggOiAxMDAlO1xuICAgIHBvc2l0aW9uIDogYWJzb2x1dGU7XG4gICAgYm90dG9tIDogMDtcbiAgICBoZWlnaHQgOiAyMHB4O1xuICAgIGRpc3BsYXkgOiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICBmb250LXNpemUgOiAxMnB4O1xuICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICBwYWRkaW5nIDogMDtcbn1cblxuLnRhYmxldCAjcHJvZ3Jlc3MtcGFuZWwgLm1hdGVyaWFsLWljb25zIHtcbiAgICBmb250LXNpemU6IDQwcHg7XG59XG5cbiNwcm9ncmVzcy1saW5lIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZmxleC1ncm93OiAxO1xuICAgIGRpc3BsYXkgOiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgY3Vyc29yIDogcG9pbnRlcjtcbn1cbiNwcm9ncmVzcy1saW5lID4gZGl2IHtcbiAgICBoZWlnaHQgOiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXZlcnktbGlnaHQtYmx1ZSk7XG4gICAgYm9yZGVyLWxlZnQgOiAxcHggc29saWQgd2hpdGU7XG4gICAgZGlzcGxheTogIGZsZXg7XG59XG5cblxuLyogI3Byb2dyZXNzLWxpbmUgLnNlZW4ge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXZlcnktbGlnaHQtYmx1ZSk7XG4gICB9ICovXG5cbmJvZHkuaGFzLXNvdW5kICNwcm9ncmVzcy1saW5lIC5ub3NvdW5kIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XG59XG5cbiNwcm9ncmVzcy1saW5lIC5yZWNvcmRpbmcge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICByZWQ7XG59XG5cbmJvZHkuaGFzLXNvdW5kICNwcm9ncmVzcy1saW5lIC5ub3NvdW5kLnJlY29yZGluZyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIHJlZDtcbn1cblxuLnByb2dyZXNzLWZpbGxlciB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxpZ2h0LWJsdWUpO1xufVxuXG5ib2R5Lmhhcy1zb3VuZCAjcHJvZ3Jlc3MtbGluZSAubm9zb3VuZCAucHJvZ3Jlc3MtZmlsbGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xufVxuXG5cbiNwcm9ncmVzcy1jb250cm9scyB7XG4gICAgLyogd2lkdGggOiAxMTBweDsgKi9cbiAgICB6LWluZGV4OiA1O1xuICAgIGRpc3BsYXkgOiBmbGV4OyBcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmctbGVmdDogNXB4O1xuICAgIHBhZGRpbmctcmlnaHQ6NXB4O1xufVxuXG4jcHJvZ3Jlc3MtY29udHJvbHMgaSB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4jcHJvZ3Jlc3MtY29udHJvbHMgZGl2IHtcbiAgZmxleC1ncm93OiAxO1xufVxuXG5cbiNwcm9ncmVzcy1jb250cm9scyBkaXYge1xuICAgIGRpc3BsYXkgOiBmbGV4OyBcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4jcGFnZS1jb3VudCB7XG4gICAgd2lkdGggOiA4MHB4O1xuICAgIGRpc3BsYXkgOiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbiNwYWdlLWNvdW50LWVudW1lcmF0b3Ige1xuICAgIGZvbnQtc2l6ZTogMTVweDtcbn1cblxuLnBsYXlpbmcgI3BhZ2UtY291bnQtZW51bWVyYXRvciB7XG4gICAgZGlzcGxheSA6IG5vbmU7XG59XG5cbi5wbGF5aW5nICNwYWdlLWNvdW50LWRlbm9taW5hdG9yIHtcbiAgICBkaXNwbGF5IDogbm9uZTtcbn1cblxuI3Byb2dyZXNzLXBhbmVsOm5vdCgucGxheWluZykgI3RpbWUtZWxhcHNlZCB7XG4gICAgZGlzcGxheSA6IG5vbmU7XG59XG5cbiNwcm9ncmVzcy1wYW5lbDpub3QoLnBsYXlpbmcpICNzb3VuZC1zcGVlZCB7XG4gICAgb3BhY2l0eSA6IDA7XG59XG5cbmJvZHk6bm90KC5oYXMtc291bmQpICNwbGF5LWJ1dHRvbiB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuYm9keTpub3QoLmhhcy1zb3VuZCkgI3NvdW5kLXNwZWVkIHtcbiAgICBkaXNwbGF5IDogbm9uZTtcbn1cblxuI3NvdW5kLXNwZWVkIHtcbiAgICBjdXJzb3IgOiBwb2ludGVyO1xufVxuXG4jcGFnZS1jb3VudC1kZW5vbWluYXRvciB7XG4gICAgY29sb3IgOmRhcmtncmF5O1xufVxuI25leHQtZXZlbnQge1xuICAgIHJpZ2h0OiAwJTtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy92aWV3ZXIvY3NzL3Byb2dyZXNzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSwyQkFBMkI7QUFDM0I7SUFDSSxZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLFVBQVU7SUFDVixhQUFhO0lBQ2IsY0FBYztJQUNkLHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLGNBQWM7SUFDZCxtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksYUFBYTtJQUNiLHdDQUF3QztJQUN4Qyw2QkFBNkI7SUFDN0IsY0FBYztBQUNsQjs7O0FBR0E7O01BRU07O0FBRU47SUFDSSwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osbUNBQW1DO0FBQ3ZDOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOzs7QUFHQTtJQUNJLG1CQUFtQjtJQUNuQixVQUFVO0lBQ1YsY0FBYztJQUNkLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7O0FBR0E7SUFDSSxjQUFjO0lBQ2QsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGNBQWM7SUFDZCxtQkFBbUI7SUFDbkIsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjtBQUNBO0lBQ0ksU0FBUztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qICoqKioqIHByb2dyZXNzIHBhbmVsICoqKi9cXG4jcHJvZ3Jlc3MtcGFuZWwge1xcbiAgICB3aWR0aCA6IDEwMCU7XFxuICAgIHBvc2l0aW9uIDogYWJzb2x1dGU7XFxuICAgIGJvdHRvbSA6IDA7XFxuICAgIGhlaWdodCA6IDIwcHg7XFxuICAgIGRpc3BsYXkgOiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxuICAgIGZvbnQtc2l6ZSA6IDEycHg7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgcGFkZGluZyA6IDA7XFxufVxcblxcbi50YWJsZXQgI3Byb2dyZXNzLXBhbmVsIC5tYXRlcmlhbC1pY29ucyB7XFxuICAgIGZvbnQtc2l6ZTogNDBweDtcXG59XFxuXFxuI3Byb2dyZXNzLWxpbmUge1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgZGlzcGxheSA6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBjdXJzb3IgOiBwb2ludGVyO1xcbn1cXG4jcHJvZ3Jlc3MtbGluZSA+IGRpdiB7XFxuICAgIGhlaWdodCA6IDEwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXZlcnktbGlnaHQtYmx1ZSk7XFxuICAgIGJvcmRlci1sZWZ0IDogMXB4IHNvbGlkIHdoaXRlO1xcbiAgICBkaXNwbGF5OiAgZmxleDtcXG59XFxuXFxuXFxuLyogI3Byb2dyZXNzLWxpbmUgLnNlZW4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS12ZXJ5LWxpZ2h0LWJsdWUpO1xcbiAgIH0gKi9cXG5cXG5ib2R5Lmhhcy1zb3VuZCAjcHJvZ3Jlc3MtbGluZSAubm9zb3VuZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTtcXG59XFxuXFxuI3Byb2dyZXNzLWxpbmUgLnJlY29yZGluZyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICByZWQ7XFxufVxcblxcbmJvZHkuaGFzLXNvdW5kICNwcm9ncmVzcy1saW5lIC5ub3NvdW5kLnJlY29yZGluZyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICByZWQ7XFxufVxcblxcbi5wcm9ncmVzcy1maWxsZXIge1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxpZ2h0LWJsdWUpO1xcbn1cXG5cXG5ib2R5Lmhhcy1zb3VuZCAjcHJvZ3Jlc3MtbGluZSAubm9zb3VuZCAucHJvZ3Jlc3MtZmlsbGVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG59XFxuXFxuXFxuI3Byb2dyZXNzLWNvbnRyb2xzIHtcXG4gICAgLyogd2lkdGggOiAxMTBweDsgKi9cXG4gICAgei1pbmRleDogNTtcXG4gICAgZGlzcGxheSA6IGZsZXg7IFxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDtcXG4gICAgcGFkZGluZy1yaWdodDo1cHg7XFxufVxcblxcbiNwcm9ncmVzcy1jb250cm9scyBpIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4jcHJvZ3Jlc3MtY29udHJvbHMgZGl2IHtcXG4gIGZsZXgtZ3JvdzogMTtcXG59XFxuXFxuXFxuI3Byb2dyZXNzLWNvbnRyb2xzIGRpdiB7XFxuICAgIGRpc3BsYXkgOiBmbGV4OyBcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuI3BhZ2UtY291bnQge1xcbiAgICB3aWR0aCA6IDgwcHg7XFxuICAgIGRpc3BsYXkgOiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuI3BhZ2UtY291bnQtZW51bWVyYXRvciB7XFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXG59XFxuXFxuLnBsYXlpbmcgI3BhZ2UtY291bnQtZW51bWVyYXRvciB7XFxuICAgIGRpc3BsYXkgOiBub25lO1xcbn1cXG5cXG4ucGxheWluZyAjcGFnZS1jb3VudC1kZW5vbWluYXRvciB7XFxuICAgIGRpc3BsYXkgOiBub25lO1xcbn1cXG5cXG4jcHJvZ3Jlc3MtcGFuZWw6bm90KC5wbGF5aW5nKSAjdGltZS1lbGFwc2VkIHtcXG4gICAgZGlzcGxheSA6IG5vbmU7XFxufVxcblxcbiNwcm9ncmVzcy1wYW5lbDpub3QoLnBsYXlpbmcpICNzb3VuZC1zcGVlZCB7XFxuICAgIG9wYWNpdHkgOiAwO1xcbn1cXG5cXG5ib2R5Om5vdCguaGFzLXNvdW5kKSAjcGxheS1idXR0b24ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5ib2R5Om5vdCguaGFzLXNvdW5kKSAjc291bmQtc3BlZWQge1xcbiAgICBkaXNwbGF5IDogbm9uZTtcXG59XFxuXFxuI3NvdW5kLXNwZWVkIHtcXG4gICAgY3Vyc29yIDogcG9pbnRlcjtcXG59XFxuXFxuI3BhZ2UtY291bnQtZGVub21pbmF0b3Ige1xcbiAgICBjb2xvciA6ZGFya2dyYXk7XFxufVxcbiNuZXh0LWV2ZW50IHtcXG4gICAgcmlnaHQ6IDAlO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYFxuICAvKiB0aGUgc2tldGNoIHBhbmVsICoqKioqKioqKioqICovXG4gIC50b29sLXBhbmVsIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgZGlzcGxheSA6IG5vbmU7XG4gICAgcmlnaHQ6IDA7XG4gICAgd2lkdGggOiAyMHB4O1xuICAgIHRvcCA6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLC01MCUpO1xuICAgIC8qIHdpZHRoIDogNDAlOyAqL1xuICAgIC8qIGxlZnQgOiAzMCU7ICovXG4gICAgcGFkZGluZy10b3AgOiAyMHB4O1xuICAgIHBhZGRpbmctYm90dG9tIDogMjBweDtcbiAgICAgcGFkZGluZy1sZWZ0IDogNXB4OyBcbiAgICAgcGFkZGluZy1yaWdodCA6IDVweDsgXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAvKiBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAyNXB4O1xuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAyNXB4OyAqL1xuICAgIGJhY2tncm91bmQtY29sb3I6bGlnaHRjeWFuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB6LWluZGV4IDogMTA7XG4gICAgLyogYm9yZGVyIDogMXB4IHNvbGlkIGJsYWNrOyAqL1xufVxuXG4udG9vbC1wYW5lbCBkaXYge1xuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG87XG4gICAgbWFyZ2luIDogNXB4O1xuICAgIHBhZGRpbmcgOiAycHg7XG59XG5cbi5ub3NlbGVjdCB7XG4gIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTsgLyogaU9TIFNhZmFyaSAqL1xuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFNhZmFyaSAqL1xuICAgICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIEtvbnF1ZXJvciBIVE1MICovXG4gICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsgLyogT2xkIHZlcnNpb25zIG9mIEZpcmVmb3ggKi9cbiAgICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAvKiBJbnRlcm5ldCBFeHBsb3Jlci9FZGdlICovXG4gICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsgLyogTm9uLXByZWZpeGVkIHZlcnNpb24sIGN1cnJlbnRseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZCBieSBDaHJvbWUsIEVkZ2UsIE9wZXJhIGFuZCBGaXJlZm94ICovXG59XG5cbi50b29sLXBhbmVsIGkge1xuICAgIG1hcmdpbiA6IDVweDtcbiAgICBjdXJzb3IgOiBwb2ludGVyO1xuICAgIGJvcmRlci1yYWRpdXMgOiA1cHg7XG4gICAgcGFkZGluZyA6IDJweDtcbiAgICBmb250LXNpemU6IDE4cHg7XG59XG5cbi50b29sLXBhbmVsIC5kaXNhYmxlZCB7XG4gIGNvbG9yIDogbGlnaHRncmV5O1xuICBjdXJzb3IgOiBkZWZhdWx0O1xufVxuXG4udG9vbC1wYW5lbCAuc2VsZWN0ZWQge1xuICAgIGJvcmRlciA6IDFweCBzb2xpZCBncmV5XG59XG5cbiNza2V0Y2gtcmVkIHtcbiAgICBjb2xvciA6cmVkO1xufVxuXG4jc2tldGNoLWJsdWUge1xuICBjb2xvciA6Ymx1ZTtcbn1cblxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvdmlld2VyL2Nzcy9za2V0Y2guY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7RUFDRSxpQ0FBaUM7RUFDakM7SUFDRSxlQUFlO0lBQ2YsY0FBYztJQUNkLFFBQVE7SUFDUixZQUFZO0lBQ1osU0FBUztJQUNULDRCQUE0QjtJQUM1QixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixxQkFBcUI7S0FDcEIsa0JBQWtCO0tBQ2xCLG1CQUFtQjtJQUNwQixtQkFBbUI7SUFDbkI7b0NBQ2dDO0lBQ2hDLDBCQUEwQjtJQUMxQixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtJQUN0QixZQUFZO0lBQ1osOEJBQThCO0FBQ2xDOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixhQUFhO0FBQ2pCOztBQUVBO0VBQ0UsMkJBQTJCLEVBQUUsZUFBZTtJQUMxQyx5QkFBeUIsRUFBRSxXQUFXO0tBQ3JDLHdCQUF3QixFQUFFLG1CQUFtQjtPQUMzQyxzQkFBc0IsRUFBRSw0QkFBNEI7UUFDbkQscUJBQXFCLEVBQUUsMkJBQTJCO1lBQzlDLGlCQUFpQixFQUFFO2dGQUNpRDtBQUNoRjs7QUFFQTtJQUNJLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixlQUFlO0FBQ25COztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtJQUNJO0FBQ0o7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7RUFDRSxXQUFXO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuICAvKiB0aGUgc2tldGNoIHBhbmVsICoqKioqKioqKioqICovXFxuICAudG9vbC1wYW5lbCB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgZGlzcGxheSA6IG5vbmU7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB3aWR0aCA6IDIwcHg7XFxuICAgIHRvcCA6IDUwJTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwtNTAlKTtcXG4gICAgLyogd2lkdGggOiA0MCU7ICovXFxuICAgIC8qIGxlZnQgOiAzMCU7ICovXFxuICAgIHBhZGRpbmctdG9wIDogMjBweDtcXG4gICAgcGFkZGluZy1ib3R0b20gOiAyMHB4O1xcbiAgICAgcGFkZGluZy1sZWZ0IDogNXB4OyBcXG4gICAgIHBhZGRpbmctcmlnaHQgOiA1cHg7IFxcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAvKiBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAyNXB4O1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMjVweDsgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjpsaWdodGN5YW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICB6LWluZGV4IDogMTA7XFxuICAgIC8qIGJvcmRlciA6IDFweCBzb2xpZCBibGFjazsgKi9cXG59XFxuXFxuLnRvb2wtcGFuZWwgZGl2IHtcXG4gICAgZm9udC1mYW1pbHk6IFJvYm90bztcXG4gICAgbWFyZ2luIDogNXB4O1xcbiAgICBwYWRkaW5nIDogMnB4O1xcbn1cXG5cXG4ubm9zZWxlY3Qge1xcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lOyAvKiBpT1MgU2FmYXJpICovXFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFNhZmFyaSAqL1xcbiAgICAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lOyAvKiBLb25xdWVyb3IgSFRNTCAqL1xcbiAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lOyAvKiBPbGQgdmVyc2lvbnMgb2YgRmlyZWZveCAqL1xcbiAgICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAvKiBJbnRlcm5ldCBFeHBsb3Jlci9FZGdlICovXFxuICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7IC8qIE5vbi1wcmVmaXhlZCB2ZXJzaW9uLCBjdXJyZW50bHlcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkIGJ5IENocm9tZSwgRWRnZSwgT3BlcmEgYW5kIEZpcmVmb3ggKi9cXG59XFxuXFxuLnRvb2wtcGFuZWwgaSB7XFxuICAgIG1hcmdpbiA6IDVweDtcXG4gICAgY3Vyc29yIDogcG9pbnRlcjtcXG4gICAgYm9yZGVyLXJhZGl1cyA6IDVweDtcXG4gICAgcGFkZGluZyA6IDJweDtcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbn1cXG5cXG4udG9vbC1wYW5lbCAuZGlzYWJsZWQge1xcbiAgY29sb3IgOiBsaWdodGdyZXk7XFxuICBjdXJzb3IgOiBkZWZhdWx0O1xcbn1cXG5cXG4udG9vbC1wYW5lbCAuc2VsZWN0ZWQge1xcbiAgICBib3JkZXIgOiAxcHggc29saWQgZ3JleVxcbn1cXG5cXG4jc2tldGNoLXJlZCB7XFxuICAgIGNvbG9yIDpyZWQ7XFxufVxcblxcbiNza2V0Y2gtYmx1ZSB7XFxuICBjb2xvciA6Ymx1ZTtcXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdCB7XG4gICAgLS1ncmFmaXRvd3kgOiAjMmMyYzJjO1xuICAgICAgLS1uaWViaWVza2kgOiAjMThBMEZCO1xuICAgIC0tc2VsZWN0LWNvbG9yIDogI2RhZWJmNztcbiAgICAtLWRpc2FibGVkLWNvbG9yIDogU2lsdmVyO1xuICAgIC0tYmx1ZSA6ICM0NjQ2RkY7XG4gICAgLS1saWdodC1ibHVlIDogI0I0QzhGRjtcbiAgICAtLXZlcnktbGlnaHQtYmx1ZSA6ICNEQ0U2RkY7XG4gIH1cblxuYm9keSwgaHRtbCB7XG4gICAgaGVpZ2h0IDogMTAwJTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG5ib2R5LCBkaXYsIGJ1dHRvbiB7XG4gICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xuICAgIGZvbnQtd2VpZ2h0OiAyMDA7XG4gICAgZm9udC1zaXplOiAxMnB4O1xufVxuXG5idXR0b24geyBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS12ZXJ5LWxpZ2h0LWJsdWUpO1xuICAgIGJvcmRlciA6IDFweCBzb2xpZCB2YXIoLS1uaWViaWVza2kpO1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbmJvZHkge1xuICAgIG1hcmdpbiA6IDA7XG59XG5cblxuI3VwcGVyLXBhbmVsIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wIDogMDtcbiAgICBib3R0b20gOiAyMHB4O1xuICAgIHdpZHRoIDoxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBmbGV4LWdyb3c6IDE7XG4gICAgZmxleC1zaHJpbmsgOiAxO1xufVxuXG4jdGV4dC1hbGVydC1ib3gge1xuICAgIHBvc2l0aW9uIDogZml4ZWQ7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB6LWluZGV4OiAzO1xuICAgIGRpc3BsYXkgOiBub25lOyBcbn1cblxuI3RleHQtYWxlcnQtYmFja2dyb3VuZCB7XG4gICAgcG9zaXRpb24gOiBhYnNvbHV0ZTtcbiAgICB3aWR0aCA6IDEwMCU7XG4gICAgaGVpZ2h0IDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yIDogbGlnaHRncmF5O1xuICAgIG9wYWNpdHk6IDkwJTsgXG59XG5cbiN0ZXh0LWFsZXJ0IHtcbiBwYWRkaW5nOiAxMHB4O1xuIHotaW5kZXg6IDE7XG59XG5cbi5oaWRkZW4tc3ZnIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGggOiAwcHg7XG4gICAgaGVpZ2h0IDogMHB4OyBcbn1cblxuI3N2Zy1jb250YWluZXIge1xuICAgIGZsZXgtZ3JvdyA6IDE7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAvKiBhbGlnbi1pdGVtcyA6IGNlbnRlcjsgKi9cbn1cblxuI3N2ZyB7IFxuICAgIGZsZXgtZ3JvdyA6IDE7XG59XG5cbi8qIHRoaXMgY291bnRlcnMgYSBkaXNwbGF5IGJ1ZyBpbiBmaWdtYSAqL1xucGF0aDpub3QoW2ZpbGxdKSB7XG4gICAgZmlsbCA6IHRyYW5zcGFyZW50O1xufVxuXG4uc291bmQtaWNvbiB7XG4gICAgcG9zaXRpb24gOiBhYnNvbHV0ZTtcbiAgICBjb2xvcjogcmVkO1xuICAgIHotaW5kZXggOiAyO1xufVxuXG4uaW52aXNpYmxlIHtcbiAgICBkaXNwbGF5OiBub25lO1xufVxuXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy92aWV3ZXIvY3NzL3ZpZXdlci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxxQkFBcUI7TUFDbkIscUJBQXFCO0lBQ3ZCLHdCQUF3QjtJQUN4Qix5QkFBeUI7SUFDekIsZ0JBQWdCO0lBQ2hCLHNCQUFzQjtJQUN0QiwyQkFBMkI7RUFDN0I7O0FBRUY7SUFDSSxhQUFhO0lBQ2IsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0kscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksd0NBQXdDO0lBQ3hDLG1DQUFtQztJQUNuQyxrQkFBa0I7SUFDbEIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFVBQVU7QUFDZDs7O0FBR0E7SUFDSSxrQkFBa0I7SUFDbEIsT0FBTztJQUNQLGFBQWE7SUFDYixXQUFXO0lBQ1gsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixZQUFZO0lBQ1osYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixVQUFVO0lBQ1YsY0FBYztBQUNsQjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osYUFBYTtJQUNiLDRCQUE0QjtJQUM1QixZQUFZO0FBQ2hCOztBQUVBO0NBQ0MsYUFBYTtDQUNiLFVBQVU7QUFDWDs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsMEJBQTBCO0FBQzlCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQSx5Q0FBeUM7QUFDekM7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsVUFBVTtJQUNWLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGFBQWE7QUFDakJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgICAtLWdyYWZpdG93eSA6ICMyYzJjMmM7XFxuICAgICAgLS1uaWViaWVza2kgOiAjMThBMEZCO1xcbiAgICAtLXNlbGVjdC1jb2xvciA6ICNkYWViZjc7XFxuICAgIC0tZGlzYWJsZWQtY29sb3IgOiBTaWx2ZXI7XFxuICAgIC0tYmx1ZSA6ICM0NjQ2RkY7XFxuICAgIC0tbGlnaHQtYmx1ZSA6ICNCNEM4RkY7XFxuICAgIC0tdmVyeS1saWdodC1ibHVlIDogI0RDRTZGRjtcXG4gIH1cXG5cXG5ib2R5LCBodG1sIHtcXG4gICAgaGVpZ2h0IDogMTAwJTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuYm9keSwgZGl2LCBidXR0b24ge1xcbiAgICBmb250LWZhbWlseTogJ1JvYm90byc7XFxuICAgIGZvbnQtd2VpZ2h0OiAyMDA7XFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXG59XFxuXFxuYnV0dG9uIHsgXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXZlcnktbGlnaHQtYmx1ZSk7XFxuICAgIGJvcmRlciA6IDFweCBzb2xpZCB2YXIoLS1uaWViaWVza2kpO1xcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuYm9keSB7XFxuICAgIG1hcmdpbiA6IDA7XFxufVxcblxcblxcbiN1cHBlci1wYW5lbCB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wIDogMDtcXG4gICAgYm90dG9tIDogMjBweDtcXG4gICAgd2lkdGggOjEwMCU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgZmxleC1zaHJpbmsgOiAxO1xcbn1cXG5cXG4jdGV4dC1hbGVydC1ib3gge1xcbiAgICBwb3NpdGlvbiA6IGZpeGVkO1xcbiAgICBib3R0b206IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBoZWlnaHQ6IDQwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIHotaW5kZXg6IDM7XFxuICAgIGRpc3BsYXkgOiBub25lOyBcXG59XFxuXFxuI3RleHQtYWxlcnQtYmFja2dyb3VuZCB7XFxuICAgIHBvc2l0aW9uIDogYWJzb2x1dGU7XFxuICAgIHdpZHRoIDogMTAwJTtcXG4gICAgaGVpZ2h0IDogMTAwJTtcXG4gICAgYmFja2dyb3VuZC1jb2xvciA6IGxpZ2h0Z3JheTtcXG4gICAgb3BhY2l0eTogOTAlOyBcXG59XFxuXFxuI3RleHQtYWxlcnQge1xcbiBwYWRkaW5nOiAxMHB4O1xcbiB6LWluZGV4OiAxO1xcbn1cXG5cXG4uaGlkZGVuLXN2ZyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgd2lkdGggOiAwcHg7XFxuICAgIGhlaWdodCA6IDBweDsgXFxufVxcblxcbiNzdmctY29udGFpbmVyIHtcXG4gICAgZmxleC1ncm93IDogMTtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgLyogYWxpZ24taXRlbXMgOiBjZW50ZXI7ICovXFxufVxcblxcbiNzdmcgeyBcXG4gICAgZmxleC1ncm93IDogMTtcXG59XFxuXFxuLyogdGhpcyBjb3VudGVycyBhIGRpc3BsYXkgYnVnIGluIGZpZ21hICovXFxucGF0aDpub3QoW2ZpbGxdKSB7XFxuICAgIGZpbGwgOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnNvdW5kLWljb24ge1xcbiAgICBwb3NpdGlvbiA6IGFic29sdXRlO1xcbiAgICBjb2xvcjogcmVkO1xcbiAgICB6LWluZGV4IDogMjtcXG59XFxuXFxuLmludmlzaWJsZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLyoqXG4gKiBGdXNlLmpzIHY2LjYuMiAtIExpZ2h0d2VpZ2h0IGZ1enp5LXNlYXJjaCAoaHR0cDovL2Z1c2Vqcy5pbylcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgS2lybyBSaXNrIChodHRwOi8va2lyby5tZSlcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuIEFwYWNoZSBTb2Z0d2FyZSBMaWNlbnNlIDIuMFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICovXG5cbmZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuICFBcnJheS5pc0FycmF5XG4gICAgPyBnZXRUYWcodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbHVlKVxufVxuXG4vLyBBZGFwdGVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvbWFzdGVyLy5pbnRlcm5hbC9iYXNlVG9TdHJpbmcuanNcbmNvbnN0IElORklOSVRZID0gMSAvIDA7XG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIGxldCByZXN1bHQgPSB2YWx1ZSArICcnO1xuICByZXR1cm4gcmVzdWx0ID09ICcwJyAmJiAxIC8gdmFsdWUgPT0gLUlORklOSVRZID8gJy0wJyA6IHJlc3VsdFxufVxuXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKVxufVxuXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJ1xufVxuXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xufVxuXG4vLyBBZGFwdGVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvbWFzdGVyL2lzQm9vbGVhbi5qc1xuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgPT09IHRydWUgfHxcbiAgICB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09ICdbb2JqZWN0IEJvb2xlYW5dJylcbiAgKVxufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xufVxuXG4vLyBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS5cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIHZhbHVlICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0JsYW5rKHZhbHVlKSB7XG4gIHJldHVybiAhdmFsdWUudHJpbSgpLmxlbmd0aFxufVxuXG4vLyBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4vLyBBZGFwdGVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvbWFzdGVyLy5pbnRlcm5hbC9nZXRUYWcuanNcbmZ1bmN0aW9uIGdldFRhZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbFxuICAgID8gdmFsdWUgPT09IHVuZGVmaW5lZFxuICAgICAgPyAnW29iamVjdCBVbmRlZmluZWRdJ1xuICAgICAgOiAnW29iamVjdCBOdWxsXSdcbiAgICA6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSlcbn1cblxuY29uc3QgRVhURU5ERURfU0VBUkNIX1VOQVZBSUxBQkxFID0gJ0V4dGVuZGVkIHNlYXJjaCBpcyBub3QgYXZhaWxhYmxlJztcblxuY29uc3QgSU5DT1JSRUNUX0lOREVYX1RZUEUgPSBcIkluY29ycmVjdCAnaW5kZXgnIHR5cGVcIjtcblxuY29uc3QgTE9HSUNBTF9TRUFSQ0hfSU5WQUxJRF9RVUVSWV9GT1JfS0VZID0gKGtleSkgPT5cbiAgYEludmFsaWQgdmFsdWUgZm9yIGtleSAke2tleX1gO1xuXG5jb25zdCBQQVRURVJOX0xFTkdUSF9UT09fTEFSR0UgPSAobWF4KSA9PlxuICBgUGF0dGVybiBsZW5ndGggZXhjZWVkcyBtYXggb2YgJHttYXh9LmA7XG5cbmNvbnN0IE1JU1NJTkdfS0VZX1BST1BFUlRZID0gKG5hbWUpID0+IGBNaXNzaW5nICR7bmFtZX0gcHJvcGVydHkgaW4ga2V5YDtcblxuY29uc3QgSU5WQUxJRF9LRVlfV0VJR0hUX1ZBTFVFID0gKGtleSkgPT5cbiAgYFByb3BlcnR5ICd3ZWlnaHQnIGluIGtleSAnJHtrZXl9JyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcmA7XG5cbmNvbnN0IGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmNsYXNzIEtleVN0b3JlIHtcbiAgY29uc3RydWN0b3Ioa2V5cykge1xuICAgIHRoaXMuX2tleXMgPSBbXTtcbiAgICB0aGlzLl9rZXlNYXAgPSB7fTtcblxuICAgIGxldCB0b3RhbFdlaWdodCA9IDA7XG5cbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgbGV0IG9iaiA9IGNyZWF0ZUtleShrZXkpO1xuXG4gICAgICB0b3RhbFdlaWdodCArPSBvYmoud2VpZ2h0O1xuXG4gICAgICB0aGlzLl9rZXlzLnB1c2gob2JqKTtcbiAgICAgIHRoaXMuX2tleU1hcFtvYmouaWRdID0gb2JqO1xuXG4gICAgICB0b3RhbFdlaWdodCArPSBvYmoud2VpZ2h0O1xuICAgIH0pO1xuXG4gICAgLy8gTm9ybWFsaXplIHdlaWdodHMgc28gdGhhdCB0aGVpciBzdW0gaXMgZXF1YWwgdG8gMVxuICAgIHRoaXMuX2tleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBrZXkud2VpZ2h0IC89IHRvdGFsV2VpZ2h0O1xuICAgIH0pO1xuICB9XG4gIGdldChrZXlJZCkge1xuICAgIHJldHVybiB0aGlzLl9rZXlNYXBba2V5SWRdXG4gIH1cbiAga2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5fa2V5c1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5fa2V5cylcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoa2V5KSB7XG4gIGxldCBwYXRoID0gbnVsbDtcbiAgbGV0IGlkID0gbnVsbDtcbiAgbGV0IHNyYyA9IG51bGw7XG4gIGxldCB3ZWlnaHQgPSAxO1xuICBsZXQgZ2V0Rm4gPSBudWxsO1xuXG4gIGlmIChpc1N0cmluZyhrZXkpIHx8IGlzQXJyYXkoa2V5KSkge1xuICAgIHNyYyA9IGtleTtcbiAgICBwYXRoID0gY3JlYXRlS2V5UGF0aChrZXkpO1xuICAgIGlkID0gY3JlYXRlS2V5SWQoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKGtleSwgJ25hbWUnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKE1JU1NJTkdfS0VZX1BST1BFUlRZKCduYW1lJykpXG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9IGtleS5uYW1lO1xuICAgIHNyYyA9IG5hbWU7XG5cbiAgICBpZiAoaGFzT3duLmNhbGwoa2V5LCAnd2VpZ2h0JykpIHtcbiAgICAgIHdlaWdodCA9IGtleS53ZWlnaHQ7XG5cbiAgICAgIGlmICh3ZWlnaHQgPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9LRVlfV0VJR0hUX1ZBTFVFKG5hbWUpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHBhdGggPSBjcmVhdGVLZXlQYXRoKG5hbWUpO1xuICAgIGlkID0gY3JlYXRlS2V5SWQobmFtZSk7XG4gICAgZ2V0Rm4gPSBrZXkuZ2V0Rm47XG4gIH1cblxuICByZXR1cm4geyBwYXRoLCBpZCwgd2VpZ2h0LCBzcmMsIGdldEZuIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5UGF0aChrZXkpIHtcbiAgcmV0dXJuIGlzQXJyYXkoa2V5KSA/IGtleSA6IGtleS5zcGxpdCgnLicpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleUlkKGtleSkge1xuICByZXR1cm4gaXNBcnJheShrZXkpID8ga2V5LmpvaW4oJy4nKSA6IGtleVxufVxuXG5mdW5jdGlvbiBnZXQob2JqLCBwYXRoKSB7XG4gIGxldCBsaXN0ID0gW107XG4gIGxldCBhcnIgPSBmYWxzZTtcblxuICBjb25zdCBkZWVwR2V0ID0gKG9iaiwgcGF0aCwgaW5kZXgpID0+IHtcbiAgICBpZiAoIWlzRGVmaW5lZChvYmopKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCFwYXRoW2luZGV4XSkge1xuICAgICAgLy8gSWYgdGhlcmUncyBubyBwYXRoIGxlZnQsIHdlJ3ZlIGFycml2ZWQgYXQgdGhlIG9iamVjdCB3ZSBjYXJlIGFib3V0LlxuICAgICAgbGlzdC5wdXNoKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBrZXkgPSBwYXRoW2luZGV4XTtcblxuICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgaWYgKCFpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSdyZSBhdCB0aGUgbGFzdCB2YWx1ZSBpbiB0aGUgcGF0aCwgYW5kIGlmIGl0J3MgYSBzdHJpbmcvbnVtYmVyL2Jvb2wsXG4gICAgICAvLyBhZGQgaXQgdG8gdGhlIGxpc3RcbiAgICAgIGlmIChcbiAgICAgICAgaW5kZXggPT09IHBhdGgubGVuZ3RoIC0gMSAmJlxuICAgICAgICAoaXNTdHJpbmcodmFsdWUpIHx8IGlzTnVtYmVyKHZhbHVlKSB8fCBpc0Jvb2xlYW4odmFsdWUpKVxuICAgICAgKSB7XG4gICAgICAgIGxpc3QucHVzaCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBhcnIgPSB0cnVlO1xuICAgICAgICAvLyBTZWFyY2ggZWFjaCBpdGVtIGluIHRoZSBhcnJheS5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgZGVlcEdldCh2YWx1ZVtpXSwgcGF0aCwgaW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXRoLmxlbmd0aCkge1xuICAgICAgICAvLyBBbiBvYmplY3QuIFJlY3Vyc2UgZnVydGhlci5cbiAgICAgICAgZGVlcEdldCh2YWx1ZSwgcGF0aCwgaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgKHNpbmNlIHBhdGggdXNlZCB0byBiZSBhIHN0cmluZylcbiAgZGVlcEdldChvYmosIGlzU3RyaW5nKHBhdGgpID8gcGF0aC5zcGxpdCgnLicpIDogcGF0aCwgMCk7XG5cbiAgcmV0dXJuIGFyciA/IGxpc3QgOiBsaXN0WzBdXG59XG5cbmNvbnN0IE1hdGNoT3B0aW9ucyA9IHtcbiAgLy8gV2hldGhlciB0aGUgbWF0Y2hlcyBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdCBzZXQuIFdoZW4gYHRydWVgLCBlYWNoIHJlY29yZCBpbiB0aGUgcmVzdWx0XG4gIC8vIHNldCB3aWxsIGluY2x1ZGUgdGhlIGluZGljZXMgb2YgdGhlIG1hdGNoZWQgY2hhcmFjdGVycy5cbiAgLy8gVGhlc2UgY2FuIGNvbnNlcXVlbnRseSBiZSB1c2VkIGZvciBoaWdobGlnaHRpbmcgcHVycG9zZXMuXG4gIGluY2x1ZGVNYXRjaGVzOiBmYWxzZSxcbiAgLy8gV2hlbiBgdHJ1ZWAsIHRoZSBtYXRjaGluZyBmdW5jdGlvbiB3aWxsIGNvbnRpbnVlIHRvIHRoZSBlbmQgb2YgYSBzZWFyY2ggcGF0dGVybiBldmVuIGlmXG4gIC8vIGEgcGVyZmVjdCBtYXRjaCBoYXMgYWxyZWFkeSBiZWVuIGxvY2F0ZWQgaW4gdGhlIHN0cmluZy5cbiAgZmluZEFsbE1hdGNoZXM6IGZhbHNlLFxuICAvLyBNaW5pbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgbXVzdCBiZSBtYXRjaGVkIGJlZm9yZSBhIHJlc3VsdCBpcyBjb25zaWRlcmVkIGEgbWF0Y2hcbiAgbWluTWF0Y2hDaGFyTGVuZ3RoOiAxXG59O1xuXG5jb25zdCBCYXNpY09wdGlvbnMgPSB7XG4gIC8vIFdoZW4gYHRydWVgLCB0aGUgYWxnb3JpdGhtIGNvbnRpbnVlcyBzZWFyY2hpbmcgdG8gdGhlIGVuZCBvZiB0aGUgaW5wdXQgZXZlbiBpZiBhIHBlcmZlY3RcbiAgLy8gbWF0Y2ggaXMgZm91bmQgYmVmb3JlIHRoZSBlbmQgb2YgdGhlIHNhbWUgaW5wdXQuXG4gIGlzQ2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gIC8vIFdoZW4gdHJ1ZSwgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uIHdpbGwgY29udGludWUgdG8gdGhlIGVuZCBvZiBhIHNlYXJjaCBwYXR0ZXJuIGV2ZW4gaWZcbiAgaW5jbHVkZVNjb3JlOiBmYWxzZSxcbiAgLy8gTGlzdCBvZiBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSBzZWFyY2hlZC4gVGhpcyBhbHNvIHN1cHBvcnRzIG5lc3RlZCBwcm9wZXJ0aWVzLlxuICBrZXlzOiBbXSxcbiAgLy8gV2hldGhlciB0byBzb3J0IHRoZSByZXN1bHQgbGlzdCwgYnkgc2NvcmVcbiAgc2hvdWxkU29ydDogdHJ1ZSxcbiAgLy8gRGVmYXVsdCBzb3J0IGZ1bmN0aW9uOiBzb3J0IGJ5IGFzY2VuZGluZyBzY29yZSwgYXNjZW5kaW5nIGluZGV4XG4gIHNvcnRGbjogKGEsIGIpID0+XG4gICAgYS5zY29yZSA9PT0gYi5zY29yZSA/IChhLmlkeCA8IGIuaWR4ID8gLTEgOiAxKSA6IGEuc2NvcmUgPCBiLnNjb3JlID8gLTEgOiAxXG59O1xuXG5jb25zdCBGdXp6eU9wdGlvbnMgPSB7XG4gIC8vIEFwcHJveGltYXRlbHkgd2hlcmUgaW4gdGhlIHRleHQgaXMgdGhlIHBhdHRlcm4gZXhwZWN0ZWQgdG8gYmUgZm91bmQ/XG4gIGxvY2F0aW9uOiAwLFxuICAvLyBBdCB3aGF0IHBvaW50IGRvZXMgdGhlIG1hdGNoIGFsZ29yaXRobSBnaXZlIHVwLiBBIHRocmVzaG9sZCBvZiAnMC4wJyByZXF1aXJlcyBhIHBlcmZlY3QgbWF0Y2hcbiAgLy8gKG9mIGJvdGggbGV0dGVycyBhbmQgbG9jYXRpb24pLCBhIHRocmVzaG9sZCBvZiAnMS4wJyB3b3VsZCBtYXRjaCBhbnl0aGluZy5cbiAgdGhyZXNob2xkOiAwLjYsXG4gIC8vIERldGVybWluZXMgaG93IGNsb3NlIHRoZSBtYXRjaCBtdXN0IGJlIHRvIHRoZSBmdXp6eSBsb2NhdGlvbiAoc3BlY2lmaWVkIGFib3ZlKS5cbiAgLy8gQW4gZXhhY3QgbGV0dGVyIG1hdGNoIHdoaWNoIGlzICdkaXN0YW5jZScgY2hhcmFjdGVycyBhd2F5IGZyb20gdGhlIGZ1enp5IGxvY2F0aW9uXG4gIC8vIHdvdWxkIHNjb3JlIGFzIGEgY29tcGxldGUgbWlzbWF0Y2guIEEgZGlzdGFuY2Ugb2YgJzAnIHJlcXVpcmVzIHRoZSBtYXRjaCBiZSBhdFxuICAvLyB0aGUgZXhhY3QgbG9jYXRpb24gc3BlY2lmaWVkLCBhIHRocmVzaG9sZCBvZiAnMTAwMCcgd291bGQgcmVxdWlyZSBhIHBlcmZlY3QgbWF0Y2hcbiAgLy8gdG8gYmUgd2l0aGluIDgwMCBjaGFyYWN0ZXJzIG9mIHRoZSBmdXp6eSBsb2NhdGlvbiB0byBiZSBmb3VuZCB1c2luZyBhIDAuOCB0aHJlc2hvbGQuXG4gIGRpc3RhbmNlOiAxMDBcbn07XG5cbmNvbnN0IEFkdmFuY2VkT3B0aW9ucyA9IHtcbiAgLy8gV2hlbiBgdHJ1ZWAsIGl0IGVuYWJsZXMgdGhlIHVzZSBvZiB1bml4LWxpa2Ugc2VhcmNoIGNvbW1hbmRzXG4gIHVzZUV4dGVuZGVkU2VhcmNoOiBmYWxzZSxcbiAgLy8gVGhlIGdldCBmdW5jdGlvbiB0byB1c2Ugd2hlbiBmZXRjaGluZyBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICAvLyBUaGUgZGVmYXVsdCB3aWxsIHNlYXJjaCBuZXN0ZWQgcGF0aHMgKmllIGZvby5iYXIuYmF6KlxuICBnZXRGbjogZ2V0LFxuICAvLyBXaGVuIGB0cnVlYCwgc2VhcmNoIHdpbGwgaWdub3JlIGBsb2NhdGlvbmAgYW5kIGBkaXN0YW5jZWAsIHNvIGl0IHdvbid0IG1hdHRlclxuICAvLyB3aGVyZSBpbiB0aGUgc3RyaW5nIHRoZSBwYXR0ZXJuIGFwcGVhcnMuXG4gIC8vIE1vcmUgaW5mbzogaHR0cHM6Ly9mdXNlanMuaW8vY29uY2VwdHMvc2NvcmluZy10aGVvcnkuaHRtbCNmdXp6aW5lc3Mtc2NvcmVcbiAgaWdub3JlTG9jYXRpb246IGZhbHNlLFxuICAvLyBXaGVuIGB0cnVlYCwgdGhlIGNhbGN1bGF0aW9uIGZvciB0aGUgcmVsZXZhbmNlIHNjb3JlICh1c2VkIGZvciBzb3J0aW5nKSB3aWxsXG4gIC8vIGlnbm9yZSB0aGUgZmllbGQtbGVuZ3RoIG5vcm0uXG4gIC8vIE1vcmUgaW5mbzogaHR0cHM6Ly9mdXNlanMuaW8vY29uY2VwdHMvc2NvcmluZy10aGVvcnkuaHRtbCNmaWVsZC1sZW5ndGgtbm9ybVxuICBpZ25vcmVGaWVsZE5vcm06IGZhbHNlLFxuICAvLyBUaGUgd2VpZ2h0IHRvIGRldGVybWluZSBob3cgbXVjaCBmaWVsZCBsZW5ndGggbm9ybSBlZmZlY3RzIHNjb3JpbmcuXG4gIGZpZWxkTm9ybVdlaWdodDogMVxufTtcblxudmFyIENvbmZpZyA9IHtcbiAgLi4uQmFzaWNPcHRpb25zLFxuICAuLi5NYXRjaE9wdGlvbnMsXG4gIC4uLkZ1enp5T3B0aW9ucyxcbiAgLi4uQWR2YW5jZWRPcHRpb25zXG59O1xuXG5jb25zdCBTUEFDRSA9IC9bXiBdKy9nO1xuXG4vLyBGaWVsZC1sZW5ndGggbm9ybTogdGhlIHNob3J0ZXIgdGhlIGZpZWxkLCB0aGUgaGlnaGVyIHRoZSB3ZWlnaHQuXG4vLyBTZXQgdG8gMyBkZWNpbWFscyB0byByZWR1Y2UgaW5kZXggc2l6ZS5cbmZ1bmN0aW9uIG5vcm0od2VpZ2h0ID0gMSwgbWFudGlzc2EgPSAzKSB7XG4gIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xuICBjb25zdCBtID0gTWF0aC5wb3coMTAsIG1hbnRpc3NhKTtcblxuICByZXR1cm4ge1xuICAgIGdldCh2YWx1ZSkge1xuICAgICAgY29uc3QgbnVtVG9rZW5zID0gdmFsdWUubWF0Y2goU1BBQ0UpLmxlbmd0aDtcblxuICAgICAgaWYgKGNhY2hlLmhhcyhudW1Ub2tlbnMpKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5nZXQobnVtVG9rZW5zKVxuICAgICAgfVxuXG4gICAgICAvLyBEZWZhdWx0IGZ1bmN0aW9uIGlzIDEvc3FydCh4KSwgd2VpZ2h0IG1ha2VzIHRoYXQgdmFyaWFibGVcbiAgICAgIGNvbnN0IG5vcm0gPSAxIC8gTWF0aC5wb3cobnVtVG9rZW5zLCAwLjUgKiB3ZWlnaHQpO1xuXG4gICAgICAvLyBJbiBwbGFjZSBvZiBgdG9GaXhlZChtYW50aXNzYSlgLCBmb3IgZmFzdGVyIGNvbXB1dGF0aW9uXG4gICAgICBjb25zdCBuID0gcGFyc2VGbG9hdChNYXRoLnJvdW5kKG5vcm0gKiBtKSAvIG0pO1xuXG4gICAgICBjYWNoZS5zZXQobnVtVG9rZW5zLCBuKTtcblxuICAgICAgcmV0dXJuIG5cbiAgICB9LFxuICAgIGNsZWFyKCkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgRnVzZUluZGV4IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGdldEZuID0gQ29uZmlnLmdldEZuLFxuICAgIGZpZWxkTm9ybVdlaWdodCA9IENvbmZpZy5maWVsZE5vcm1XZWlnaHRcbiAgfSA9IHt9KSB7XG4gICAgdGhpcy5ub3JtID0gbm9ybShmaWVsZE5vcm1XZWlnaHQsIDMpO1xuICAgIHRoaXMuZ2V0Rm4gPSBnZXRGbjtcbiAgICB0aGlzLmlzQ3JlYXRlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5zZXRJbmRleFJlY29yZHMoKTtcbiAgfVxuICBzZXRTb3VyY2VzKGRvY3MgPSBbXSkge1xuICAgIHRoaXMuZG9jcyA9IGRvY3M7XG4gIH1cbiAgc2V0SW5kZXhSZWNvcmRzKHJlY29yZHMgPSBbXSkge1xuICAgIHRoaXMucmVjb3JkcyA9IHJlY29yZHM7XG4gIH1cbiAgc2V0S2V5cyhrZXlzID0gW10pIHtcbiAgICB0aGlzLmtleXMgPSBrZXlzO1xuICAgIHRoaXMuX2tleXNNYXAgPSB7fTtcbiAgICBrZXlzLmZvckVhY2goKGtleSwgaWR4KSA9PiB7XG4gICAgICB0aGlzLl9rZXlzTWFwW2tleS5pZF0gPSBpZHg7XG4gICAgfSk7XG4gIH1cbiAgY3JlYXRlKCkge1xuICAgIGlmICh0aGlzLmlzQ3JlYXRlZCB8fCAhdGhpcy5kb2NzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5pc0NyZWF0ZWQgPSB0cnVlO1xuXG4gICAgLy8gTGlzdCBpcyBBcnJheTxTdHJpbmc+XG4gICAgaWYgKGlzU3RyaW5nKHRoaXMuZG9jc1swXSkpIHtcbiAgICAgIHRoaXMuZG9jcy5mb3JFYWNoKChkb2MsIGRvY0luZGV4KSA9PiB7XG4gICAgICAgIHRoaXMuX2FkZFN0cmluZyhkb2MsIGRvY0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0IGlzIEFycmF5PE9iamVjdD5cbiAgICAgIHRoaXMuZG9jcy5mb3JFYWNoKChkb2MsIGRvY0luZGV4KSA9PiB7XG4gICAgICAgIHRoaXMuX2FkZE9iamVjdChkb2MsIGRvY0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMubm9ybS5jbGVhcigpO1xuICB9XG4gIC8vIEFkZHMgYSBkb2MgdG8gdGhlIGVuZCBvZiB0aGUgaW5kZXhcbiAgYWRkKGRvYykge1xuICAgIGNvbnN0IGlkeCA9IHRoaXMuc2l6ZSgpO1xuXG4gICAgaWYgKGlzU3RyaW5nKGRvYykpIHtcbiAgICAgIHRoaXMuX2FkZFN0cmluZyhkb2MsIGlkeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2FkZE9iamVjdChkb2MsIGlkeCk7XG4gICAgfVxuICB9XG4gIC8vIFJlbW92ZXMgdGhlIGRvYyBhdCB0aGUgc3BlY2lmaWVkIGluZGV4IG9mIHRoZSBpbmRleFxuICByZW1vdmVBdChpZHgpIHtcbiAgICB0aGlzLnJlY29yZHMuc3BsaWNlKGlkeCwgMSk7XG5cbiAgICAvLyBDaGFuZ2UgcmVmIGluZGV4IG9mIGV2ZXJ5IHN1YnNxdWVudCBkb2NcbiAgICBmb3IgKGxldCBpID0gaWR4LCBsZW4gPSB0aGlzLnNpemUoKTsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLnJlY29yZHNbaV0uaSAtPSAxO1xuICAgIH1cbiAgfVxuICBnZXRWYWx1ZUZvckl0ZW1BdEtleUlkKGl0ZW0sIGtleUlkKSB7XG4gICAgcmV0dXJuIGl0ZW1bdGhpcy5fa2V5c01hcFtrZXlJZF1dXG4gIH1cbiAgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRzLmxlbmd0aFxuICB9XG4gIF9hZGRTdHJpbmcoZG9jLCBkb2NJbmRleCkge1xuICAgIGlmICghaXNEZWZpbmVkKGRvYykgfHwgaXNCbGFuayhkb2MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgcmVjb3JkID0ge1xuICAgICAgdjogZG9jLFxuICAgICAgaTogZG9jSW5kZXgsXG4gICAgICBuOiB0aGlzLm5vcm0uZ2V0KGRvYylcbiAgICB9O1xuXG4gICAgdGhpcy5yZWNvcmRzLnB1c2gocmVjb3JkKTtcbiAgfVxuICBfYWRkT2JqZWN0KGRvYywgZG9jSW5kZXgpIHtcbiAgICBsZXQgcmVjb3JkID0geyBpOiBkb2NJbmRleCwgJDoge30gfTtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciBldmVyeSBrZXkgKGkuZSwgcGF0aCksIGFuZCBmZXRjaCB0aGUgdmFsdWUgYXQgdGhhdCBrZXlcbiAgICB0aGlzLmtleXMuZm9yRWFjaCgoa2V5LCBrZXlJbmRleCkgPT4ge1xuICAgICAgbGV0IHZhbHVlID0ga2V5LmdldEZuID8ga2V5LmdldEZuKGRvYykgOiB0aGlzLmdldEZuKGRvYywga2V5LnBhdGgpO1xuXG4gICAgICBpZiAoIWlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBsZXQgc3ViUmVjb3JkcyA9IFtdO1xuICAgICAgICBjb25zdCBzdGFjayA9IFt7IG5lc3RlZEFyckluZGV4OiAtMSwgdmFsdWUgfV07XG5cbiAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IHsgbmVzdGVkQXJySW5kZXgsIHZhbHVlIH0gPSBzdGFjay5wb3AoKTtcblxuICAgICAgICAgIGlmICghaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpICYmICFpc0JsYW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgbGV0IHN1YlJlY29yZCA9IHtcbiAgICAgICAgICAgICAgdjogdmFsdWUsXG4gICAgICAgICAgICAgIGk6IG5lc3RlZEFyckluZGV4LFxuICAgICAgICAgICAgICBuOiB0aGlzLm5vcm0uZ2V0KHZhbHVlKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc3ViUmVjb3Jkcy5wdXNoKHN1YlJlY29yZCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCgoaXRlbSwgaykgPT4ge1xuICAgICAgICAgICAgICBzdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICBuZXN0ZWRBcnJJbmRleDogayxcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSA7XG4gICAgICAgIH1cbiAgICAgICAgcmVjb3JkLiRba2V5SW5kZXhdID0gc3ViUmVjb3JkcztcbiAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcodmFsdWUpICYmICFpc0JsYW5rKHZhbHVlKSkge1xuICAgICAgICBsZXQgc3ViUmVjb3JkID0ge1xuICAgICAgICAgIHY6IHZhbHVlLFxuICAgICAgICAgIG46IHRoaXMubm9ybS5nZXQodmFsdWUpXG4gICAgICAgIH07XG5cbiAgICAgICAgcmVjb3JkLiRba2V5SW5kZXhdID0gc3ViUmVjb3JkO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5yZWNvcmRzLnB1c2gocmVjb3JkKTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleXM6IHRoaXMua2V5cyxcbiAgICAgIHJlY29yZHM6IHRoaXMucmVjb3Jkc1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVJbmRleChcbiAga2V5cyxcbiAgZG9jcyxcbiAgeyBnZXRGbiA9IENvbmZpZy5nZXRGbiwgZmllbGROb3JtV2VpZ2h0ID0gQ29uZmlnLmZpZWxkTm9ybVdlaWdodCB9ID0ge31cbikge1xuICBjb25zdCBteUluZGV4ID0gbmV3IEZ1c2VJbmRleCh7IGdldEZuLCBmaWVsZE5vcm1XZWlnaHQgfSk7XG4gIG15SW5kZXguc2V0S2V5cyhrZXlzLm1hcChjcmVhdGVLZXkpKTtcbiAgbXlJbmRleC5zZXRTb3VyY2VzKGRvY3MpO1xuICBteUluZGV4LmNyZWF0ZSgpO1xuICByZXR1cm4gbXlJbmRleFxufVxuXG5mdW5jdGlvbiBwYXJzZUluZGV4KFxuICBkYXRhLFxuICB7IGdldEZuID0gQ29uZmlnLmdldEZuLCBmaWVsZE5vcm1XZWlnaHQgPSBDb25maWcuZmllbGROb3JtV2VpZ2h0IH0gPSB7fVxuKSB7XG4gIGNvbnN0IHsga2V5cywgcmVjb3JkcyB9ID0gZGF0YTtcbiAgY29uc3QgbXlJbmRleCA9IG5ldyBGdXNlSW5kZXgoeyBnZXRGbiwgZmllbGROb3JtV2VpZ2h0IH0pO1xuICBteUluZGV4LnNldEtleXMoa2V5cyk7XG4gIG15SW5kZXguc2V0SW5kZXhSZWNvcmRzKHJlY29yZHMpO1xuICByZXR1cm4gbXlJbmRleFxufVxuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUkMShcbiAgcGF0dGVybixcbiAge1xuICAgIGVycm9ycyA9IDAsXG4gICAgY3VycmVudExvY2F0aW9uID0gMCxcbiAgICBleHBlY3RlZExvY2F0aW9uID0gMCxcbiAgICBkaXN0YW5jZSA9IENvbmZpZy5kaXN0YW5jZSxcbiAgICBpZ25vcmVMb2NhdGlvbiA9IENvbmZpZy5pZ25vcmVMb2NhdGlvblxuICB9ID0ge31cbikge1xuICBjb25zdCBhY2N1cmFjeSA9IGVycm9ycyAvIHBhdHRlcm4ubGVuZ3RoO1xuXG4gIGlmIChpZ25vcmVMb2NhdGlvbikge1xuICAgIHJldHVybiBhY2N1cmFjeVxuICB9XG5cbiAgY29uc3QgcHJveGltaXR5ID0gTWF0aC5hYnMoZXhwZWN0ZWRMb2NhdGlvbiAtIGN1cnJlbnRMb2NhdGlvbik7XG5cbiAgaWYgKCFkaXN0YW5jZSkge1xuICAgIC8vIERvZGdlIGRpdmlkZSBieSB6ZXJvIGVycm9yLlxuICAgIHJldHVybiBwcm94aW1pdHkgPyAxLjAgOiBhY2N1cmFjeVxuICB9XG5cbiAgcmV0dXJuIGFjY3VyYWN5ICsgcHJveGltaXR5IC8gZGlzdGFuY2Vcbn1cblxuZnVuY3Rpb24gY29udmVydE1hc2tUb0luZGljZXMoXG4gIG1hdGNobWFzayA9IFtdLFxuICBtaW5NYXRjaENoYXJMZW5ndGggPSBDb25maWcubWluTWF0Y2hDaGFyTGVuZ3RoXG4pIHtcbiAgbGV0IGluZGljZXMgPSBbXTtcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIGxldCBlbmQgPSAtMTtcbiAgbGV0IGkgPSAwO1xuXG4gIGZvciAobGV0IGxlbiA9IG1hdGNobWFzay5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIGxldCBtYXRjaCA9IG1hdGNobWFza1tpXTtcbiAgICBpZiAobWF0Y2ggJiYgc3RhcnQgPT09IC0xKSB7XG4gICAgICBzdGFydCA9IGk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2ggJiYgc3RhcnQgIT09IC0xKSB7XG4gICAgICBlbmQgPSBpIC0gMTtcbiAgICAgIGlmIChlbmQgLSBzdGFydCArIDEgPj0gbWluTWF0Y2hDaGFyTGVuZ3RoKSB7XG4gICAgICAgIGluZGljZXMucHVzaChbc3RhcnQsIGVuZF0pO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAtMTtcbiAgICB9XG4gIH1cblxuICAvLyAoaS0xIC0gc3RhcnQpICsgMSA9PiBpIC0gc3RhcnRcbiAgaWYgKG1hdGNobWFza1tpIC0gMV0gJiYgaSAtIHN0YXJ0ID49IG1pbk1hdGNoQ2hhckxlbmd0aCkge1xuICAgIGluZGljZXMucHVzaChbc3RhcnQsIGkgLSAxXSk7XG4gIH1cblxuICByZXR1cm4gaW5kaWNlc1xufVxuXG4vLyBNYWNoaW5lIHdvcmQgc2l6ZVxuY29uc3QgTUFYX0JJVFMgPSAzMjtcblxuZnVuY3Rpb24gc2VhcmNoKFxuICB0ZXh0LFxuICBwYXR0ZXJuLFxuICBwYXR0ZXJuQWxwaGFiZXQsXG4gIHtcbiAgICBsb2NhdGlvbiA9IENvbmZpZy5sb2NhdGlvbixcbiAgICBkaXN0YW5jZSA9IENvbmZpZy5kaXN0YW5jZSxcbiAgICB0aHJlc2hvbGQgPSBDb25maWcudGhyZXNob2xkLFxuICAgIGZpbmRBbGxNYXRjaGVzID0gQ29uZmlnLmZpbmRBbGxNYXRjaGVzLFxuICAgIG1pbk1hdGNoQ2hhckxlbmd0aCA9IENvbmZpZy5taW5NYXRjaENoYXJMZW5ndGgsXG4gICAgaW5jbHVkZU1hdGNoZXMgPSBDb25maWcuaW5jbHVkZU1hdGNoZXMsXG4gICAgaWdub3JlTG9jYXRpb24gPSBDb25maWcuaWdub3JlTG9jYXRpb25cbiAgfSA9IHt9XG4pIHtcbiAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gTUFYX0JJVFMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoUEFUVEVSTl9MRU5HVEhfVE9PX0xBUkdFKE1BWF9CSVRTKSlcbiAgfVxuXG4gIGNvbnN0IHBhdHRlcm5MZW4gPSBwYXR0ZXJuLmxlbmd0aDtcbiAgLy8gU2V0IHN0YXJ0aW5nIGxvY2F0aW9uIGF0IGJlZ2lubmluZyB0ZXh0IGFuZCBpbml0aWFsaXplIHRoZSBhbHBoYWJldC5cbiAgY29uc3QgdGV4dExlbiA9IHRleHQubGVuZ3RoO1xuICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlbiBsb2NhdGlvbiA+IHRleHQubGVuZ3RoXG4gIGNvbnN0IGV4cGVjdGVkTG9jYXRpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsb2NhdGlvbiwgdGV4dExlbikpO1xuICAvLyBIaWdoZXN0IHNjb3JlIGJleW9uZCB3aGljaCB3ZSBnaXZlIHVwLlxuICBsZXQgY3VycmVudFRocmVzaG9sZCA9IHRocmVzaG9sZDtcbiAgLy8gSXMgdGhlcmUgYSBuZWFyYnkgZXhhY3QgbWF0Y2g/IChzcGVlZHVwKVxuICBsZXQgYmVzdExvY2F0aW9uID0gZXhwZWN0ZWRMb2NhdGlvbjtcblxuICAvLyBQZXJmb3JtYW5jZTogb25seSBjb21wdXRlciBtYXRjaGVzIHdoZW4gdGhlIG1pbk1hdGNoQ2hhckxlbmd0aCA+IDFcbiAgLy8gT1IgaWYgYGluY2x1ZGVNYXRjaGVzYCBpcyB0cnVlLlxuICBjb25zdCBjb21wdXRlTWF0Y2hlcyA9IG1pbk1hdGNoQ2hhckxlbmd0aCA+IDEgfHwgaW5jbHVkZU1hdGNoZXM7XG4gIC8vIEEgbWFzayBvZiB0aGUgbWF0Y2hlcywgdXNlZCBmb3IgYnVpbGRpbmcgdGhlIGluZGljZXNcbiAgY29uc3QgbWF0Y2hNYXNrID0gY29tcHV0ZU1hdGNoZXMgPyBBcnJheSh0ZXh0TGVuKSA6IFtdO1xuXG4gIGxldCBpbmRleDtcblxuICAvLyBHZXQgYWxsIGV4YWN0IG1hdGNoZXMsIGhlcmUgZm9yIHNwZWVkIHVwXG4gIHdoaWxlICgoaW5kZXggPSB0ZXh0LmluZGV4T2YocGF0dGVybiwgYmVzdExvY2F0aW9uKSkgPiAtMSkge1xuICAgIGxldCBzY29yZSA9IGNvbXB1dGVTY29yZSQxKHBhdHRlcm4sIHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogaW5kZXgsXG4gICAgICBleHBlY3RlZExvY2F0aW9uLFxuICAgICAgZGlzdGFuY2UsXG4gICAgICBpZ25vcmVMb2NhdGlvblxuICAgIH0pO1xuXG4gICAgY3VycmVudFRocmVzaG9sZCA9IE1hdGgubWluKHNjb3JlLCBjdXJyZW50VGhyZXNob2xkKTtcbiAgICBiZXN0TG9jYXRpb24gPSBpbmRleCArIHBhdHRlcm5MZW47XG5cbiAgICBpZiAoY29tcHV0ZU1hdGNoZXMpIHtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgcGF0dGVybkxlbikge1xuICAgICAgICBtYXRjaE1hc2tbaW5kZXggKyBpXSA9IDE7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXNldCB0aGUgYmVzdCBsb2NhdGlvblxuICBiZXN0TG9jYXRpb24gPSAtMTtcblxuICBsZXQgbGFzdEJpdEFyciA9IFtdO1xuICBsZXQgZmluYWxTY29yZSA9IDE7XG4gIGxldCBiaW5NYXggPSBwYXR0ZXJuTGVuICsgdGV4dExlbjtcblxuICBjb25zdCBtYXNrID0gMSA8PCAocGF0dGVybkxlbiAtIDEpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybkxlbjsgaSArPSAxKSB7XG4gICAgLy8gU2NhbiBmb3IgdGhlIGJlc3QgbWF0Y2g7IGVhY2ggaXRlcmF0aW9uIGFsbG93cyBmb3Igb25lIG1vcmUgZXJyb3IuXG4gICAgLy8gUnVuIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgaG93IGZhciBmcm9tIHRoZSBtYXRjaCBsb2NhdGlvbiB3ZSBjYW4gc3RyYXlcbiAgICAvLyBhdCB0aGlzIGVycm9yIGxldmVsLlxuICAgIGxldCBiaW5NaW4gPSAwO1xuICAgIGxldCBiaW5NaWQgPSBiaW5NYXg7XG5cbiAgICB3aGlsZSAoYmluTWluIDwgYmluTWlkKSB7XG4gICAgICBjb25zdCBzY29yZSA9IGNvbXB1dGVTY29yZSQxKHBhdHRlcm4sIHtcbiAgICAgICAgZXJyb3JzOiBpLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IGV4cGVjdGVkTG9jYXRpb24gKyBiaW5NaWQsXG4gICAgICAgIGV4cGVjdGVkTG9jYXRpb24sXG4gICAgICAgIGRpc3RhbmNlLFxuICAgICAgICBpZ25vcmVMb2NhdGlvblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChzY29yZSA8PSBjdXJyZW50VGhyZXNob2xkKSB7XG4gICAgICAgIGJpbk1pbiA9IGJpbk1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbk1heCA9IGJpbk1pZDtcbiAgICAgIH1cblxuICAgICAgYmluTWlkID0gTWF0aC5mbG9vcigoYmluTWF4IC0gYmluTWluKSAvIDIgKyBiaW5NaW4pO1xuICAgIH1cblxuICAgIC8vIFVzZSB0aGUgcmVzdWx0IGZyb20gdGhpcyBpdGVyYXRpb24gYXMgdGhlIG1heGltdW0gZm9yIHRoZSBuZXh0LlxuICAgIGJpbk1heCA9IGJpbk1pZDtcblxuICAgIGxldCBzdGFydCA9IE1hdGgubWF4KDEsIGV4cGVjdGVkTG9jYXRpb24gLSBiaW5NaWQgKyAxKTtcbiAgICBsZXQgZmluaXNoID0gZmluZEFsbE1hdGNoZXNcbiAgICAgID8gdGV4dExlblxuICAgICAgOiBNYXRoLm1pbihleHBlY3RlZExvY2F0aW9uICsgYmluTWlkLCB0ZXh0TGVuKSArIHBhdHRlcm5MZW47XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBiaXQgYXJyYXlcbiAgICBsZXQgYml0QXJyID0gQXJyYXkoZmluaXNoICsgMik7XG5cbiAgICBiaXRBcnJbZmluaXNoICsgMV0gPSAoMSA8PCBpKSAtIDE7XG5cbiAgICBmb3IgKGxldCBqID0gZmluaXNoOyBqID49IHN0YXJ0OyBqIC09IDEpIHtcbiAgICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBqIC0gMTtcbiAgICAgIGxldCBjaGFyTWF0Y2ggPSBwYXR0ZXJuQWxwaGFiZXRbdGV4dC5jaGFyQXQoY3VycmVudExvY2F0aW9uKV07XG5cbiAgICAgIGlmIChjb21wdXRlTWF0Y2hlcykge1xuICAgICAgICAvLyBTcGVlZCB1cDogcXVpY2sgYm9vbCB0byBpbnQgY29udmVyc2lvbiAoaS5lLCBgY2hhck1hdGNoID8gMSA6IDBgKVxuICAgICAgICBtYXRjaE1hc2tbY3VycmVudExvY2F0aW9uXSA9ICshIWNoYXJNYXRjaDtcbiAgICAgIH1cblxuICAgICAgLy8gRmlyc3QgcGFzczogZXhhY3QgbWF0Y2hcbiAgICAgIGJpdEFycltqXSA9ICgoYml0QXJyW2ogKyAxXSA8PCAxKSB8IDEpICYgY2hhck1hdGNoO1xuXG4gICAgICAvLyBTdWJzZXF1ZW50IHBhc3NlczogZnV6enkgbWF0Y2hcbiAgICAgIGlmIChpKSB7XG4gICAgICAgIGJpdEFycltqXSB8PVxuICAgICAgICAgICgobGFzdEJpdEFycltqICsgMV0gfCBsYXN0Qml0QXJyW2pdKSA8PCAxKSB8IDEgfCBsYXN0Qml0QXJyW2ogKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJpdEFycltqXSAmIG1hc2spIHtcbiAgICAgICAgZmluYWxTY29yZSA9IGNvbXB1dGVTY29yZSQxKHBhdHRlcm4sIHtcbiAgICAgICAgICBlcnJvcnM6IGksXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIGV4cGVjdGVkTG9jYXRpb24sXG4gICAgICAgICAgZGlzdGFuY2UsXG4gICAgICAgICAgaWdub3JlTG9jYXRpb25cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVGhpcyBtYXRjaCB3aWxsIGFsbW9zdCBjZXJ0YWlubHkgYmUgYmV0dGVyIHRoYW4gYW55IGV4aXN0aW5nIG1hdGNoLlxuICAgICAgICAvLyBCdXQgY2hlY2sgYW55d2F5LlxuICAgICAgICBpZiAoZmluYWxTY29yZSA8PSBjdXJyZW50VGhyZXNob2xkKSB7XG4gICAgICAgICAgLy8gSW5kZWVkIGl0IGlzXG4gICAgICAgICAgY3VycmVudFRocmVzaG9sZCA9IGZpbmFsU2NvcmU7XG4gICAgICAgICAgYmVzdExvY2F0aW9uID0gY3VycmVudExvY2F0aW9uO1xuXG4gICAgICAgICAgLy8gQWxyZWFkeSBwYXNzZWQgYGxvY2AsIGRvd25oaWxsIGZyb20gaGVyZSBvbiBpbi5cbiAgICAgICAgICBpZiAoYmVzdExvY2F0aW9uIDw9IGV4cGVjdGVkTG9jYXRpb24pIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gV2hlbiBwYXNzaW5nIGBiZXN0TG9jYXRpb25gLCBkb24ndCBleGNlZWQgb3VyIGN1cnJlbnQgZGlzdGFuY2UgZnJvbSBgZXhwZWN0ZWRMb2NhdGlvbmAuXG4gICAgICAgICAgc3RhcnQgPSBNYXRoLm1heCgxLCAyICogZXhwZWN0ZWRMb2NhdGlvbiAtIGJlc3RMb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBObyBob3BlIGZvciBhIChiZXR0ZXIpIG1hdGNoIGF0IGdyZWF0ZXIgZXJyb3IgbGV2ZWxzLlxuICAgIGNvbnN0IHNjb3JlID0gY29tcHV0ZVNjb3JlJDEocGF0dGVybiwge1xuICAgICAgZXJyb3JzOiBpICsgMSxcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogZXhwZWN0ZWRMb2NhdGlvbixcbiAgICAgIGV4cGVjdGVkTG9jYXRpb24sXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIGlnbm9yZUxvY2F0aW9uXG4gICAgfSk7XG5cbiAgICBpZiAoc2NvcmUgPiBjdXJyZW50VGhyZXNob2xkKSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGxhc3RCaXRBcnIgPSBiaXRBcnI7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7XG4gICAgaXNNYXRjaDogYmVzdExvY2F0aW9uID49IDAsXG4gICAgLy8gQ291bnQgZXhhY3QgbWF0Y2hlcyAodGhvc2Ugd2l0aCBhIHNjb3JlIG9mIDApIHRvIGJlIFwiYWxtb3N0XCIgZXhhY3RcbiAgICBzY29yZTogTWF0aC5tYXgoMC4wMDEsIGZpbmFsU2NvcmUpXG4gIH07XG5cbiAgaWYgKGNvbXB1dGVNYXRjaGVzKSB7XG4gICAgY29uc3QgaW5kaWNlcyA9IGNvbnZlcnRNYXNrVG9JbmRpY2VzKG1hdGNoTWFzaywgbWluTWF0Y2hDaGFyTGVuZ3RoKTtcbiAgICBpZiAoIWluZGljZXMubGVuZ3RoKSB7XG4gICAgICByZXN1bHQuaXNNYXRjaCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaW5jbHVkZU1hdGNoZXMpIHtcbiAgICAgIHJlc3VsdC5pbmRpY2VzID0gaW5kaWNlcztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdHRlcm5BbHBoYWJldChwYXR0ZXJuKSB7XG4gIGxldCBtYXNrID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBhdHRlcm4ubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICBjb25zdCBjaGFyID0gcGF0dGVybi5jaGFyQXQoaSk7XG4gICAgbWFza1tjaGFyXSA9IChtYXNrW2NoYXJdIHx8IDApIHwgKDEgPDwgKGxlbiAtIGkgLSAxKSk7XG4gIH1cblxuICByZXR1cm4gbWFza1xufVxuXG5jbGFzcyBCaXRhcFNlYXJjaCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhdHRlcm4sXG4gICAge1xuICAgICAgbG9jYXRpb24gPSBDb25maWcubG9jYXRpb24sXG4gICAgICB0aHJlc2hvbGQgPSBDb25maWcudGhyZXNob2xkLFxuICAgICAgZGlzdGFuY2UgPSBDb25maWcuZGlzdGFuY2UsXG4gICAgICBpbmNsdWRlTWF0Y2hlcyA9IENvbmZpZy5pbmNsdWRlTWF0Y2hlcyxcbiAgICAgIGZpbmRBbGxNYXRjaGVzID0gQ29uZmlnLmZpbmRBbGxNYXRjaGVzLFxuICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoID0gQ29uZmlnLm1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgIGlzQ2FzZVNlbnNpdGl2ZSA9IENvbmZpZy5pc0Nhc2VTZW5zaXRpdmUsXG4gICAgICBpZ25vcmVMb2NhdGlvbiA9IENvbmZpZy5pZ25vcmVMb2NhdGlvblxuICAgIH0gPSB7fVxuICApIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIHRocmVzaG9sZCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgaW5jbHVkZU1hdGNoZXMsXG4gICAgICBmaW5kQWxsTWF0Y2hlcyxcbiAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgIGlzQ2FzZVNlbnNpdGl2ZSxcbiAgICAgIGlnbm9yZUxvY2F0aW9uXG4gICAgfTtcblxuICAgIHRoaXMucGF0dGVybiA9IGlzQ2FzZVNlbnNpdGl2ZSA/IHBhdHRlcm4gOiBwYXR0ZXJuLnRvTG93ZXJDYXNlKCk7XG5cbiAgICB0aGlzLmNodW5rcyA9IFtdO1xuXG4gICAgaWYgKCF0aGlzLnBhdHRlcm4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBhZGRDaHVuayA9IChwYXR0ZXJuLCBzdGFydEluZGV4KSA9PiB7XG4gICAgICB0aGlzLmNodW5rcy5wdXNoKHtcbiAgICAgICAgcGF0dGVybixcbiAgICAgICAgYWxwaGFiZXQ6IGNyZWF0ZVBhdHRlcm5BbHBoYWJldChwYXR0ZXJuKSxcbiAgICAgICAgc3RhcnRJbmRleFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGxlbiA9IHRoaXMucGF0dGVybi5sZW5ndGg7XG5cbiAgICBpZiAobGVuID4gTUFYX0JJVFMpIHtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGNvbnN0IHJlbWFpbmRlciA9IGxlbiAlIE1BWF9CSVRTO1xuICAgICAgY29uc3QgZW5kID0gbGVuIC0gcmVtYWluZGVyO1xuXG4gICAgICB3aGlsZSAoaSA8IGVuZCkge1xuICAgICAgICBhZGRDaHVuayh0aGlzLnBhdHRlcm4uc3Vic3RyKGksIE1BWF9CSVRTKSwgaSk7XG4gICAgICAgIGkgKz0gTUFYX0JJVFM7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW1haW5kZXIpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IGxlbiAtIE1BWF9CSVRTO1xuICAgICAgICBhZGRDaHVuayh0aGlzLnBhdHRlcm4uc3Vic3RyKHN0YXJ0SW5kZXgpLCBzdGFydEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYWRkQ2h1bmsodGhpcy5wYXR0ZXJuLCAwKTtcbiAgICB9XG4gIH1cblxuICBzZWFyY2hJbih0ZXh0KSB7XG4gICAgY29uc3QgeyBpc0Nhc2VTZW5zaXRpdmUsIGluY2x1ZGVNYXRjaGVzIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBpZiAoIWlzQ2FzZVNlbnNpdGl2ZSkge1xuICAgICAgdGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvLyBFeGFjdCBtYXRjaFxuICAgIGlmICh0aGlzLnBhdHRlcm4gPT09IHRleHQpIHtcbiAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgIGlzTWF0Y2g6IHRydWUsXG4gICAgICAgIHNjb3JlOiAwXG4gICAgICB9O1xuXG4gICAgICBpZiAoaW5jbHVkZU1hdGNoZXMpIHtcbiAgICAgICAgcmVzdWx0LmluZGljZXMgPSBbWzAsIHRleHQubGVuZ3RoIC0gMV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCB1c2UgQml0YXAgYWxnb3JpdGhtXG4gICAgY29uc3Qge1xuICAgICAgbG9jYXRpb24sXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIHRocmVzaG9sZCxcbiAgICAgIGZpbmRBbGxNYXRjaGVzLFxuICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoLFxuICAgICAgaWdub3JlTG9jYXRpb25cbiAgICB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgbGV0IGFsbEluZGljZXMgPSBbXTtcbiAgICBsZXQgdG90YWxTY29yZSA9IDA7XG4gICAgbGV0IGhhc01hdGNoZXMgPSBmYWxzZTtcblxuICAgIHRoaXMuY2h1bmtzLmZvckVhY2goKHsgcGF0dGVybiwgYWxwaGFiZXQsIHN0YXJ0SW5kZXggfSkgPT4ge1xuICAgICAgY29uc3QgeyBpc01hdGNoLCBzY29yZSwgaW5kaWNlcyB9ID0gc2VhcmNoKHRleHQsIHBhdHRlcm4sIGFscGhhYmV0LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbiArIHN0YXJ0SW5kZXgsXG4gICAgICAgIGRpc3RhbmNlLFxuICAgICAgICB0aHJlc2hvbGQsXG4gICAgICAgIGZpbmRBbGxNYXRjaGVzLFxuICAgICAgICBtaW5NYXRjaENoYXJMZW5ndGgsXG4gICAgICAgIGluY2x1ZGVNYXRjaGVzLFxuICAgICAgICBpZ25vcmVMb2NhdGlvblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIGhhc01hdGNoZXMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0b3RhbFNjb3JlICs9IHNjb3JlO1xuXG4gICAgICBpZiAoaXNNYXRjaCAmJiBpbmRpY2VzKSB7XG4gICAgICAgIGFsbEluZGljZXMgPSBbLi4uYWxsSW5kaWNlcywgLi4uaW5kaWNlc107XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgaXNNYXRjaDogaGFzTWF0Y2hlcyxcbiAgICAgIHNjb3JlOiBoYXNNYXRjaGVzID8gdG90YWxTY29yZSAvIHRoaXMuY2h1bmtzLmxlbmd0aCA6IDFcbiAgICB9O1xuXG4gICAgaWYgKGhhc01hdGNoZXMgJiYgaW5jbHVkZU1hdGNoZXMpIHtcbiAgICAgIHJlc3VsdC5pbmRpY2VzID0gYWxsSW5kaWNlcztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuY2xhc3MgQmFzZU1hdGNoIHtcbiAgY29uc3RydWN0b3IocGF0dGVybikge1xuICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm47XG4gIH1cbiAgc3RhdGljIGlzTXVsdGlNYXRjaChwYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGdldE1hdGNoKHBhdHRlcm4sIHRoaXMubXVsdGlSZWdleClcbiAgfVxuICBzdGF0aWMgaXNTaW5nbGVNYXRjaChwYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGdldE1hdGNoKHBhdHRlcm4sIHRoaXMuc2luZ2xlUmVnZXgpXG4gIH1cbiAgc2VhcmNoKC8qdGV4dCovKSB7fVxufVxuXG5mdW5jdGlvbiBnZXRNYXRjaChwYXR0ZXJuLCBleHApIHtcbiAgY29uc3QgbWF0Y2hlcyA9IHBhdHRlcm4ubWF0Y2goZXhwKTtcbiAgcmV0dXJuIG1hdGNoZXMgPyBtYXRjaGVzWzFdIDogbnVsbFxufVxuXG4vLyBUb2tlbjogJ2ZpbGVcblxuY2xhc3MgRXhhY3RNYXRjaCBleHRlbmRzIEJhc2VNYXRjaCB7XG4gIGNvbnN0cnVjdG9yKHBhdHRlcm4pIHtcbiAgICBzdXBlcihwYXR0ZXJuKTtcbiAgfVxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuICdleGFjdCdcbiAgfVxuICBzdGF0aWMgZ2V0IG11bHRpUmVnZXgoKSB7XG4gICAgcmV0dXJuIC9ePVwiKC4qKVwiJC9cbiAgfVxuICBzdGF0aWMgZ2V0IHNpbmdsZVJlZ2V4KCkge1xuICAgIHJldHVybiAvXj0oLiopJC9cbiAgfVxuICBzZWFyY2godGV4dCkge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSB0ZXh0ID09PSB0aGlzLnBhdHRlcm47XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNNYXRjaCxcbiAgICAgIHNjb3JlOiBpc01hdGNoID8gMCA6IDEsXG4gICAgICBpbmRpY2VzOiBbMCwgdGhpcy5wYXR0ZXJuLmxlbmd0aCAtIDFdXG4gICAgfVxuICB9XG59XG5cbi8vIFRva2VuOiAhZmlyZVxuXG5jbGFzcyBJbnZlcnNlRXhhY3RNYXRjaCBleHRlbmRzIEJhc2VNYXRjaCB7XG4gIGNvbnN0cnVjdG9yKHBhdHRlcm4pIHtcbiAgICBzdXBlcihwYXR0ZXJuKTtcbiAgfVxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuICdpbnZlcnNlLWV4YWN0J1xuICB9XG4gIHN0YXRpYyBnZXQgbXVsdGlSZWdleCgpIHtcbiAgICByZXR1cm4gL14hXCIoLiopXCIkL1xuICB9XG4gIHN0YXRpYyBnZXQgc2luZ2xlUmVnZXgoKSB7XG4gICAgcmV0dXJuIC9eISguKikkL1xuICB9XG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgY29uc3QgaW5kZXggPSB0ZXh0LmluZGV4T2YodGhpcy5wYXR0ZXJuKTtcbiAgICBjb25zdCBpc01hdGNoID0gaW5kZXggPT09IC0xO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTWF0Y2gsXG4gICAgICBzY29yZTogaXNNYXRjaCA/IDAgOiAxLFxuICAgICAgaW5kaWNlczogWzAsIHRleHQubGVuZ3RoIC0gMV1cbiAgICB9XG4gIH1cbn1cblxuLy8gVG9rZW46IF5maWxlXG5cbmNsYXNzIFByZWZpeEV4YWN0TWF0Y2ggZXh0ZW5kcyBCYXNlTWF0Y2gge1xuICBjb25zdHJ1Y3RvcihwYXR0ZXJuKSB7XG4gICAgc3VwZXIocGF0dGVybik7XG4gIH1cbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAncHJlZml4LWV4YWN0J1xuICB9XG4gIHN0YXRpYyBnZXQgbXVsdGlSZWdleCgpIHtcbiAgICByZXR1cm4gL15cXF5cIiguKilcIiQvXG4gIH1cbiAgc3RhdGljIGdldCBzaW5nbGVSZWdleCgpIHtcbiAgICByZXR1cm4gL15cXF4oLiopJC9cbiAgfVxuICBzZWFyY2godGV4dCkge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSB0ZXh0LnN0YXJ0c1dpdGgodGhpcy5wYXR0ZXJuKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpc01hdGNoLFxuICAgICAgc2NvcmU6IGlzTWF0Y2ggPyAwIDogMSxcbiAgICAgIGluZGljZXM6IFswLCB0aGlzLnBhdHRlcm4ubGVuZ3RoIC0gMV1cbiAgICB9XG4gIH1cbn1cblxuLy8gVG9rZW46ICFeZmlyZVxuXG5jbGFzcyBJbnZlcnNlUHJlZml4RXhhY3RNYXRjaCBleHRlbmRzIEJhc2VNYXRjaCB7XG4gIGNvbnN0cnVjdG9yKHBhdHRlcm4pIHtcbiAgICBzdXBlcihwYXR0ZXJuKTtcbiAgfVxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuICdpbnZlcnNlLXByZWZpeC1leGFjdCdcbiAgfVxuICBzdGF0aWMgZ2V0IG11bHRpUmVnZXgoKSB7XG4gICAgcmV0dXJuIC9eIVxcXlwiKC4qKVwiJC9cbiAgfVxuICBzdGF0aWMgZ2V0IHNpbmdsZVJlZ2V4KCkge1xuICAgIHJldHVybiAvXiFcXF4oLiopJC9cbiAgfVxuICBzZWFyY2godGV4dCkge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSAhdGV4dC5zdGFydHNXaXRoKHRoaXMucGF0dGVybik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNNYXRjaCxcbiAgICAgIHNjb3JlOiBpc01hdGNoID8gMCA6IDEsXG4gICAgICBpbmRpY2VzOiBbMCwgdGV4dC5sZW5ndGggLSAxXVxuICAgIH1cbiAgfVxufVxuXG4vLyBUb2tlbjogLmZpbGUkXG5cbmNsYXNzIFN1ZmZpeEV4YWN0TWF0Y2ggZXh0ZW5kcyBCYXNlTWF0Y2gge1xuICBjb25zdHJ1Y3RvcihwYXR0ZXJuKSB7XG4gICAgc3VwZXIocGF0dGVybik7XG4gIH1cbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAnc3VmZml4LWV4YWN0J1xuICB9XG4gIHN0YXRpYyBnZXQgbXVsdGlSZWdleCgpIHtcbiAgICByZXR1cm4gL15cIiguKilcIlxcJCQvXG4gIH1cbiAgc3RhdGljIGdldCBzaW5nbGVSZWdleCgpIHtcbiAgICByZXR1cm4gL14oLiopXFwkJC9cbiAgfVxuICBzZWFyY2godGV4dCkge1xuICAgIGNvbnN0IGlzTWF0Y2ggPSB0ZXh0LmVuZHNXaXRoKHRoaXMucGF0dGVybik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNNYXRjaCxcbiAgICAgIHNjb3JlOiBpc01hdGNoID8gMCA6IDEsXG4gICAgICBpbmRpY2VzOiBbdGV4dC5sZW5ndGggLSB0aGlzLnBhdHRlcm4ubGVuZ3RoLCB0ZXh0Lmxlbmd0aCAtIDFdXG4gICAgfVxuICB9XG59XG5cbi8vIFRva2VuOiAhLmZpbGUkXG5cbmNsYXNzIEludmVyc2VTdWZmaXhFeGFjdE1hdGNoIGV4dGVuZHMgQmFzZU1hdGNoIHtcbiAgY29uc3RydWN0b3IocGF0dGVybikge1xuICAgIHN1cGVyKHBhdHRlcm4pO1xuICB9XG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gJ2ludmVyc2Utc3VmZml4LWV4YWN0J1xuICB9XG4gIHN0YXRpYyBnZXQgbXVsdGlSZWdleCgpIHtcbiAgICByZXR1cm4gL14hXCIoLiopXCJcXCQkL1xuICB9XG4gIHN0YXRpYyBnZXQgc2luZ2xlUmVnZXgoKSB7XG4gICAgcmV0dXJuIC9eISguKilcXCQkL1xuICB9XG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgY29uc3QgaXNNYXRjaCA9ICF0ZXh0LmVuZHNXaXRoKHRoaXMucGF0dGVybik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTWF0Y2gsXG4gICAgICBzY29yZTogaXNNYXRjaCA/IDAgOiAxLFxuICAgICAgaW5kaWNlczogWzAsIHRleHQubGVuZ3RoIC0gMV1cbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgRnV6enlNYXRjaCBleHRlbmRzIEJhc2VNYXRjaCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhdHRlcm4sXG4gICAge1xuICAgICAgbG9jYXRpb24gPSBDb25maWcubG9jYXRpb24sXG4gICAgICB0aHJlc2hvbGQgPSBDb25maWcudGhyZXNob2xkLFxuICAgICAgZGlzdGFuY2UgPSBDb25maWcuZGlzdGFuY2UsXG4gICAgICBpbmNsdWRlTWF0Y2hlcyA9IENvbmZpZy5pbmNsdWRlTWF0Y2hlcyxcbiAgICAgIGZpbmRBbGxNYXRjaGVzID0gQ29uZmlnLmZpbmRBbGxNYXRjaGVzLFxuICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoID0gQ29uZmlnLm1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgIGlzQ2FzZVNlbnNpdGl2ZSA9IENvbmZpZy5pc0Nhc2VTZW5zaXRpdmUsXG4gICAgICBpZ25vcmVMb2NhdGlvbiA9IENvbmZpZy5pZ25vcmVMb2NhdGlvblxuICAgIH0gPSB7fVxuICApIHtcbiAgICBzdXBlcihwYXR0ZXJuKTtcbiAgICB0aGlzLl9iaXRhcFNlYXJjaCA9IG5ldyBCaXRhcFNlYXJjaChwYXR0ZXJuLCB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIHRocmVzaG9sZCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgaW5jbHVkZU1hdGNoZXMsXG4gICAgICBmaW5kQWxsTWF0Y2hlcyxcbiAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgIGlzQ2FzZVNlbnNpdGl2ZSxcbiAgICAgIGlnbm9yZUxvY2F0aW9uXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAnZnV6enknXG4gIH1cbiAgc3RhdGljIGdldCBtdWx0aVJlZ2V4KCkge1xuICAgIHJldHVybiAvXlwiKC4qKVwiJC9cbiAgfVxuICBzdGF0aWMgZ2V0IHNpbmdsZVJlZ2V4KCkge1xuICAgIHJldHVybiAvXiguKikkL1xuICB9XG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2JpdGFwU2VhcmNoLnNlYXJjaEluKHRleHQpXG4gIH1cbn1cblxuLy8gVG9rZW46ICdmaWxlXG5cbmNsYXNzIEluY2x1ZGVNYXRjaCBleHRlbmRzIEJhc2VNYXRjaCB7XG4gIGNvbnN0cnVjdG9yKHBhdHRlcm4pIHtcbiAgICBzdXBlcihwYXR0ZXJuKTtcbiAgfVxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuICdpbmNsdWRlJ1xuICB9XG4gIHN0YXRpYyBnZXQgbXVsdGlSZWdleCgpIHtcbiAgICByZXR1cm4gL14nXCIoLiopXCIkL1xuICB9XG4gIHN0YXRpYyBnZXQgc2luZ2xlUmVnZXgoKSB7XG4gICAgcmV0dXJuIC9eJyguKikkL1xuICB9XG4gIHNlYXJjaCh0ZXh0KSB7XG4gICAgbGV0IGxvY2F0aW9uID0gMDtcbiAgICBsZXQgaW5kZXg7XG5cbiAgICBjb25zdCBpbmRpY2VzID0gW107XG4gICAgY29uc3QgcGF0dGVybkxlbiA9IHRoaXMucGF0dGVybi5sZW5ndGg7XG5cbiAgICAvLyBHZXQgYWxsIGV4YWN0IG1hdGNoZXNcbiAgICB3aGlsZSAoKGluZGV4ID0gdGV4dC5pbmRleE9mKHRoaXMucGF0dGVybiwgbG9jYXRpb24pKSA+IC0xKSB7XG4gICAgICBsb2NhdGlvbiA9IGluZGV4ICsgcGF0dGVybkxlbjtcbiAgICAgIGluZGljZXMucHVzaChbaW5kZXgsIGxvY2F0aW9uIC0gMV0pO1xuICAgIH1cblxuICAgIGNvbnN0IGlzTWF0Y2ggPSAhIWluZGljZXMubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTWF0Y2gsXG4gICAgICBzY29yZTogaXNNYXRjaCA/IDAgOiAxLFxuICAgICAgaW5kaWNlc1xuICAgIH1cbiAgfVxufVxuXG4vLyDinZdPcmRlciBpcyBpbXBvcnRhbnQuIERPIE5PVCBDSEFOR0UuXG5jb25zdCBzZWFyY2hlcnMgPSBbXG4gIEV4YWN0TWF0Y2gsXG4gIEluY2x1ZGVNYXRjaCxcbiAgUHJlZml4RXhhY3RNYXRjaCxcbiAgSW52ZXJzZVByZWZpeEV4YWN0TWF0Y2gsXG4gIEludmVyc2VTdWZmaXhFeGFjdE1hdGNoLFxuICBTdWZmaXhFeGFjdE1hdGNoLFxuICBJbnZlcnNlRXhhY3RNYXRjaCxcbiAgRnV6enlNYXRjaFxuXTtcblxuY29uc3Qgc2VhcmNoZXJzTGVuID0gc2VhcmNoZXJzLmxlbmd0aDtcblxuLy8gUmVnZXggdG8gc3BsaXQgYnkgc3BhY2VzLCBidXQga2VlcCBhbnl0aGluZyBpbiBxdW90ZXMgdG9nZXRoZXJcbmNvbnN0IFNQQUNFX1JFID0gLyArKD89KD86W15cXFwiXSpcXFwiW15cXFwiXSpcXFwiKSpbXlxcXCJdKiQpLztcbmNvbnN0IE9SX1RPS0VOID0gJ3wnO1xuXG4vLyBSZXR1cm4gYSAyRCBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcXVlcnksIGZvciBzaW1wbGVyIHBhcnNpbmcuXG4vLyBFeGFtcGxlOlxuLy8gXCJeY29yZSBnbyQgfCByYiQgfCBweSQgeHkkXCIgPT4gW1tcIl5jb3JlXCIsIFwiZ28kXCJdLCBbXCJyYiRcIl0sIFtcInB5JFwiLCBcInh5JFwiXV1cbmZ1bmN0aW9uIHBhcnNlUXVlcnkocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBwYXR0ZXJuLnNwbGl0KE9SX1RPS0VOKS5tYXAoKGl0ZW0pID0+IHtcbiAgICBsZXQgcXVlcnkgPSBpdGVtXG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoU1BBQ0VfUkUpXG4gICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtICYmICEhaXRlbS50cmltKCkpO1xuXG4gICAgbGV0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcXVlcnkubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5SXRlbSA9IHF1ZXJ5W2ldO1xuXG4gICAgICAvLyAxLiBIYW5kbGUgbXVsdGlwbGUgcXVlcnkgbWF0Y2ggKGkuZSwgb25jZSB0aGF0IGFyZSBxdW90ZWQsIGxpa2UgYFwiaGVsbG8gd29ybGRcImApXG4gICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgIGxldCBpZHggPSAtMTtcbiAgICAgIHdoaWxlICghZm91bmQgJiYgKytpZHggPCBzZWFyY2hlcnNMZW4pIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoZXIgPSBzZWFyY2hlcnNbaWR4XTtcbiAgICAgICAgbGV0IHRva2VuID0gc2VhcmNoZXIuaXNNdWx0aU1hdGNoKHF1ZXJ5SXRlbSk7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChuZXcgc2VhcmNoZXIodG9rZW4sIG9wdGlvbnMpKTtcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIuIEhhbmRsZSBzaW5nbGUgcXVlcnkgbWF0Y2hlcyAoaS5lLCBvbmNlIHRoYXQgYXJlICpub3QqIHF1b3RlZClcbiAgICAgIGlkeCA9IC0xO1xuICAgICAgd2hpbGUgKCsraWR4IDwgc2VhcmNoZXJzTGVuKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaGVyID0gc2VhcmNoZXJzW2lkeF07XG4gICAgICAgIGxldCB0b2tlbiA9IHNlYXJjaGVyLmlzU2luZ2xlTWF0Y2gocXVlcnlJdGVtKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKG5ldyBzZWFyY2hlcih0b2tlbiwgb3B0aW9ucykpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9KVxufVxuXG4vLyBUaGVzZSBleHRlbmRlZCBtYXRjaGVycyBjYW4gcmV0dXJuIGFuIGFycmF5IG9mIG1hdGNoZXMsIGFzIG9wcG9zZWRcbi8vIHRvIGEgc2luZ2wgbWF0Y2hcbmNvbnN0IE11bHRpTWF0Y2hTZXQgPSBuZXcgU2V0KFtGdXp6eU1hdGNoLnR5cGUsIEluY2x1ZGVNYXRjaC50eXBlXSk7XG5cbi8qKlxuICogQ29tbWFuZC1saWtlIHNlYXJjaGluZ1xuICogPT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEdpdmVuIG11bHRpcGxlIHNlYXJjaCB0ZXJtcyBkZWxpbWl0ZWQgYnkgc3BhY2VzLmUuZy4gYF5qc2NyaXB0IC5weXRob24kIHJ1YnkgIWphdmFgLFxuICogc2VhcmNoIGluIGEgZ2l2ZW4gdGV4dC5cbiAqXG4gKiBTZWFyY2ggc3ludGF4OlxuICpcbiAqIHwgVG9rZW4gICAgICAgfCBNYXRjaCB0eXBlICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAqIHwgYGpzY3JpcHRgICAgfCBmdXp6eS1tYXRjaCAgICAgICAgICAgICAgICB8IEl0ZW1zIHRoYXQgZnV6enkgbWF0Y2ggYGpzY3JpcHRgICAgICAgIHxcbiAqIHwgYD1zY2hlbWVgICAgfCBleGFjdC1tYXRjaCAgICAgICAgICAgICAgICB8IEl0ZW1zIHRoYXQgYXJlIGBzY2hlbWVgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCdweXRob25gICAgfCBpbmNsdWRlLW1hdGNoICAgICAgICAgICAgICB8IEl0ZW1zIHRoYXQgaW5jbHVkZSBgcHl0aG9uYCAgICAgICAgICAgIHxcbiAqIHwgYCFydWJ5YCAgICAgfCBpbnZlcnNlLWV4YWN0LW1hdGNoICAgICAgICB8IEl0ZW1zIHRoYXQgZG8gbm90IGluY2x1ZGUgYHJ1YnlgICAgICAgIHxcbiAqIHwgYF5qYXZhYCAgICAgfCBwcmVmaXgtZXhhY3QtbWF0Y2ggICAgICAgICB8IEl0ZW1zIHRoYXQgc3RhcnQgd2l0aCBgamF2YWAgICAgICAgICAgIHxcbiAqIHwgYCFeZWFybGFuZ2AgfCBpbnZlcnNlLXByZWZpeC1leGFjdC1tYXRjaCB8IEl0ZW1zIHRoYXQgZG8gbm90IHN0YXJ0IHdpdGggYGVhcmxhbmdgIHxcbiAqIHwgYC5qcyRgICAgICAgfCBzdWZmaXgtZXhhY3QtbWF0Y2ggICAgICAgICB8IEl0ZW1zIHRoYXQgZW5kIHdpdGggYC5qc2AgICAgICAgICAgICAgIHxcbiAqIHwgYCEuZ28kYCAgICAgfCBpbnZlcnNlLXN1ZmZpeC1leGFjdC1tYXRjaCB8IEl0ZW1zIHRoYXQgZG8gbm90IGVuZCB3aXRoIGAuZ29gICAgICAgIHxcbiAqXG4gKiBBIHNpbmdsZSBwaXBlIGNoYXJhY3RlciBhY3RzIGFzIGFuIE9SIG9wZXJhdG9yLiBGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZ1xuICogcXVlcnkgbWF0Y2hlcyBlbnRyaWVzIHRoYXQgc3RhcnQgd2l0aCBgY29yZWAgYW5kIGVuZCB3aXRoIGVpdGhlcmBnb2AsIGByYmAsXG4gKiBvcmBweWAuXG4gKlxuICogYGBgXG4gKiBeY29yZSBnbyQgfCByYiQgfCBweSRcbiAqIGBgYFxuICovXG5jbGFzcyBFeHRlbmRlZFNlYXJjaCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhdHRlcm4sXG4gICAge1xuICAgICAgaXNDYXNlU2Vuc2l0aXZlID0gQ29uZmlnLmlzQ2FzZVNlbnNpdGl2ZSxcbiAgICAgIGluY2x1ZGVNYXRjaGVzID0gQ29uZmlnLmluY2x1ZGVNYXRjaGVzLFxuICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoID0gQ29uZmlnLm1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgIGlnbm9yZUxvY2F0aW9uID0gQ29uZmlnLmlnbm9yZUxvY2F0aW9uLFxuICAgICAgZmluZEFsbE1hdGNoZXMgPSBDb25maWcuZmluZEFsbE1hdGNoZXMsXG4gICAgICBsb2NhdGlvbiA9IENvbmZpZy5sb2NhdGlvbixcbiAgICAgIHRocmVzaG9sZCA9IENvbmZpZy50aHJlc2hvbGQsXG4gICAgICBkaXN0YW5jZSA9IENvbmZpZy5kaXN0YW5jZVxuICAgIH0gPSB7fVxuICApIHtcbiAgICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpc0Nhc2VTZW5zaXRpdmUsXG4gICAgICBpbmNsdWRlTWF0Y2hlcyxcbiAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgIGZpbmRBbGxNYXRjaGVzLFxuICAgICAgaWdub3JlTG9jYXRpb24sXG4gICAgICBsb2NhdGlvbixcbiAgICAgIHRocmVzaG9sZCxcbiAgICAgIGRpc3RhbmNlXG4gICAgfTtcblxuICAgIHRoaXMucGF0dGVybiA9IGlzQ2FzZVNlbnNpdGl2ZSA/IHBhdHRlcm4gOiBwYXR0ZXJuLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5xdWVyeSA9IHBhcnNlUXVlcnkodGhpcy5wYXR0ZXJuLCB0aGlzLm9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGNvbmRpdGlvbihfLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMudXNlRXh0ZW5kZWRTZWFyY2hcbiAgfVxuXG4gIHNlYXJjaEluKHRleHQpIHtcbiAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnk7XG5cbiAgICBpZiAoIXF1ZXJ5KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc01hdGNoOiBmYWxzZSxcbiAgICAgICAgc2NvcmU6IDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7IGluY2x1ZGVNYXRjaGVzLCBpc0Nhc2VTZW5zaXRpdmUgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIHRleHQgPSBpc0Nhc2VTZW5zaXRpdmUgPyB0ZXh0IDogdGV4dC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgbGV0IG51bU1hdGNoZXMgPSAwO1xuICAgIGxldCBhbGxJbmRpY2VzID0gW107XG4gICAgbGV0IHRvdGFsU2NvcmUgPSAwO1xuXG4gICAgLy8gT1JzXG4gICAgZm9yIChsZXQgaSA9IDAsIHFMZW4gPSBxdWVyeS5sZW5ndGg7IGkgPCBxTGVuOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNlYXJjaGVycyA9IHF1ZXJ5W2ldO1xuXG4gICAgICAvLyBSZXNldCBpbmRpY2VzXG4gICAgICBhbGxJbmRpY2VzLmxlbmd0aCA9IDA7XG4gICAgICBudW1NYXRjaGVzID0gMDtcblxuICAgICAgLy8gQU5Ec1xuICAgICAgZm9yIChsZXQgaiA9IDAsIHBMZW4gPSBzZWFyY2hlcnMubGVuZ3RoOyBqIDwgcExlbjsgaiArPSAxKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaGVyID0gc2VhcmNoZXJzW2pdO1xuICAgICAgICBjb25zdCB7IGlzTWF0Y2gsIGluZGljZXMsIHNjb3JlIH0gPSBzZWFyY2hlci5zZWFyY2godGV4dCk7XG5cbiAgICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgICBudW1NYXRjaGVzICs9IDE7XG4gICAgICAgICAgdG90YWxTY29yZSArPSBzY29yZTtcbiAgICAgICAgICBpZiAoaW5jbHVkZU1hdGNoZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBzZWFyY2hlci5jb25zdHJ1Y3Rvci50eXBlO1xuICAgICAgICAgICAgaWYgKE11bHRpTWF0Y2hTZXQuaGFzKHR5cGUpKSB7XG4gICAgICAgICAgICAgIGFsbEluZGljZXMgPSBbLi4uYWxsSW5kaWNlcywgLi4uaW5kaWNlc107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhbGxJbmRpY2VzLnB1c2goaW5kaWNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvdGFsU2NvcmUgPSAwO1xuICAgICAgICAgIG51bU1hdGNoZXMgPSAwO1xuICAgICAgICAgIGFsbEluZGljZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9SIGNvbmRpdGlvbiwgc28gaWYgVFJVRSwgcmV0dXJuXG4gICAgICBpZiAobnVtTWF0Y2hlcykge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgIGlzTWF0Y2g6IHRydWUsXG4gICAgICAgICAgc2NvcmU6IHRvdGFsU2NvcmUgLyBudW1NYXRjaGVzXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGluY2x1ZGVNYXRjaGVzKSB7XG4gICAgICAgICAgcmVzdWx0LmluZGljZXMgPSBhbGxJbmRpY2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vdGhpbmcgd2FzIG1hdGNoZWRcbiAgICByZXR1cm4ge1xuICAgICAgaXNNYXRjaDogZmFsc2UsXG4gICAgICBzY29yZTogMVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCByZWdpc3RlcmVkU2VhcmNoZXJzID0gW107XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyKC4uLmFyZ3MpIHtcbiAgcmVnaXN0ZXJlZFNlYXJjaGVycy5wdXNoKC4uLmFyZ3MpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hlcihwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZWdpc3RlcmVkU2VhcmNoZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgbGV0IHNlYXJjaGVyQ2xhc3MgPSByZWdpc3RlcmVkU2VhcmNoZXJzW2ldO1xuICAgIGlmIChzZWFyY2hlckNsYXNzLmNvbmRpdGlvbihwYXR0ZXJuLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIG5ldyBzZWFyY2hlckNsYXNzKHBhdHRlcm4sIG9wdGlvbnMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBCaXRhcFNlYXJjaChwYXR0ZXJuLCBvcHRpb25zKVxufVxuXG5jb25zdCBMb2dpY2FsT3BlcmF0b3IgPSB7XG4gIEFORDogJyRhbmQnLFxuICBPUjogJyRvcidcbn07XG5cbmNvbnN0IEtleVR5cGUgPSB7XG4gIFBBVEg6ICckcGF0aCcsXG4gIFBBVFRFUk46ICckdmFsJ1xufTtcblxuY29uc3QgaXNFeHByZXNzaW9uID0gKHF1ZXJ5KSA9PlxuICAhIShxdWVyeVtMb2dpY2FsT3BlcmF0b3IuQU5EXSB8fCBxdWVyeVtMb2dpY2FsT3BlcmF0b3IuT1JdKTtcblxuY29uc3QgaXNQYXRoID0gKHF1ZXJ5KSA9PiAhIXF1ZXJ5W0tleVR5cGUuUEFUSF07XG5cbmNvbnN0IGlzTGVhZiA9IChxdWVyeSkgPT5cbiAgIWlzQXJyYXkocXVlcnkpICYmIGlzT2JqZWN0KHF1ZXJ5KSAmJiAhaXNFeHByZXNzaW9uKHF1ZXJ5KTtcblxuY29uc3QgY29udmVydFRvRXhwbGljaXQgPSAocXVlcnkpID0+ICh7XG4gIFtMb2dpY2FsT3BlcmF0b3IuQU5EXTogT2JqZWN0LmtleXMocXVlcnkpLm1hcCgoa2V5KSA9PiAoe1xuICAgIFtrZXldOiBxdWVyeVtrZXldXG4gIH0pKVxufSk7XG5cbi8vIFdoZW4gYGF1dG9gIGlzIGB0cnVlYCwgdGhlIHBhcnNlIGZ1bmN0aW9uIHdpbGwgaW5mZXIgYW5kIGluaXRpYWxpemUgYW5kIGFkZFxuLy8gdGhlIGFwcHJvcHJpYXRlIGBTZWFyY2hlcmAgaW5zdGFuY2VcbmZ1bmN0aW9uIHBhcnNlKHF1ZXJ5LCBvcHRpb25zLCB7IGF1dG8gPSB0cnVlIH0gPSB7fSkge1xuICBjb25zdCBuZXh0ID0gKHF1ZXJ5KSA9PiB7XG4gICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhxdWVyeSk7XG5cbiAgICBjb25zdCBpc1F1ZXJ5UGF0aCA9IGlzUGF0aChxdWVyeSk7XG5cbiAgICBpZiAoIWlzUXVlcnlQYXRoICYmIGtleXMubGVuZ3RoID4gMSAmJiAhaXNFeHByZXNzaW9uKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIG5leHQoY29udmVydFRvRXhwbGljaXQocXVlcnkpKVxuICAgIH1cblxuICAgIGlmIChpc0xlYWYocXVlcnkpKSB7XG4gICAgICBjb25zdCBrZXkgPSBpc1F1ZXJ5UGF0aCA/IHF1ZXJ5W0tleVR5cGUuUEFUSF0gOiBrZXlzWzBdO1xuXG4gICAgICBjb25zdCBwYXR0ZXJuID0gaXNRdWVyeVBhdGggPyBxdWVyeVtLZXlUeXBlLlBBVFRFUk5dIDogcXVlcnlba2V5XTtcblxuICAgICAgaWYgKCFpc1N0cmluZyhwYXR0ZXJuKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTE9HSUNBTF9TRUFSQ0hfSU5WQUxJRF9RVUVSWV9GT1JfS0VZKGtleSkpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAga2V5SWQ6IGNyZWF0ZUtleUlkKGtleSksXG4gICAgICAgIHBhdHRlcm5cbiAgICAgIH07XG5cbiAgICAgIGlmIChhdXRvKSB7XG4gICAgICAgIG9iai5zZWFyY2hlciA9IGNyZWF0ZVNlYXJjaGVyKHBhdHRlcm4sIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqXG4gICAgfVxuXG4gICAgbGV0IG5vZGUgPSB7XG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgICBvcGVyYXRvcjoga2V5c1swXVxuICAgIH07XG5cbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBxdWVyeVtrZXldO1xuXG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgIG5vZGUuY2hpbGRyZW4ucHVzaChuZXh0KGl0ZW0pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm9kZVxuICB9O1xuXG4gIGlmICghaXNFeHByZXNzaW9uKHF1ZXJ5KSkge1xuICAgIHF1ZXJ5ID0gY29udmVydFRvRXhwbGljaXQocXVlcnkpO1xuICB9XG5cbiAgcmV0dXJuIG5leHQocXVlcnkpXG59XG5cbi8vIFByYWN0aWNhbCBzY29yaW5nIGZ1bmN0aW9uXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUoXG4gIHJlc3VsdHMsXG4gIHsgaWdub3JlRmllbGROb3JtID0gQ29uZmlnLmlnbm9yZUZpZWxkTm9ybSB9XG4pIHtcbiAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQpID0+IHtcbiAgICBsZXQgdG90YWxTY29yZSA9IDE7XG5cbiAgICByZXN1bHQubWF0Y2hlcy5mb3JFYWNoKCh7IGtleSwgbm9ybSwgc2NvcmUgfSkgPT4ge1xuICAgICAgY29uc3Qgd2VpZ2h0ID0ga2V5ID8ga2V5LndlaWdodCA6IG51bGw7XG5cbiAgICAgIHRvdGFsU2NvcmUgKj0gTWF0aC5wb3coXG4gICAgICAgIHNjb3JlID09PSAwICYmIHdlaWdodCA/IE51bWJlci5FUFNJTE9OIDogc2NvcmUsXG4gICAgICAgICh3ZWlnaHQgfHwgMSkgKiAoaWdub3JlRmllbGROb3JtID8gMSA6IG5vcm0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmVzdWx0LnNjb3JlID0gdG90YWxTY29yZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1hdGNoZXMocmVzdWx0LCBkYXRhKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSByZXN1bHQubWF0Y2hlcztcbiAgZGF0YS5tYXRjaGVzID0gW107XG5cbiAgaWYgKCFpc0RlZmluZWQobWF0Y2hlcykpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gpID0+IHtcbiAgICBpZiAoIWlzRGVmaW5lZChtYXRjaC5pbmRpY2VzKSB8fCAhbWF0Y2guaW5kaWNlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHsgaW5kaWNlcywgdmFsdWUgfSA9IG1hdGNoO1xuXG4gICAgbGV0IG9iaiA9IHtcbiAgICAgIGluZGljZXMsXG4gICAgICB2YWx1ZVxuICAgIH07XG5cbiAgICBpZiAobWF0Y2gua2V5KSB7XG4gICAgICBvYmoua2V5ID0gbWF0Y2gua2V5LnNyYztcbiAgICB9XG5cbiAgICBpZiAobWF0Y2guaWR4ID4gLTEpIHtcbiAgICAgIG9iai5yZWZJbmRleCA9IG1hdGNoLmlkeDtcbiAgICB9XG5cbiAgICBkYXRhLm1hdGNoZXMucHVzaChvYmopO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU2NvcmUocmVzdWx0LCBkYXRhKSB7XG4gIGRhdGEuc2NvcmUgPSByZXN1bHQuc2NvcmU7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChcbiAgcmVzdWx0cyxcbiAgZG9jcyxcbiAge1xuICAgIGluY2x1ZGVNYXRjaGVzID0gQ29uZmlnLmluY2x1ZGVNYXRjaGVzLFxuICAgIGluY2x1ZGVTY29yZSA9IENvbmZpZy5pbmNsdWRlU2NvcmVcbiAgfSA9IHt9XG4pIHtcbiAgY29uc3QgdHJhbnNmb3JtZXJzID0gW107XG5cbiAgaWYgKGluY2x1ZGVNYXRjaGVzKSB0cmFuc2Zvcm1lcnMucHVzaCh0cmFuc2Zvcm1NYXRjaGVzKTtcbiAgaWYgKGluY2x1ZGVTY29yZSkgdHJhbnNmb3JtZXJzLnB1c2godHJhbnNmb3JtU2NvcmUpO1xuXG4gIHJldHVybiByZXN1bHRzLm1hcCgocmVzdWx0KSA9PiB7XG4gICAgY29uc3QgeyBpZHggfSA9IHJlc3VsdDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBpdGVtOiBkb2NzW2lkeF0sXG4gICAgICByZWZJbmRleDogaWR4XG4gICAgfTtcblxuICAgIGlmICh0cmFuc2Zvcm1lcnMubGVuZ3RoKSB7XG4gICAgICB0cmFuc2Zvcm1lcnMuZm9yRWFjaCgodHJhbnNmb3JtZXIpID0+IHtcbiAgICAgICAgdHJhbnNmb3JtZXIocmVzdWx0LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhXG4gIH0pXG59XG5cbmNsYXNzIEZ1c2Uge1xuICBjb25zdHJ1Y3Rvcihkb2NzLCBvcHRpb25zID0ge30sIGluZGV4KSB7XG4gICAgdGhpcy5vcHRpb25zID0geyAuLi5Db25maWcsIC4uLm9wdGlvbnMgfTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMub3B0aW9ucy51c2VFeHRlbmRlZFNlYXJjaCAmJlxuICAgICAgIXRydWVcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihFWFRFTkRFRF9TRUFSQ0hfVU5BVkFJTEFCTEUpXG4gICAgfVxuXG4gICAgdGhpcy5fa2V5U3RvcmUgPSBuZXcgS2V5U3RvcmUodGhpcy5vcHRpb25zLmtleXMpO1xuXG4gICAgdGhpcy5zZXRDb2xsZWN0aW9uKGRvY3MsIGluZGV4KTtcbiAgfVxuXG4gIHNldENvbGxlY3Rpb24oZG9jcywgaW5kZXgpIHtcbiAgICB0aGlzLl9kb2NzID0gZG9jcztcblxuICAgIGlmIChpbmRleCAmJiAhKGluZGV4IGluc3RhbmNlb2YgRnVzZUluZGV4KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKElOQ09SUkVDVF9JTkRFWF9UWVBFKVxuICAgIH1cblxuICAgIHRoaXMuX215SW5kZXggPVxuICAgICAgaW5kZXggfHxcbiAgICAgIGNyZWF0ZUluZGV4KHRoaXMub3B0aW9ucy5rZXlzLCB0aGlzLl9kb2NzLCB7XG4gICAgICAgIGdldEZuOiB0aGlzLm9wdGlvbnMuZ2V0Rm4sXG4gICAgICAgIGZpZWxkTm9ybVdlaWdodDogdGhpcy5vcHRpb25zLmZpZWxkTm9ybVdlaWdodFxuICAgICAgfSk7XG4gIH1cblxuICBhZGQoZG9jKSB7XG4gICAgaWYgKCFpc0RlZmluZWQoZG9jKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fZG9jcy5wdXNoKGRvYyk7XG4gICAgdGhpcy5fbXlJbmRleC5hZGQoZG9jKTtcbiAgfVxuXG4gIHJlbW92ZShwcmVkaWNhdGUgPSAoLyogZG9jLCBpZHggKi8pID0+IGZhbHNlKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuX2RvY3MubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGRvYyA9IHRoaXMuX2RvY3NbaV07XG4gICAgICBpZiAocHJlZGljYXRlKGRvYywgaSkpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBdChpKTtcbiAgICAgICAgaSAtPSAxO1xuICAgICAgICBsZW4gLT0gMTtcblxuICAgICAgICByZXN1bHRzLnB1c2goZG9jKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9XG5cbiAgcmVtb3ZlQXQoaWR4KSB7XG4gICAgdGhpcy5fZG9jcy5zcGxpY2UoaWR4LCAxKTtcbiAgICB0aGlzLl9teUluZGV4LnJlbW92ZUF0KGlkeCk7XG4gIH1cblxuICBnZXRJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbXlJbmRleFxuICB9XG5cbiAgc2VhcmNoKHF1ZXJ5LCB7IGxpbWl0ID0gLTEgfSA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgaW5jbHVkZU1hdGNoZXMsXG4gICAgICBpbmNsdWRlU2NvcmUsXG4gICAgICBzaG91bGRTb3J0LFxuICAgICAgc29ydEZuLFxuICAgICAgaWdub3JlRmllbGROb3JtXG4gICAgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIGxldCByZXN1bHRzID0gaXNTdHJpbmcocXVlcnkpXG4gICAgICA/IGlzU3RyaW5nKHRoaXMuX2RvY3NbMF0pXG4gICAgICAgID8gdGhpcy5fc2VhcmNoU3RyaW5nTGlzdChxdWVyeSlcbiAgICAgICAgOiB0aGlzLl9zZWFyY2hPYmplY3RMaXN0KHF1ZXJ5KVxuICAgICAgOiB0aGlzLl9zZWFyY2hMb2dpY2FsKHF1ZXJ5KTtcblxuICAgIGNvbXB1dGVTY29yZShyZXN1bHRzLCB7IGlnbm9yZUZpZWxkTm9ybSB9KTtcblxuICAgIGlmIChzaG91bGRTb3J0KSB7XG4gICAgICByZXN1bHRzLnNvcnQoc29ydEZuKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIobGltaXQpICYmIGxpbWl0ID4gLTEpIHtcbiAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIGxpbWl0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0KHJlc3VsdHMsIHRoaXMuX2RvY3MsIHtcbiAgICAgIGluY2x1ZGVNYXRjaGVzLFxuICAgICAgaW5jbHVkZVNjb3JlXG4gICAgfSlcbiAgfVxuXG4gIF9zZWFyY2hTdHJpbmdMaXN0KHF1ZXJ5KSB7XG4gICAgY29uc3Qgc2VhcmNoZXIgPSBjcmVhdGVTZWFyY2hlcihxdWVyeSwgdGhpcy5vcHRpb25zKTtcbiAgICBjb25zdCB7IHJlY29yZHMgfSA9IHRoaXMuX215SW5kZXg7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIGV2ZXJ5IHN0cmluZyBpbiB0aGUgaW5kZXhcbiAgICByZWNvcmRzLmZvckVhY2goKHsgdjogdGV4dCwgaTogaWR4LCBuOiBub3JtIH0pID0+IHtcbiAgICAgIGlmICghaXNEZWZpbmVkKHRleHQpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGlzTWF0Y2gsIHNjb3JlLCBpbmRpY2VzIH0gPSBzZWFyY2hlci5zZWFyY2hJbih0ZXh0KTtcblxuICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICBpdGVtOiB0ZXh0LFxuICAgICAgICAgIGlkeCxcbiAgICAgICAgICBtYXRjaGVzOiBbeyBzY29yZSwgdmFsdWU6IHRleHQsIG5vcm0sIGluZGljZXMgfV1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9XG5cbiAgX3NlYXJjaExvZ2ljYWwocXVlcnkpIHtcblxuICAgIGNvbnN0IGV4cHJlc3Npb24gPSBwYXJzZShxdWVyeSwgdGhpcy5vcHRpb25zKTtcblxuICAgIGNvbnN0IGV2YWx1YXRlID0gKG5vZGUsIGl0ZW0sIGlkeCkgPT4ge1xuICAgICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIGNvbnN0IHsga2V5SWQsIHNlYXJjaGVyIH0gPSBub2RlO1xuXG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSB0aGlzLl9maW5kTWF0Y2hlcyh7XG4gICAgICAgICAga2V5OiB0aGlzLl9rZXlTdG9yZS5nZXQoa2V5SWQpLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLl9teUluZGV4LmdldFZhbHVlRm9ySXRlbUF0S2V5SWQoaXRlbSwga2V5SWQpLFxuICAgICAgICAgIHNlYXJjaGVyXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWR4LFxuICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICBtYXRjaGVzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBldmFsdWF0ZShjaGlsZCwgaXRlbSwgaWR4KTtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICByZXMucHVzaCguLi5yZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUub3BlcmF0b3IgPT09IExvZ2ljYWxPcGVyYXRvci5BTkQpIHtcbiAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH07XG5cbiAgICBjb25zdCByZWNvcmRzID0gdGhpcy5fbXlJbmRleC5yZWNvcmRzO1xuICAgIGNvbnN0IHJlc3VsdE1hcCA9IHt9O1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcblxuICAgIHJlY29yZHMuZm9yRWFjaCgoeyAkOiBpdGVtLCBpOiBpZHggfSkgPT4ge1xuICAgICAgaWYgKGlzRGVmaW5lZChpdGVtKSkge1xuICAgICAgICBsZXQgZXhwUmVzdWx0cyA9IGV2YWx1YXRlKGV4cHJlc3Npb24sIGl0ZW0sIGlkeCk7XG5cbiAgICAgICAgaWYgKGV4cFJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gRGVkdXBlIHdoZW4gYWRkaW5nXG4gICAgICAgICAgaWYgKCFyZXN1bHRNYXBbaWR4XSkge1xuICAgICAgICAgICAgcmVzdWx0TWFwW2lkeF0gPSB7IGlkeCwgaXRlbSwgbWF0Y2hlczogW10gfTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHRNYXBbaWR4XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV4cFJlc3VsdHMuZm9yRWFjaCgoeyBtYXRjaGVzIH0pID0+IHtcbiAgICAgICAgICAgIHJlc3VsdE1hcFtpZHhdLm1hdGNoZXMucHVzaCguLi5tYXRjaGVzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHNcbiAgfVxuXG4gIF9zZWFyY2hPYmplY3RMaXN0KHF1ZXJ5KSB7XG4gICAgY29uc3Qgc2VhcmNoZXIgPSBjcmVhdGVTZWFyY2hlcihxdWVyeSwgdGhpcy5vcHRpb25zKTtcbiAgICBjb25zdCB7IGtleXMsIHJlY29yZHMgfSA9IHRoaXMuX215SW5kZXg7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgLy8gTGlzdCBpcyBBcnJheTxPYmplY3Q+XG4gICAgcmVjb3Jkcy5mb3JFYWNoKCh7ICQ6IGl0ZW0sIGk6IGlkeCB9KSA9PiB7XG4gICAgICBpZiAoIWlzRGVmaW5lZChpdGVtKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICAgICAgLy8gSXRlcmF0ZSBvdmVyIGV2ZXJ5IGtleSAoaS5lLCBwYXRoKSwgYW5kIGZldGNoIHRoZSB2YWx1ZSBhdCB0aGF0IGtleVxuICAgICAga2V5cy5mb3JFYWNoKChrZXksIGtleUluZGV4KSA9PiB7XG4gICAgICAgIG1hdGNoZXMucHVzaChcbiAgICAgICAgICAuLi50aGlzLl9maW5kTWF0Y2hlcyh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZTogaXRlbVtrZXlJbmRleF0sXG4gICAgICAgICAgICBzZWFyY2hlclxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgaWR4LFxuICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgbWF0Y2hlc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHRzXG4gIH1cbiAgX2ZpbmRNYXRjaGVzKHsga2V5LCB2YWx1ZSwgc2VhcmNoZXIgfSkge1xuICAgIGlmICghaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFsdWUuZm9yRWFjaCgoeyB2OiB0ZXh0LCBpOiBpZHgsIG46IG5vcm0gfSkgPT4ge1xuICAgICAgICBpZiAoIWlzRGVmaW5lZCh0ZXh0KSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBpc01hdGNoLCBzY29yZSwgaW5kaWNlcyB9ID0gc2VhcmNoZXIuc2VhcmNoSW4odGV4dCk7XG5cbiAgICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgc2NvcmUsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZTogdGV4dCxcbiAgICAgICAgICAgIGlkeCxcbiAgICAgICAgICAgIG5vcm0sXG4gICAgICAgICAgICBpbmRpY2VzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IHY6IHRleHQsIG46IG5vcm0gfSA9IHZhbHVlO1xuXG4gICAgICBjb25zdCB7IGlzTWF0Y2gsIHNjb3JlLCBpbmRpY2VzIH0gPSBzZWFyY2hlci5zZWFyY2hJbih0ZXh0KTtcblxuICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgbWF0Y2hlcy5wdXNoKHsgc2NvcmUsIGtleSwgdmFsdWU6IHRleHQsIG5vcm0sIGluZGljZXMgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoZXNcbiAgfVxufVxuXG5GdXNlLnZlcnNpb24gPSAnNi42LjInO1xuRnVzZS5jcmVhdGVJbmRleCA9IGNyZWF0ZUluZGV4O1xuRnVzZS5wYXJzZUluZGV4ID0gcGFyc2VJbmRleDtcbkZ1c2UuY29uZmlnID0gQ29uZmlnO1xuXG57XG4gIEZ1c2UucGFyc2VRdWVyeSA9IHBhcnNlO1xufVxuXG57XG4gIHJlZ2lzdGVyKEV4dGVuZGVkU2VhcmNoKTtcbn1cblxuZXhwb3J0IHsgRnVzZSBhcyBkZWZhdWx0IH07XG4iLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogR1NBUCAzLjEyLjNcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIzLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dzYXAuY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdTQVAgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgX2NvbmZpZyA9IHtcbiAgYXV0b1NsZWVwOiAxMjAsXG4gIGZvcmNlM0Q6IFwiYXV0b1wiLFxuICBudWxsVGFyZ2V0V2FybjogMSxcbiAgdW5pdHM6IHtcbiAgICBsaW5lSGVpZ2h0OiBcIlwiXG4gIH1cbn0sXG4gICAgX2RlZmF1bHRzID0ge1xuICBkdXJhdGlvbjogLjUsXG4gIG92ZXJ3cml0ZTogZmFsc2UsXG4gIGRlbGF5OiAwXG59LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX3JldmVydGluZyxcbiAgICBfY29udGV4dCxcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgIF9IQUxGX1BJID0gXzJQSSAvIDQsXG4gICAgX2dzSUQgPSAwLFxuICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gZmFsc2U7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgfHwgX2lzU3RyaW5nKHZhbHVlKTtcbn0sXG4gICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAvLyBub3RlOiBJRTEwIGhhcyBBcnJheUJ1ZmZlciwgYnV0IE5PVCBBcnJheUJ1ZmZlci5pc1ZpZXcoKS5cbl9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfc3RyaWN0TnVtRXhwID0gLyg/Oi0/XFwuP1xcZHxcXC4pKy9naSxcbiAgICAvL29ubHkgbnVtYmVycyAoaW5jbHVkaW5nIG5lZ2F0aXZlcyBhbmQgZGVjaW1hbHMpIGJ1dCBOT1QgcmVsYXRpdmUgdmFsdWVzLlxuX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxcbiAgICAvL2ZpbmRzIGFueSBudW1iZXJzLCBpbmNsdWRpbmcgb25lcyB0aGF0IHN0YXJ0IHdpdGggKz0gb3IgLT0sIG5lZ2F0aXZlIG51bWJlcnMsIGFuZCBvbmVzIGluIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSAxZS04LlxuX251bVdpdGhVbml0RXhwID0gL1stKz0uXSpcXGQrWy5lLV0qXFxkKlthLXolXSovZyxcbiAgICBfY29tcGxleFN0cmluZ051bUV4cCA9IC9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxcbiAgICAvL2R1cGxpY2F0ZSBzbyB0aGF0IHdoaWxlIHdlJ3JlIGxvb3BpbmcgdGhyb3VnaCBtYXRjaGVzIGZyb20gZXhlYygpLCBpdCBkb2Vzbid0IGNvbnRhbWluYXRlIHRoZSBsYXN0SW5kZXggb2YgX251bUV4cCB3aGljaCB3ZSB1c2UgdG8gc2VhcmNoIGZvciBjb2xvcnMgdG9vLlxuX3JlbEV4cCA9IC9bKy1dPS0/Wy5cXGRdKy8sXG4gICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1teLCdcIlxcW1xcXVxcc10rL2dpLFxuICAgIC8vIHByZXZpb3VzbHkgL1sjXFwtKy5dKlxcYlthLXpcXGRcXC09KyUuXSsvZ2kgYnV0IGRpZG4ndCBjYXRjaCBzcGVjaWFsIGNoYXJhY3RlcnMuXG5fdW5pdEV4cCA9IC9eWytcXC09ZVxcc1xcZF0qXFxkK1suXFxkXSooW2Etel0qfCUpXFxzKiQvaSxcbiAgICBfZ2xvYmFsVGltZWxpbmUsXG4gICAgX3dpbixcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2RvYyxcbiAgICBfZ2xvYmFscyA9IHt9LFxuICAgIF9pbnN0YWxsU2NvcGUgPSB7fSxcbiAgICBfY29yZVJlYWR5LFxuICAgIF9pbnN0YWxsID0gZnVuY3Rpb24gX2luc3RhbGwoc2NvcGUpIHtcbiAgcmV0dXJuIChfaW5zdGFsbFNjb3BlID0gX21lcmdlKHNjb3BlLCBfZ2xvYmFscykpICYmIGdzYXA7XG59LFxuICAgIF9taXNzaW5nUGx1Z2luID0gZnVuY3Rpb24gX21pc3NpbmdQbHVnaW4ocHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHByb3BlcnR5XCIsIHByb3BlcnR5LCBcInNldCB0b1wiLCB2YWx1ZSwgXCJNaXNzaW5nIHBsdWdpbj8gZ3NhcC5yZWdpc3RlclBsdWdpbigpXCIpO1xufSxcbiAgICBfd2FybiA9IGZ1bmN0aW9uIF93YXJuKG1lc3NhZ2UsIHN1cHByZXNzKSB7XG4gIHJldHVybiAhc3VwcHJlc3MgJiYgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xufSxcbiAgICBfYWRkR2xvYmFsID0gZnVuY3Rpb24gX2FkZEdsb2JhbChuYW1lLCBvYmopIHtcbiAgcmV0dXJuIG5hbWUgJiYgKF9nbG9iYWxzW25hbWVdID0gb2JqKSAmJiBfaW5zdGFsbFNjb3BlICYmIChfaW5zdGFsbFNjb3BlW25hbWVdID0gb2JqKSB8fCBfZ2xvYmFscztcbn0sXG4gICAgX2VtcHR5RnVuYyA9IGZ1bmN0aW9uIF9lbXB0eUZ1bmMoKSB7XG4gIHJldHVybiAwO1xufSxcbiAgICBfc3RhcnRBdFJldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGlzU3RhcnQ6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWdOb0tpbGwgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZVxufSxcbiAgICBfcmVzZXJ2ZWRQcm9wcyA9IHt9LFxuICAgIF9sYXp5VHdlZW5zID0gW10sXG4gICAgX2xhenlMb29rdXAgPSB7fSxcbiAgICBfbGFzdFJlbmRlcmVkRnJhbWUsXG4gICAgX3BsdWdpbnMgPSB7fSxcbiAgICBfZWZmZWN0cyA9IHt9LFxuICAgIF9uZXh0R0NGcmFtZSA9IDMwLFxuICAgIF9oYXJuZXNzUGx1Z2lucyA9IFtdLFxuICAgIF9jYWxsYmFja05hbWVzID0gXCJcIixcbiAgICBfaGFybmVzcyA9IGZ1bmN0aW9uIF9oYXJuZXNzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldCA9IHRhcmdldHNbMF0sXG4gICAgICBoYXJuZXNzUGx1Z2luLFxuICAgICAgaTtcbiAgX2lzT2JqZWN0KHRhcmdldCkgfHwgX2lzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0cyA9IFt0YXJnZXRzXSk7XG5cbiAgaWYgKCEoaGFybmVzc1BsdWdpbiA9ICh0YXJnZXQuX2dzYXAgfHwge30pLmhhcm5lc3MpKSB7XG4gICAgLy8gZmluZCB0aGUgZmlyc3QgdGFyZ2V0IHdpdGggYSBoYXJuZXNzLiBXZSBhc3N1bWUgdGFyZ2V0cyBwYXNzZWQgaW50byBhbiBhbmltYXRpb24gd2lsbCBiZSBvZiBzaW1pbGFyIHR5cGUsIG1lYW5pbmcgdGhlIHNhbWUga2luZCBvZiBoYXJuZXNzIGNhbiBiZSB1c2VkIGZvciB0aGVtIGFsbCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgIGkgPSBfaGFybmVzc1BsdWdpbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSAmJiAhX2hhcm5lc3NQbHVnaW5zW2ldLnRhcmdldFRlc3QodGFyZ2V0KSkge31cblxuICAgIGhhcm5lc3NQbHVnaW4gPSBfaGFybmVzc1BsdWdpbnNbaV07XG4gIH1cblxuICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHRhcmdldHNbaV0gJiYgKHRhcmdldHNbaV0uX2dzYXAgfHwgKHRhcmdldHNbaV0uX2dzYXAgPSBuZXcgR1NDYWNoZSh0YXJnZXRzW2ldLCBoYXJuZXNzUGx1Z2luKSkpIHx8IHRhcmdldHMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldHM7XG59LFxuICAgIF9nZXRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRDYWNoZSh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0b0FycmF5KHRhcmdldCkpWzBdLl9nc2FwO1xufSxcbiAgICBfZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdikge1xuICByZXR1cm4gKHYgPSB0YXJnZXRbcHJvcGVydHldKSAmJiBfaXNGdW5jdGlvbih2KSA/IHRhcmdldFtwcm9wZXJ0eV0oKSA6IF9pc1VuZGVmaW5lZCh2KSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpIHx8IHY7XG59LFxuICAgIF9mb3JFYWNoTmFtZSA9IGZ1bmN0aW9uIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuYykge1xuICByZXR1cm4gKG5hbWVzID0gbmFtZXMuc3BsaXQoXCIsXCIpKS5mb3JFYWNoKGZ1bmMpIHx8IG5hbWVzO1xufSxcbiAgICAvL3NwbGl0IGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgbmFtZXMgaW50byBhbiBhcnJheSwgdGhlbiBydW4gYSBmb3JFYWNoKCkgZnVuY3Rpb24gYW5kIHJldHVybiB0aGUgc3BsaXQgYXJyYXkgKHRoaXMgaXMganVzdCBhIHdheSB0byBjb25zb2xpZGF0ZS9zaG9ydGVuIHNvbWUgY29kZSkuXG5fcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwMDApIC8gMTAwMDAwMDAgfHwgMDtcbn0sXG4gICAgLy8gaW5jcmVhc2VkIHByZWNpc2lvbiBtb3N0bHkgZm9yIHRpbWluZyB2YWx1ZXMuXG5fcGFyc2VSZWxhdGl2ZSA9IGZ1bmN0aW9uIF9wYXJzZVJlbGF0aXZlKHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgb3BlcmF0b3IgPSB2YWx1ZS5jaGFyQXQoMCksXG4gICAgICBlbmQgPSBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigyKSk7XG4gIHN0YXJ0ID0gcGFyc2VGbG9hdChzdGFydCk7XG4gIHJldHVybiBvcGVyYXRvciA9PT0gXCIrXCIgPyBzdGFydCArIGVuZCA6IG9wZXJhdG9yID09PSBcIi1cIiA/IHN0YXJ0IC0gZW5kIDogb3BlcmF0b3IgPT09IFwiKlwiID8gc3RhcnQgKiBlbmQgOiBzdGFydCAvIGVuZDtcbn0sXG4gICAgX2FycmF5Q29udGFpbnNBbnkgPSBmdW5jdGlvbiBfYXJyYXlDb250YWluc0FueSh0b1NlYXJjaCwgdG9GaW5kKSB7XG4gIC8vc2VhcmNoZXMgb25lIGFycmF5IHRvIGZpbmQgbWF0Y2hlcyBmb3IgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgdG9GaW5kIGFycmF5LiBBcyBzb29uIGFzIG9uZSBpcyBmb3VuZCwgaXQgcmV0dXJucyB0cnVlLiBJdCBkb2VzIE5PVCByZXR1cm4gYWxsIHRoZSBtYXRjaGVzOyBpdCdzIHNpbXBseSBhIGJvb2xlYW4gc2VhcmNoLlxuICB2YXIgbCA9IHRvRmluZC5sZW5ndGgsXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgdG9TZWFyY2guaW5kZXhPZih0b0ZpbmRbaV0pIDwgMCAmJiArK2kgPCBsOykge31cblxuICByZXR1cm4gaSA8IGw7XG59LFxuICAgIF9sYXp5UmVuZGVyID0gZnVuY3Rpb24gX2xhenlSZW5kZXIoKSB7XG4gIHZhciBsID0gX2xhenlUd2VlbnMubGVuZ3RoLFxuICAgICAgYSA9IF9sYXp5VHdlZW5zLnNsaWNlKDApLFxuICAgICAgaSxcbiAgICAgIHR3ZWVuO1xuXG4gIF9sYXp5TG9va3VwID0ge307XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHR3ZWVuID0gYVtpXTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5fbGF6eSAmJiAodHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSkuX2xhenkgPSAwKTtcbiAgfVxufSxcbiAgICBfbGF6eVNhZmVSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVNhZmVSZW5kZXIoYW5pbWF0aW9uLCB0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7XG4gIGFuaW1hdGlvbi5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgdGltZSA8IDAgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24uX3N0YXJ0QXQpKTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cbn0sXG4gICAgX251bWVyaWNJZlBvc3NpYmxlID0gZnVuY3Rpb24gX251bWVyaWNJZlBvc3NpYmxlKHZhbHVlKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHJldHVybiAobiB8fCBuID09PSAwKSAmJiAodmFsdWUgKyBcIlwiKS5tYXRjaChfZGVsaW1pdGVkVmFsdWVFeHApLmxlbmd0aCA8IDIgPyBuIDogX2lzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICByZXR1cm4gcDtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfc2V0S2V5ZnJhbWVEZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXRLZXlmcmFtZURlZmF1bHRzKGV4Y2x1ZGVEdXJhdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgZGVmYXVsdHMpIHtcbiAgICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgICBwIGluIG9iaiB8fCBwID09PSBcImR1cmF0aW9uXCIgJiYgZXhjbHVkZUR1cmF0aW9uIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gICAgfVxuICB9O1xufSxcbiAgICBfbWVyZ2UgPSBmdW5jdGlvbiBfbWVyZ2UoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBiYXNlW3BdID0gdG9NZXJnZVtwXTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfbWVyZ2VEZWVwID0gZnVuY3Rpb24gX21lcmdlRGVlcChiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIHAgIT09IFwiX19wcm90b19fXCIgJiYgcCAhPT0gXCJjb25zdHJ1Y3RvclwiICYmIHAgIT09IFwicHJvdG90eXBlXCIgJiYgKGJhc2VbcF0gPSBfaXNPYmplY3QodG9NZXJnZVtwXSkgPyBfbWVyZ2VEZWVwKGJhc2VbcF0gfHwgKGJhc2VbcF0gPSB7fSksIHRvTWVyZ2VbcF0pIDogdG9NZXJnZVtwXSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgcCBpbiBleGNsdWRpbmcgfHwgKGNvcHlbcF0gPSBvYmpbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIGZ1bmMgPSB2YXJzLmtleWZyYW1lcyA/IF9zZXRLZXlmcmFtZURlZmF1bHRzKF9pc0FycmF5KHZhcnMua2V5ZnJhbWVzKSkgOiBfc2V0RGVmYXVsdHM7XG5cbiAgaWYgKF9pc05vdEZhbHNlKHZhcnMuaW5oZXJpdCkpIHtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBmdW5jKHZhcnMsIHBhcmVudC52YXJzLmRlZmF1bHRzKTtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQgfHwgcGFyZW50Ll9kcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2FycmF5c01hdGNoID0gZnVuY3Rpb24gX2FycmF5c01hdGNoKGExLCBhMikge1xuICB2YXIgaSA9IGExLmxlbmd0aCxcbiAgICAgIG1hdGNoID0gaSA9PT0gYTIubGVuZ3RoO1xuXG4gIHdoaWxlIChtYXRjaCAmJiBpLS0gJiYgYTFbaV0gPT09IGEyW2ldKSB7fVxuXG4gIHJldHVybiBpIDwgMDtcbn0sXG4gICAgX2FkZExpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX2FkZExpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3AsIHNvcnRCeSkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gcGFyZW50W2xhc3RQcm9wXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHNvcnRCeSkge1xuICAgIHQgPSBjaGlsZFtzb3J0QnldO1xuXG4gICAgd2hpbGUgKHByZXYgJiYgcHJldltzb3J0QnldID4gdCkge1xuICAgICAgcHJldiA9IHByZXYuX3ByZXY7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByZXYpIHtcbiAgICBjaGlsZC5fbmV4dCA9IHByZXYuX25leHQ7XG4gICAgcHJldi5fbmV4dCA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkLl9uZXh0ID0gcGFyZW50W2ZpcnN0UHJvcF07XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGlmIChjaGlsZC5fbmV4dCkge1xuICAgIGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgY2hpbGQuX3ByZXYgPSBwcmV2O1xuICBjaGlsZC5wYXJlbnQgPSBjaGlsZC5fZHAgPSBwYXJlbnQ7XG4gIHJldHVybiBjaGlsZDtcbn0sXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX3JlbW92ZUxpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3ApIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IGNoaWxkLl9wcmV2LFxuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5fbmV4dCA9IG5leHQ7XG4gIH0gZWxzZSBpZiAocGFyZW50W2ZpcnN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBuZXh0O1xuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0Ll9wcmV2ID0gcHJldjtcbiAgfSBlbHNlIGlmIChwYXJlbnRbbGFzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBwcmV2O1xuICB9XG5cbiAgY2hpbGQuX25leHQgPSBjaGlsZC5fcHJldiA9IGNoaWxkLnBhcmVudCA9IG51bGw7IC8vIGRvbid0IGRlbGV0ZSB0aGUgX2RwIGp1c3Qgc28gd2UgY2FuIHJldmVydCBpZiBuZWNlc3NhcnkuIEJ1dCBwYXJlbnQgc2hvdWxkIGJlIG51bGwgdG8gaW5kaWNhdGUgdGhlIGl0ZW0gaXNuJ3QgaW4gYSBsaW5rZWQgbGlzdC5cbn0sXG4gICAgX3JlbW92ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCwgb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSkge1xuICBjaGlsZC5wYXJlbnQgJiYgKCFvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIHx8IGNoaWxkLnBhcmVudC5hdXRvUmVtb3ZlQ2hpbGRyZW4pICYmIGNoaWxkLnBhcmVudC5yZW1vdmUgJiYgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG4gIGNoaWxkLl9hY3QgPSAwO1xufSxcbiAgICBfdW5jYWNoZSA9IGZ1bmN0aW9uIF91bmNhY2hlKGFuaW1hdGlvbiwgY2hpbGQpIHtcbiAgaWYgKGFuaW1hdGlvbiAmJiAoIWNoaWxkIHx8IGNoaWxkLl9lbmQgPiBhbmltYXRpb24uX2R1ciB8fCBjaGlsZC5fc3RhcnQgPCAwKSkge1xuICAgIC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogaWYgYSBjaGlsZCBhbmltYXRpb24gaXMgcGFzc2VkIGluIHdlIHNob3VsZCBvbmx5IHVuY2FjaGUgaWYgdGhhdCBjaGlsZCBFWFRFTkRTIHRoZSBhbmltYXRpb24gKGl0cyBlbmQgdGltZSBpcyBiZXlvbmQgdGhlIGVuZClcbiAgICB2YXIgYSA9IGFuaW1hdGlvbjtcblxuICAgIHdoaWxlIChhKSB7XG4gICAgICBhLl9kaXJ0eSA9IDE7XG4gICAgICBhID0gYS5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3JlY2FjaGVBbmNlc3RvcnMgPSBmdW5jdGlvbiBfcmVjYWNoZUFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5wYXJlbnQ7XG5cbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgLy9zb21ldGltZXMgd2UgbXVzdCBmb3JjZSBhIHJlLXNvcnQgb2YgYWxsIGNoaWxkcmVuIGFuZCB1cGRhdGUgdGhlIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gb2YgYWxsIGFuY2VzdG9yIHRpbWVsaW5lcyBpbW1lZGlhdGVseSBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciBsb29wLCBvbmUgdHdlZW4gYWx0ZXJzIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgd2hpY2ggc2hvdmVzIGl0cyBzdGFydFRpbWUgYmVmb3JlIDAsIGZvcmNpbmcgdGhlIHBhcmVudCB0aW1lbGluZSB0byBzaGlmdCBhcm91bmQgYW5kIHNoaWZ0Q2hpbGRyZW4oKSB3aGljaCBjb3VsZCBhZmZlY3QgdGhhdCBuZXh0IHR3ZWVuJ3MgcmVuZGVyIChzdGFydFRpbWUpLiBEb2Vzbid0IG1hdHRlciBmb3IgdGhlIHJvb3QgdGltZWxpbmUgdGhvdWdoLlxuICAgIHBhcmVudC5fZGlydHkgPSAxO1xuICAgIHBhcmVudC50b3RhbER1cmF0aW9uKCk7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZXdpbmRTdGFydEF0ID0gZnVuY3Rpb24gX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHJldHVybiB0d2Vlbi5fc3RhcnRBdCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLnZhcnMuaW1tZWRpYXRlUmVuZGVyICYmICF0d2Vlbi52YXJzLmF1dG9SZXZlcnQgfHwgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgZm9yY2UpKTtcbn0sXG4gICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbn0sXG4gICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xufSxcbiAgICAvLyBmZWVkIGluIHRoZSB0b3RhbFRpbWUgYW5kIGN5Y2xlRHVyYXRpb24gYW5kIGl0J2xsIHJldHVybiB0aGUgY3ljbGUgKGl0ZXJhdGlvbiBtaW51cyAxKSBhbmQgaWYgdGhlIHBsYXloZWFkIGlzIGV4YWN0bHkgYXQgdGhlIHZlcnkgRU5ELCBpdCB3aWxsIE5PVCBidW1wIHVwIHRvIHRoZSBuZXh0IGN5Y2xlLlxuX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gIHZhciB3aG9sZSA9IE1hdGguZmxvb3IodFRpbWUgLz0gY3ljbGVEdXJhdGlvbik7XG4gIHJldHVybiB0VGltZSAmJiB3aG9sZSA9PT0gdFRpbWUgPyB3aG9sZSAtIDEgOiB3aG9sZTtcbn0sXG4gICAgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUgPSBmdW5jdGlvbiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnRUaW1lLCBjaGlsZCkge1xuICByZXR1cm4gKHBhcmVudFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzICsgKGNoaWxkLl90cyA+PSAwID8gMCA6IGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKTtcbn0sXG4gICAgX3NldEVuZCA9IGZ1bmN0aW9uIF9zZXRFbmQoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX2VuZCA9IF9yb3VuZFByZWNpc2UoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSAtIChhbmltYXRpb24uX3RzID4gMCA/IHRvdGFsVGltZSAvIGFuaW1hdGlvbi5fdHMgOiAoKGFuaW1hdGlvbi5fZGlydHkgPyBhbmltYXRpb24udG90YWxEdXJhdGlvbigpIDogYW5pbWF0aW9uLl90RHVyKSAtIHRvdGFsVGltZSkgLyAtYW5pbWF0aW9uLl90cykpO1xuXG4gICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG5cbi8qXG5fdG90YWxUaW1lVG9UaW1lID0gKGNsYW1wZWRUb3RhbFRpbWUsIGR1cmF0aW9uLCByZXBlYXQsIHJlcGVhdERlbGF5LCB5b3lvKSA9PiB7XG5cdGxldCBjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyByZXBlYXREZWxheSxcblx0XHR0aW1lID0gX3JvdW5kKGNsYW1wZWRUb3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblx0aWYgKHRpbWUgPiBkdXJhdGlvbikge1xuXHRcdHRpbWUgPSBkdXJhdGlvbjtcblx0fVxuXHRyZXR1cm4gKHlveW8gJiYgKH5+KGNsYW1wZWRUb3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSAmIDEpKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG59LFxuKi9cbl9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gIHZhciB0O1xuXG4gIGlmIChjaGlsZC5fdGltZSB8fCAhY2hpbGQuX2R1ciAmJiBjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnQgPCB0aW1lbGluZS5fdGltZSAmJiAoY2hpbGQuX2R1ciB8fCAhY2hpbGQuYWRkKSkge1xuICAgIC8vIGluIGNhc2UsIGZvciBleGFtcGxlLCB0aGUgX3N0YXJ0IGlzIG1vdmVkIG9uIGEgdHdlZW4gdGhhdCBoYXMgYWxyZWFkeSByZW5kZXJlZCwgb3IgaWYgaXQncyBiZWluZyBpbnNlcnRlZCBpbnRvIGEgdGltZWxpbmUgQkVGT1JFIHdoZXJlIHRoZSBwbGF5aGVhZCBpcyBjdXJyZW50bHkuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuIFNwZWNpYWwgY2FzZTogaWYgaXQncyBhIHRpbWVsaW5lIChoYXMgLmFkZCgpIG1ldGhvZCkgYW5kIG5vIGR1cmF0aW9uLCB3ZSBjYW4gc2tpcCByZW5kZXJpbmcgYmVjYXVzZSB0aGUgdXNlciBtYXkgYmUgcG9wdWxhdGluZyBpdCBBRlRFUiBhZGRpbmcgaXQgdG8gYSBwYXJlbnQgdGltZWxpbmUgKHVuY29udmVudGlvbmFsLCBidXQgcG9zc2libGUsIGFuZCB3ZSB3b3VsZG4ndCB3YW50IGl0IHRvIGdldCByZW1vdmVkIGlmIHRoZSBwYXJlbnQncyBhdXRvUmVtb3ZlQ2hpbGRyZW4gaXMgdHJ1ZSkuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgY2hpbGQuX2VuZCA9IF9yb3VuZFByZWNpc2UoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICBza2lwQ2hlY2tzIHx8IF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCk7XG4gIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7IC8vIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIG5ldyBjaGlsZCBtYWtlcyBpdCBsb25nZXIsIHdlIG1heSBuZWVkIHRvIGFkanVzdCB0aGUgcGFyZW50J3MgX3N0YXJ0IChwdXNoIGl0IGJhY2spXG5cbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSB7XG4gIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKTtcblxuICBpZiAoIXR3ZWVuLl9pbml0dGVkKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoIWZvcmNlICYmIHR3ZWVuLl9wdCAmJiAhX3JldmVydGluZyAmJiAodHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkgIT09IGZhbHNlIHx8ICF0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSkgJiYgX2xhc3RSZW5kZXJlZEZyYW1lICE9PSBfdGlja2VyLmZyYW1lKSB7XG4gICAgX2xhenlUd2VlbnMucHVzaCh0d2Vlbik7XG5cbiAgICB0d2Vlbi5fbGF6eSA9IFt0VGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgdmFyIHBhcmVudCA9IF9yZWYucGFyZW50O1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG59LFxuICAgIC8vIGNoZWNrIHBhcmVudCdzIF9sb2NrIGJlY2F1c2Ugd2hlbiBhIHRpbWVsaW5lIHJlcGVhdHMveW95b3MgYW5kIGRvZXMgaXRzIGFydGlmaWNpYWwgd3JhcHBpbmcsIHdlIHNob3VsZG4ndCBmb3JjZSB0aGUgcmF0aW8gYmFjayB0byAwXG5faXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICByZXR1cm4gZGF0YSA9PT0gXCJpc0Zyb21TdGFydFwiIHx8IGRhdGEgPT09IFwiaXNTdGFydFwiO1xufSxcbiAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHZhciBwcmV2UmF0aW8gPSB0d2Vlbi5yYXRpbyxcbiAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgIC8vIGlmIHRoZSB0d2VlbiBvciBpdHMgcGFyZW50IGlzIHJldmVyc2VkIGFuZCB0aGUgdG90YWxUaW1lIGlzIDAsIHdlIHNob3VsZCBnbyB0byBhIHJhdGlvIG9mIDAuIEVkZ2UgY2FzZTogaWYgYSBmcm9tKCkgb3IgZnJvbVRvKCkgc3RhZ2dlciB0d2VlbiBpcyBwbGFjZWQgbGF0ZXIgaW4gYSB0aW1lbGluZSwgdGhlIFwic3RhcnRBdFwiIHplcm8tZHVyYXRpb24gdHdlZW4gY291bGQgaW5pdGlhbGx5IHJlbmRlciBhdCBhIHRpbWUgd2hlbiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgaXMgdGVjaG5pY2FsbHkgQkVGT1JFIHdoZXJlIHRoaXMgdHdlZW4gaXMsIHNvIG1ha2Ugc3VyZSB0aGF0IGFueSBcImZyb21cIiBhbmQgXCJmcm9tVG9cIiBzdGFydEF0IHR3ZWVucyBhcmUgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUgYXQgYSByYXRpbyBvZiAxLlxuICByZXBlYXREZWxheSA9IHR3ZWVuLl9yRGVsYXksXG4gICAgICB0VGltZSA9IDAsXG4gICAgICBwdCxcbiAgICAgIGl0ZXJhdGlvbixcbiAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvLyBpbiBjYXNlIHRoZXJlJ3MgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHRoYXQgaGFzIGEgcmVwZWF0IHdpdGggYSByZXBlYXREZWxheVxuICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgIGl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0VGltZSwgcmVwZWF0RGVsYXkpO1xuICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgLy8gaWYgaXRlcmF0aW9uIGNoYW5nZWRcbiAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgLy8gaWYgd2UgcmVuZGVyIHRoZSB2ZXJ5IGJlZ2lubmluZyAodGltZSA9PSAwKSBvZiBhIGZyb21UbygpLCB3ZSBtdXN0IGZvcmNlIHRoZSByZW5kZXIgKG5vcm1hbCB0d2VlbnMgd291bGRuJ3QgbmVlZCB0byByZW5kZXIgYXQgYSB0aW1lIG9mIDAgd2hlbiB0aGUgcHJldlRpbWUgd2FzIGFsc28gMCkuIFRoaXMgaXMgYWxzbyBtYW5kYXRvcnkgdG8gbWFrZSBzdXJlIG92ZXJ3cml0aW5nIGtpY2tzIGluIGltbWVkaWF0ZWx5LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByZXZJdGVyYXRpb24gPSB0d2Vlbi5felRpbWU7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lIHx8IChzdXBwcmVzc0V2ZW50cyA/IF90aW55TnVtIDogMCk7IC8vIHdoZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgc3VwcHJlc3NFdmVudHMgfHwgKHN1cHByZXNzRXZlbnRzID0gdG90YWxUaW1lICYmICFwcmV2SXRlcmF0aW9uKTsgLy8gaWYgaXQgd2FzIHJlbmRlcmVkIHByZXZpb3VzbHkgYXQgZXhhY3RseSAwIChfelRpbWUpIGFuZCBub3cgdGhlIHBsYXloZWFkIGlzIG1vdmluZyBhd2F5LCBET04nVCBmaXJlIGNhbGxiYWNrcyBvdGhlcndpc2UgdGhleSdsbCBzZWVtIGxpa2UgZHVwbGljYXRlcy5cblxuICAgIHR3ZWVuLnJhdGlvID0gcmF0aW87XG4gICAgdHdlZW4uX2Zyb20gJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcbiAgICB0d2Vlbi5fdGltZSA9IDA7XG4gICAgdHdlZW4uX3RUaW1lID0gdFRpbWU7XG4gICAgcHQgPSB0d2Vlbi5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICB0b3RhbFRpbWUgPCAwICYmIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCB0cnVlKTtcbiAgICB0d2Vlbi5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICByYXRpbyAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0d2VlbiwgMSk7XG5cbiAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIV9yZXZlcnRpbmcpIHtcbiAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICB0d2Vlbi5fcHJvbSAmJiB0d2Vlbi5fcHJvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghdHdlZW4uX3pUaW1lKSB7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICB9XG59LFxuICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgdmFyIGNoaWxkO1xuXG4gIGlmICh0aW1lID4gcHJldlRpbWUpIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPiBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9sYXN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgIH1cbiAgfVxufSxcbiAgICBfc2V0RHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBkdXJhdGlvbiwgc2tpcFVuY2FjaGUsIGxlYXZlUGxheWhlYWQpIHtcbiAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgZHVyID0gX3JvdW5kUHJlY2lzZShkdXJhdGlvbikgfHwgMCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgYW5pbWF0aW9uLl90RHVyID0gIXJlcGVhdCA/IGR1ciA6IHJlcGVhdCA8IDAgPyAxZTEwIDogX3JvdW5kUHJlY2lzZShkdXIgKiAocmVwZWF0ICsgMSkgKyBhbmltYXRpb24uX3JEZWxheSAqIHJlcGVhdCk7XG4gIHRvdGFsUHJvZ3Jlc3MgPiAwICYmICFsZWF2ZVBsYXloZWFkICYmIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl90VGltZSA9IGFuaW1hdGlvbi5fdER1ciAqIHRvdGFsUHJvZ3Jlc3MpO1xuICBhbmltYXRpb24ucGFyZW50ICYmIF9zZXRFbmQoYW5pbWF0aW9uKTtcbiAgc2tpcFVuY2FjaGUgfHwgX3VuY2FjaGUoYW5pbWF0aW9uLnBhcmVudCwgYW5pbWF0aW9uKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24gaW5zdGFuY2VvZiBUaW1lbGluZSA/IF91bmNhY2hlKGFuaW1hdGlvbikgOiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24uX2R1cik7XG59LFxuICAgIF96ZXJvUG9zaXRpb24gPSB7XG4gIF9zdGFydDogMCxcbiAgZW5kVGltZTogX2VtcHR5RnVuYyxcbiAgdG90YWxEdXJhdGlvbjogX2VtcHR5RnVuY1xufSxcbiAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24sIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgdmFyIGxhYmVscyA9IGFuaW1hdGlvbi5sYWJlbHMsXG4gICAgICByZWNlbnQgPSBhbmltYXRpb24uX3JlY2VudCB8fCBfemVyb1Bvc2l0aW9uLFxuICAgICAgY2xpcHBlZER1cmF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgPj0gX2JpZ051bSA/IHJlY2VudC5lbmRUaW1lKGZhbHNlKSA6IGFuaW1hdGlvbi5fZHVyLFxuICAgICAgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjaGlsZCB0aGF0IGluZmluaXRlbHkgcmVwZWF0cywgdXNlcnMgYWxtb3N0IG5ldmVyIGludGVuZCBmb3IgdGhlIGluc2VydGlvbiBwb2ludCBvZiBhIG5ldyBjaGlsZCB0byBiZSBiYXNlZCBvbiBhIFNVUEVSIGxvbmcgdmFsdWUgbGlrZSB0aGF0IHNvIHdlIGNsaXAgaXQgYW5kIGFzc3VtZSB0aGUgbW9zdCByZWNlbnRseS1hZGRlZCBjaGlsZCdzIGVuZFRpbWUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgaSxcbiAgICAgIG9mZnNldCxcbiAgICAgIGlzUGVyY2VudDtcblxuICBpZiAoX2lzU3RyaW5nKHBvc2l0aW9uKSAmJiAoaXNOYU4ocG9zaXRpb24pIHx8IHBvc2l0aW9uIGluIGxhYmVscykpIHtcbiAgICAvL2lmIHRoZSBzdHJpbmcgaXMgYSBudW1iZXIgbGlrZSBcIjFcIiwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBsYWJlbCB3aXRoIHRoYXQgbmFtZSwgb3RoZXJ3aXNlIGludGVycHJldCBpdCBhcyBhIG51bWJlciAoYWJzb2x1dGUgdmFsdWUpLlxuICAgIG9mZnNldCA9IHBvc2l0aW9uLmNoYXJBdCgwKTtcbiAgICBpc1BlcmNlbnQgPSBwb3NpdGlvbi5zdWJzdHIoLTEpID09PSBcIiVcIjtcbiAgICBpID0gcG9zaXRpb24uaW5kZXhPZihcIj1cIik7XG5cbiAgICBpZiAob2Zmc2V0ID09PSBcIjxcIiB8fCBvZmZzZXQgPT09IFwiPlwiKSB7XG4gICAgICBpID49IDAgJiYgKHBvc2l0aW9uID0gcG9zaXRpb24ucmVwbGFjZSgvPS8sIFwiXCIpKTtcbiAgICAgIHJldHVybiAob2Zmc2V0ID09PSBcIjxcIiA/IHJlY2VudC5fc3RhcnQgOiByZWNlbnQuZW5kVGltZShyZWNlbnQuX3JlcGVhdCA+PSAwKSkgKyAocGFyc2VGbG9hdChwb3NpdGlvbi5zdWJzdHIoMSkpIHx8IDApICogKGlzUGVyY2VudCA/IChpIDwgMCA/IHJlY2VudCA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKSAvIDEwMCA6IDEpO1xuICAgIH1cblxuICAgIGlmIChpIDwgMCkge1xuICAgICAgcG9zaXRpb24gaW4gbGFiZWxzIHx8IChsYWJlbHNbcG9zaXRpb25dID0gY2xpcHBlZER1cmF0aW9uKTtcbiAgICAgIHJldHVybiBsYWJlbHNbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIG9mZnNldCA9IHBhcnNlRmxvYXQocG9zaXRpb24uY2hhckF0KGkgLSAxKSArIHBvc2l0aW9uLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGlzUGVyY2VudCAmJiBwZXJjZW50QW5pbWF0aW9uKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgLyAxMDAgKiAoX2lzQXJyYXkocGVyY2VudEFuaW1hdGlvbikgPyBwZXJjZW50QW5pbWF0aW9uWzBdIDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBpID4gMSA/IF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24uc3Vic3RyKDAsIGkgLSAxKSwgcGVyY2VudEFuaW1hdGlvbikgKyBvZmZzZXQgOiBjbGlwcGVkRHVyYXRpb24gKyBvZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb24gPT0gbnVsbCA/IGNsaXBwZWREdXJhdGlvbiA6ICtwb3NpdGlvbjtcbn0sXG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSA9IGZ1bmN0aW9uIF9jcmVhdGVUd2VlblR5cGUodHlwZSwgcGFyYW1zLCB0aW1lbGluZSkge1xuICB2YXIgaXNMZWdhY3kgPSBfaXNOdW1iZXIocGFyYW1zWzFdKSxcbiAgICAgIHZhcnNJbmRleCA9IChpc0xlZ2FjeSA/IDIgOiAxKSArICh0eXBlIDwgMiA/IDAgOiAxKSxcbiAgICAgIHZhcnMgPSBwYXJhbXNbdmFyc0luZGV4XSxcbiAgICAgIGlyVmFycyxcbiAgICAgIHBhcmVudDtcblxuICBpc0xlZ2FjeSAmJiAodmFycy5kdXJhdGlvbiA9IHBhcmFtc1sxXSk7XG4gIHZhcnMucGFyZW50ID0gdGltZWxpbmU7XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBpclZhcnMgPSB2YXJzO1xuICAgIHBhcmVudCA9IHRpbWVsaW5lO1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiAhKFwiaW1tZWRpYXRlUmVuZGVyXCIgaW4gaXJWYXJzKSkge1xuICAgICAgLy8gaW5oZXJpdGFuY2UgaGFzbid0IGhhcHBlbmVkIHlldCwgYnV0IHNvbWVvbmUgbWF5IGhhdmUgc2V0IGEgZGVmYXVsdCBpbiBhbiBhbmNlc3RvciB0aW1lbGluZS4gV2UgY291bGQgZG8gdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlcikgYnV0IHRoYXQnZCBleGFjdCBhIHNsaWdodCBwZXJmb3JtYW5jZSBwZW5hbHR5IGJlY2F1c2UgX2luaGVyaXREZWZhdWx0cygpIGFsc28gcnVucyBpbiB0aGUgVHdlZW4gY29uc3RydWN0b3IuIFdlJ3JlIHBheWluZyBhIHNtYWxsIGtiIHByaWNlIGhlcmUgdG8gZ2FpbiBzcGVlZC5cbiAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgcGFyZW50ID0gX2lzTm90RmFsc2UocGFyZW50LnZhcnMuaW5oZXJpdCkgJiYgcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHR5cGUgPCAyID8gdmFycy5ydW5CYWNrd2FyZHMgPSAxIDogdmFycy5zdGFydEF0ID0gcGFyYW1zW3ZhcnNJbmRleCAtIDFdOyAvLyBcImZyb21cIiB2YXJzXG4gIH1cblxuICByZXR1cm4gbmV3IFR3ZWVuKHBhcmFtc1swXSwgdmFycywgcGFyYW1zW3ZhcnNJbmRleCArIDFdKTtcbn0sXG4gICAgX2NvbmRpdGlvbmFsUmV0dXJuID0gZnVuY3Rpb24gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jKSB7XG4gIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IGZ1bmModmFsdWUpIDogZnVuYztcbn0sXG4gICAgX2NsYW1wID0gZnVuY3Rpb24gX2NsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xufSxcbiAgICBnZXRVbml0ID0gZnVuY3Rpb24gZ2V0VW5pdCh2YWx1ZSwgdikge1xuICByZXR1cm4gIV9pc1N0cmluZyh2YWx1ZSkgfHwgISh2ID0gX3VuaXRFeHAuZXhlYyh2YWx1ZSkpID8gXCJcIiA6IHZbMV07XG59LFxuICAgIC8vIG5vdGU6IHByb3RlY3QgYWdhaW5zdCBwYWRkZWQgbnVtYmVycyBhcyBzdHJpbmdzLCBsaWtlIFwiMTAwLjEwMFwiLiBUaGF0IHNob3VsZG4ndCByZXR1cm4gXCIwMFwiIGFzIHRoZSB1bml0LiBJZiBpdCdzIG51bWVyaWMsIHJldHVybiBubyB1bml0LlxuY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gX2NsYW1wKG1pbiwgbWF4LCB2KTtcbiAgfSk7XG59LFxuICAgIF9zbGljZSA9IFtdLnNsaWNlLFxuICAgIF9pc0FycmF5TGlrZSA9IGZ1bmN0aW9uIF9pc0FycmF5TGlrZSh2YWx1ZSwgbm9uRW1wdHkpIHtcbiAgcmV0dXJuIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZSkgJiYgXCJsZW5ndGhcIiBpbiB2YWx1ZSAmJiAoIW5vbkVtcHR5ICYmICF2YWx1ZS5sZW5ndGggfHwgdmFsdWUubGVuZ3RoIC0gMSBpbiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWVbMF0pKSAmJiAhdmFsdWUubm9kZVR5cGUgJiYgdmFsdWUgIT09IF93aW47XG59LFxuICAgIF9mbGF0dGVuID0gZnVuY3Rpb24gX2ZsYXR0ZW4oYXIsIGxlYXZlU3RyaW5ncywgYWNjdW11bGF0b3IpIHtcbiAgaWYgKGFjY3VtdWxhdG9yID09PSB2b2lkIDApIHtcbiAgICBhY2N1bXVsYXRvciA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF9hY2N1bXVsYXRvcjtcblxuICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgfHwgX2lzQXJyYXlMaWtlKHZhbHVlLCAxKSA/IChfYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcikucHVzaC5hcHBseShfYWNjdW11bGF0b3IsIHRvQXJyYXkodmFsdWUpKSA6IGFjY3VtdWxhdG9yLnB1c2godmFsdWUpO1xuICB9KSB8fCBhY2N1bXVsYXRvcjtcbn0sXG4gICAgLy90YWtlcyBhbnkgdmFsdWUgYW5kIHJldHVybnMgYW4gYXJyYXkuIElmIGl0J3MgYSBzdHJpbmcgKGFuZCBsZWF2ZVN0cmluZ3MgaXNuJ3QgdHJ1ZSksIGl0J2xsIHVzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCkgYW5kIGNvbnZlcnQgdGhhdCB0byBhbiBhcnJheS4gSXQnbGwgYWxzbyBhY2NlcHQgaXRlcmFibGVzIGxpa2UgalF1ZXJ5IG9iamVjdHMuXG50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgc2NvcGUsIGxlYXZlU3RyaW5ncykge1xuICByZXR1cm4gX2NvbnRleHQgJiYgIXNjb3BlICYmIF9jb250ZXh0LnNlbGVjdG9yID8gX2NvbnRleHQuc2VsZWN0b3IodmFsdWUpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoKHNjb3BlIHx8IF9kb2MpLnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpLCAwKSA6IF9pc0FycmF5KHZhbHVlKSA/IF9mbGF0dGVuKHZhbHVlLCBsZWF2ZVN0cmluZ3MpIDogX2lzQXJyYXlMaWtlKHZhbHVlKSA/IF9zbGljZS5jYWxsKHZhbHVlLCAwKSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xufSxcbiAgICBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF0gfHwgX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgZWwgPSB2YWx1ZS5jdXJyZW50IHx8IHZhbHVlLm5hdGl2ZUVsZW1lbnQgfHwgdmFsdWU7XG4gICAgcmV0dXJuIHRvQXJyYXkodiwgZWwucXVlcnlTZWxlY3RvckFsbCA/IGVsIDogZWwgPT09IHZhbHVlID8gX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSA6IHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICByZXR1cm4gYS5zb3J0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICB9KTtcbn0sXG4gICAgLy8gYWx0ZXJuYXRpdmUgdGhhdCdzIGEgYml0IGZhc3RlciBhbmQgbW9yZSByZWxpYWJseSBkaXZlcnNlIGJ1dCBiaWdnZXI6ICAgZm9yIChsZXQgaiwgdiwgaSA9IGEubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHYgPSBhWy0taV0sIGFbaV0gPSBhW2pdLCBhW2pdID0gdik7IHJldHVybiBhO1xuLy9mb3IgZGlzdHJpYnV0aW5nIHZhbHVlcyBhY3Jvc3MgYW4gYXJyYXkuIENhbiBhY2NlcHQgYSBudW1iZXIsIGEgZnVuY3Rpb24gb3IgKG1vc3QgY29tbW9ubHkpIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiB7YmFzZSwgYW1vdW50LCBmcm9tLCBlYXNlLCBncmlkLCBheGlzLCBsZW5ndGgsIGVhY2h9LiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBleHBlY3RzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczogaW5kZXgsIHRhcmdldCwgYXJyYXkuIFJlY29nbml6ZXMgdGhlIGZvbGxvd2luZ1xuZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICBlYWNoOiB2XG4gIH0sXG4gICAgICAvL246MSBpcyBqdXN0IHRvIGluZGljYXRlIHYgd2FzIGEgbnVtYmVyOyB3ZSBsZXZlcmFnZSB0aGF0IGxhdGVyIHRvIHNldCB2IGFjY29yZGluZyB0byB0aGUgbGVuZ3RoIHdlIGdldC4gSWYgYSBudW1iZXIgaXMgcGFzc2VkIGluLCB3ZSB0cmVhdCBpdCBsaWtlIHRoZSBvbGQgc3RhZ2dlciB2YWx1ZSB3aGVyZSAwLjEsIGZvciBleGFtcGxlLCB3b3VsZCBtZWFuIHRoYXQgdGhpbmdzIHdvdWxkIGJlIGRpc3RyaWJ1dGVkIHdpdGggMC4xIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSByYXRoZXIgdGhhbiBhIHRvdGFsIFwiYW1vdW50XCIgdGhhdCdzIGNodW5rZWQgb3V0IGFtb25nIHRoZW0gYWxsLlxuICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgZnJvbSA9IHZhcnMuZnJvbSB8fCAwLFxuICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgY2FjaGUgPSB7fSxcbiAgICAgIGlzRGVjaW1hbCA9IGZyb20gPiAwICYmIGZyb20gPCAxLFxuICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgIHJhdGlvWCA9IGZyb20sXG4gICAgICByYXRpb1kgPSBmcm9tO1xuXG4gIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICByYXRpb1ggPSByYXRpb1kgPSB7XG4gICAgICBjZW50ZXI6IC41LFxuICAgICAgZWRnZXM6IC41LFxuICAgICAgZW5kOiAxXG4gICAgfVtmcm9tXSB8fCAwO1xuICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgcmF0aW9YID0gZnJvbVswXTtcbiAgICByYXRpb1kgPSBmcm9tWzFdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpLCB0YXJnZXQsIGEpIHtcbiAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpblksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGQsXG4gICAgICAgIGosXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICB3cmFwQXQ7XG5cbiAgICBpZiAoIWRpc3RhbmNlcykge1xuICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgIG1heCA9IC1fYmlnTnVtO1xuXG4gICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICB3cmFwQXQgPCBsICYmIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKCEhX3JldmVydGluZyk7XG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZSA9IFtdLFxuICAgIF9jcmVhdGVQbHVnaW4gPSBmdW5jdGlvbiBfY3JlYXRlUGx1Z2luKGNvbmZpZykge1xuICBpZiAoX3dpbmRvd0V4aXN0cygpICYmIGNvbmZpZykge1xuICAgIC8vIGVkZ2UgY2FzZTogc29tZSBidWlsZCB0b29scyBtYXkgcGFzcyBpbiBhIG51bGwvdW5kZWZpbmVkIHZhbHVlXG4gICAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvL1VNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICAgIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICAgIGlzRnVuYyA9IF9pc0Z1bmN0aW9uKGNvbmZpZyksXG4gICAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3Byb3BzID0gW107XG4gICAgfSA6IGNvbmZpZyxcbiAgICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgICAgaW5pdDogX2VtcHR5RnVuYyxcbiAgICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAgICBraWxsOiBfa2lsbFByb3BUd2VlbnNPZixcbiAgICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgICByYXdWYXJzOiAwXG4gICAgfSxcbiAgICAgICAgc3RhdGljcyA9IHtcbiAgICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgICBnZXQ6IDAsXG4gICAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgICBhbGlhc2VzOiB7fSxcbiAgICAgIHJlZ2lzdGVyOiAwXG4gICAgfTtcblxuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoY29uZmlnICE9PSBQbHVnaW4pIHtcbiAgICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgICAgX3BsdWdpbnNbUGx1Z2luLnByb3AgPSBuYW1lXSA9IFBsdWdpbjtcblxuICAgICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgICAgX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xuICAgICAgfVxuXG4gICAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gICAgfVxuXG4gICAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gICAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnICYmIF9yZWdpc3RlclBsdWdpblF1ZXVlLnB1c2goY29uZmlnKTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDT0xPUlNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl8yNTUgPSAyNTUsXG4gICAgX2NvbG9yTG9va3VwID0ge1xuICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gIGxpbWU6IFswLCBfMjU1LCAwXSxcbiAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gIGJsYWNrOiBbMCwgMCwgMF0sXG4gIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgbmF2eTogWzAsIDAsIDEyOF0sXG4gIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICB5ZWxsb3c6IFtfMjU1LCBfMjU1LCAwXSxcbiAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gIHBpbms6IFtfMjU1LCAxOTIsIDIwM10sXG4gIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxufSxcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgaWRlYSB0byByZXBsYWNlIHRoZSBoYXJkLWNvZGVkIGNvbG9yIG5hbWUgdmFsdWVzIC0gcHV0IHRoaXMgaW4gdGhlIHRpY2tlci53YWtlKCkgd2hlcmUgd2Ugc2V0IHRoZSBfZG9jOlxuLy8gbGV0IGN0eCA9IF9kb2MuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIik7XG4vLyBfZm9yRWFjaE5hbWUoXCJhcXVhLGxpbWUsc2lsdmVyLGJsYWNrLG1hcm9vbix0ZWFsLGJsdWUsbmF2eSx3aGl0ZSxvbGl2ZSx5ZWxsb3csb3JhbmdlLGdyYXkscHVycGxlLGdyZWVuLHJlZCxwaW5rLGN5YW5cIiwgY29sb3IgPT4ge2N0eC5maWxsU3R5bGUgPSBjb2xvcjsgX2NvbG9yTG9va3VwW2NvbG9yXSA9IHNwbGl0Q29sb3IoY3R4LmZpbGxTdHlsZSl9KTtcbl9odWUgPSBmdW5jdGlvbiBfaHVlKGgsIG0xLCBtMikge1xuICBoICs9IGggPCAwID8gMSA6IGggPiAxID8gLTEgOiAwO1xuICByZXR1cm4gKGggKiA2IDwgMSA/IG0xICsgKG0yIC0gbTEpICogaCAqIDYgOiBoIDwgLjUgPyBtMiA6IGggKiAzIDwgMiA/IG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2IDogbTEpICogXzI1NSArIC41IHwgMDtcbn0sXG4gICAgc3BsaXRDb2xvciA9IGZ1bmN0aW9uIHNwbGl0Q29sb3IodiwgdG9IU0wsIGZvcmNlQWxwaGEpIHtcbiAgdmFyIGEgPSAhdiA/IF9jb2xvckxvb2t1cC5ibGFjayA6IF9pc051bWJlcih2KSA/IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV0gOiAwLFxuICAgICAgcixcbiAgICAgIGcsXG4gICAgICBiLFxuICAgICAgaCxcbiAgICAgIHMsXG4gICAgICBsLFxuICAgICAgbWF4LFxuICAgICAgbWluLFxuICAgICAgZCxcbiAgICAgIHdhc0hTTDtcblxuICBpZiAoIWEpIHtcbiAgICBpZiAodi5zdWJzdHIoLTEpID09PSBcIixcIikge1xuICAgICAgLy9zb21ldGltZXMgYSB0cmFpbGluZyBjb21tYSBpcyBpbmNsdWRlZCBhbmQgd2Ugc2hvdWxkIGNob3AgaXQgb2ZmICh0eXBpY2FsbHkgZnJvbSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcyBsaWtlIGEgdGV4dFNoYWRvdzpcIjJweCAycHggMnB4IGJsdWUsIDVweCA1cHggNXB4IHJnYigyNTUsMCwwKVwiIC0gaW4gdGhpcyBleGFtcGxlIFwiYmx1ZSxcIiBoYXMgYSB0cmFpbGluZyBjb21tYS4gV2UgY291bGQgc3RyaXAgaXQgb3V0IGluc2lkZSBwYXJzZUNvbXBsZXgoKSBidXQgd2UnZCBuZWVkIHRvIGRvIGl0IHRvIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgcGx1cyBpdCB3b3VsZG4ndCBwcm92aWRlIHByb3RlY3Rpb24gZnJvbSBvdGhlciBwb3RlbnRpYWwgc2NlbmFyaW9zIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgc2ltaWxhciB2YWx1ZS5cbiAgICAgIHYgPSB2LnN1YnN0cigwLCB2Lmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIGlmIChfY29sb3JMb29rdXBbdl0pIHtcbiAgICAgIGEgPSBfY29sb3JMb29rdXBbdl07XG4gICAgfSBlbHNlIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgIGlmICh2Lmxlbmd0aCA8IDYpIHtcbiAgICAgICAgLy9mb3Igc2hvcnRoYW5kIGxpa2UgIzlGMCBvciAjOUYwRiAoY291bGQgaGF2ZSBhbHBoYSlcbiAgICAgICAgciA9IHYuY2hhckF0KDEpO1xuICAgICAgICBnID0gdi5jaGFyQXQoMik7XG4gICAgICAgIGIgPSB2LmNoYXJBdCgzKTtcbiAgICAgICAgdiA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiICsgKHYubGVuZ3RoID09PSA1ID8gdi5jaGFyQXQoNCkgKyB2LmNoYXJBdCg0KSA6IFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodi5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgLy8gaGV4IHdpdGggYWxwaGEsIGxpa2UgI2ZkNWU1M2ZmXG4gICAgICAgIGEgPSBwYXJzZUludCh2LnN1YnN0cigxLCA2KSwgMTYpO1xuICAgICAgICByZXR1cm4gW2EgPj4gMTYsIGEgPj4gOCAmIF8yNTUsIGEgJiBfMjU1LCBwYXJzZUludCh2LnN1YnN0cig3KSwgMTYpIC8gMjU1XTtcbiAgICAgIH1cblxuICAgICAgdiA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG4gICAgICBhID0gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XTtcbiAgICB9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG4gICAgICBhID0gd2FzSFNMID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKTtcblxuICAgICAgaWYgKCF0b0hTTCkge1xuICAgICAgICBoID0gK2FbMF0gJSAzNjAgLyAzNjA7XG4gICAgICAgIHMgPSArYVsxXSAvIDEwMDtcbiAgICAgICAgbCA9ICthWzJdIC8gMTAwO1xuICAgICAgICBnID0gbCA8PSAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgciA9IGwgKiAyIC0gZztcbiAgICAgICAgYS5sZW5ndGggPiAzICYmIChhWzNdICo9IDEpOyAvL2Nhc3QgYXMgbnVtYmVyXG5cbiAgICAgICAgYVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcbiAgICAgICAgYVsxXSA9IF9odWUoaCwgciwgZyk7XG4gICAgICAgIGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG4gICAgICB9IGVsc2UgaWYgKH52LmluZGV4T2YoXCI9XCIpKSB7XG4gICAgICAgIC8vaWYgcmVsYXRpdmUgdmFsdWVzIGFyZSBmb3VuZCwganVzdCByZXR1cm4gdGhlIHJhdyBzdHJpbmdzIHdpdGggdGhlIHJlbGF0aXZlIHByZWZpeGVzIGluIHBsYWNlLlxuICAgICAgICBhID0gdi5tYXRjaChfbnVtRXhwKTtcbiAgICAgICAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApIHx8IF9jb2xvckxvb2t1cC50cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICBhID0gYS5tYXAoTnVtYmVyKTtcbiAgfVxuXG4gIGlmICh0b0hTTCAmJiAhd2FzSFNMKSB7XG4gICAgciA9IGFbMF0gLyBfMjU1O1xuICAgIGcgPSBhWzFdIC8gXzI1NTtcbiAgICBiID0gYVsyXSAvIF8yNTU7XG4gICAgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgbCA9IChtYXggKyBtaW4pIC8gMjtcblxuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgaCA9IHMgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gbWF4IC0gbWluO1xuICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgaCA9IG1heCA9PT0gciA/IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApIDogbWF4ID09PSBnID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9XG5cbiAgICBhWzBdID0gfn4oaCArIC41KTtcbiAgICBhWzFdID0gfn4ocyAqIDEwMCArIC41KTtcbiAgICBhWzJdID0gfn4obCAqIDEwMCArIC41KTtcbiAgfVxuXG4gIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gIHJldHVybiBhO1xufSxcbiAgICBfY29sb3JPcmRlckRhdGEgPSBmdW5jdGlvbiBfY29sb3JPcmRlckRhdGEodikge1xuICAvLyBzdHJpcHMgb3V0IHRoZSBjb2xvcnMgZnJvbSB0aGUgc3RyaW5nLCBmaW5kcyBhbGwgdGhlIG51bWVyaWMgc2xvdHMgKHdpdGggdW5pdHMpIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRob3NlLiBUaGUgQXJyYXkgYWxzbyBoYXMgYSBcImNcIiBwcm9wZXJ0eSB3aGljaCBpcyBhbiBBcnJheSBvZiB0aGUgaW5kZXggdmFsdWVzIHdoZXJlIHRoZSBjb2xvcnMgYmVsb25nLiBUaGlzIGlzIHRvIGhlbHAgd29yayBhcm91bmQgaXNzdWVzIHdoZXJlIHRoZXJlJ3MgYSBtaXMtbWF0Y2hlZCBvcmRlciBvZiBjb2xvci9udW1lcmljIGRhdGEgbGlrZSBkcm9wLXNoYWRvdygjZjAwIDBweCAxcHggMnB4KSBhbmQgZHJvcC1zaGFkb3coMHggMXB4IDJweCAjZjAwKS4gVGhpcyBpcyBiYXNpY2FsbHkgYSBoZWxwZXIgZnVuY3Rpb24gdXNlZCBpbiBfZm9ybWF0Q29sb3JzKClcbiAgdmFyIHZhbHVlcyA9IFtdLFxuICAgICAgYyA9IFtdLFxuICAgICAgaSA9IC0xO1xuICB2LnNwbGl0KF9jb2xvckV4cCkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIHZhciBhID0gdi5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgYSk7XG4gICAgYy5wdXNoKGkgKz0gYS5sZW5ndGggKyAxKTtcbiAgfSk7XG4gIHZhbHVlcy5jID0gYztcbiAgcmV0dXJuIHZhbHVlcztcbn0sXG4gICAgX2Zvcm1hdENvbG9ycyA9IGZ1bmN0aW9uIF9mb3JtYXRDb2xvcnMocywgdG9IU0wsIG9yZGVyTWF0Y2hEYXRhKSB7XG4gIHZhciByZXN1bHQgPSBcIlwiLFxuICAgICAgY29sb3JzID0gKHMgKyByZXN1bHQpLm1hdGNoKF9jb2xvckV4cCksXG4gICAgICB0eXBlID0gdG9IU0wgPyBcImhzbGEoXCIgOiBcInJnYmEoXCIsXG4gICAgICBpID0gMCxcbiAgICAgIGMsXG4gICAgICBzaGVsbCxcbiAgICAgIGQsXG4gICAgICBsO1xuXG4gIGlmICghY29sb3JzKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHJldHVybiAoY29sb3IgPSBzcGxpdENvbG9yKGNvbG9yLCB0b0hTTCwgMSkpICYmIHR5cGUgKyAodG9IU0wgPyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG4gIH0pO1xuXG4gIGlmIChvcmRlck1hdGNoRGF0YSkge1xuICAgIGQgPSBfY29sb3JPcmRlckRhdGEocyk7XG4gICAgYyA9IG9yZGVyTWF0Y2hEYXRhLmM7XG5cbiAgICBpZiAoYy5qb2luKHJlc3VsdCkgIT09IGQuYy5qb2luKHJlc3VsdCkpIHtcbiAgICAgIHNoZWxsID0gcy5yZXBsYWNlKF9jb2xvckV4cCwgXCIxXCIpLnNwbGl0KF9udW1XaXRoVW5pdEV4cCk7XG4gICAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgKH5jLmluZGV4T2YoaSkgPyBjb2xvcnMuc2hpZnQoKSB8fCB0eXBlICsgXCIwLDAsMCwwKVwiIDogKGQubGVuZ3RoID8gZCA6IGNvbG9ycy5sZW5ndGggPyBjb2xvcnMgOiBvcmRlck1hdGNoRGF0YSkuc2hpZnQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzaGVsbCkge1xuICAgIHNoZWxsID0gcy5zcGxpdChfY29sb3JFeHApO1xuICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArIGNvbG9yc1tpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc2hlbGxbbF07XG59LFxuICAgIF9jb2xvckV4cCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHMgPSBcIig/OlxcXFxiKD86KD86cmdifHJnYmF8aHNsfGhzbGEpXFxcXCguKz9cXFxcKSl8XFxcXEIjKD86WzAtOWEtZl17Myw0fSl7MSwyfVxcXFxiXCIsXG4gICAgICAvL3dlJ2xsIGR5bmFtaWNhbGx5IGJ1aWxkIHRoaXMgUmVndWxhciBFeHByZXNzaW9uIHRvIGNvbnNlcnZlIGZpbGUgc2l6ZS4gQWZ0ZXIgYnVpbGRpbmcgaXQsIGl0IHdpbGwgYmUgYWJsZSB0byBmaW5kIHJnYigpLCByZ2JhKCksICMgKGhleGFkZWNpbWFsKSwgYW5kIG5hbWVkIGNvbG9yIHZhbHVlcyBsaWtlIHJlZCwgYmx1ZSwgcHVycGxlLCBldGMuLFxuICBwO1xuXG4gIGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcbiAgICBzICs9IFwifFwiICsgcCArIFwiXFxcXGJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHMgKyBcIilcIiwgXCJnaVwiKTtcbn0oKSxcbiAgICBfaHNsRXhwID0gL2hzbFthXT9cXCgvLFxuICAgIF9jb2xvclN0cmluZ0ZpbHRlciA9IGZ1bmN0aW9uIF9jb2xvclN0cmluZ0ZpbHRlcihhKSB7XG4gIHZhciBjb21iaW5lZCA9IGEuam9pbihcIiBcIiksXG4gICAgICB0b0hTTDtcbiAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgaWYgKF9jb2xvckV4cC50ZXN0KGNvbWJpbmVkKSkge1xuICAgIHRvSFNMID0gX2hzbEV4cC50ZXN0KGNvbWJpbmVkKTtcbiAgICBhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG4gICAgYVswXSA9IF9mb3JtYXRDb2xvcnMoYVswXSwgdG9IU0wsIF9jb2xvck9yZGVyRGF0YShhWzFdKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3JkZXIgb2YgbnVtYmVycy9jb2xvcnMgbWF0Y2ggd2l0aCB0aGUgRU5EIHZhbHVlLlxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVElDS0VSXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fdGlja2VyQWN0aXZlLFxuICAgIF90aWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgICAgX2xhZ1RocmVzaG9sZCA9IDUwMCxcbiAgICAgIF9hZGp1c3RlZExhZyA9IDMzLFxuICAgICAgX3N0YXJ0VGltZSA9IF9nZXRUaW1lKCksXG4gICAgICBfbGFzdFVwZGF0ZSA9IF9zdGFydFRpbWUsXG4gICAgICBfZ2FwID0gMTAwMCAvIDI0MCxcbiAgICAgIF9uZXh0VGltZSA9IF9nYXAsXG4gICAgICBfbGlzdGVuZXJzID0gW10sXG4gICAgICBfaWQsXG4gICAgICBfcmVxLFxuICAgICAgX3JhZixcbiAgICAgIF9zZWxmLFxuICAgICAgX2RlbHRhLFxuICAgICAgX2ksXG4gICAgICBfdGljayA9IGZ1bmN0aW9uIF90aWNrKHYpIHtcbiAgICB2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcbiAgICAgICAgbWFudWFsID0gdiA9PT0gdHJ1ZSxcbiAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIGZyYW1lO1xuXG4gICAgZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgJiYgKF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZyk7XG4gICAgX2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcbiAgICB0aW1lID0gX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lO1xuICAgIG92ZXJsYXAgPSB0aW1lIC0gX25leHRUaW1lO1xuXG4gICAgaWYgKG92ZXJsYXAgPiAwIHx8IG1hbnVhbCkge1xuICAgICAgZnJhbWUgPSArK19zZWxmLmZyYW1lO1xuICAgICAgX2RlbHRhID0gdGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwO1xuICAgICAgX3NlbGYudGltZSA9IHRpbWUgPSB0aW1lIC8gMTAwMDtcbiAgICAgIF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDQgOiBfZ2FwIC0gb3ZlcmxhcCk7XG4gICAgICBkaXNwYXRjaCA9IDE7XG4gICAgfVxuXG4gICAgbWFudWFsIHx8IChfaWQgPSBfcmVxKF90aWNrKSk7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IF9saXN0ZW5lcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIC8vIHVzZSBfaSBhbmQgY2hlY2sgX2xpc3RlbmVycy5sZW5ndGggaW5zdGVhZCBvZiBhIHZhcmlhYmxlIGJlY2F1c2UgYSBsaXN0ZW5lciBjb3VsZCBnZXQgcmVtb3ZlZCBkdXJpbmcgdGhlIGxvb3AsIGFuZCBpZiB0aGF0IGhhcHBlbnMgdG8gYW4gZWxlbWVudCBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgaW5kZXgsIGl0J2QgdGhyb3cgdGhpbmdzIG9mZiBpbiB0aGUgbG9vcC5cbiAgICAgICAgX2xpc3RlbmVyc1tfaV0odGltZSwgX2RlbHRhLCBmcmFtZSwgdik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmID0ge1xuICAgIHRpbWU6IDAsXG4gICAgZnJhbWU6IDAsXG4gICAgdGljazogZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIF90aWNrKHRydWUpO1xuICAgIH0sXG4gICAgZGVsdGFSYXRpbzogZnVuY3Rpb24gZGVsdGFSYXRpbyhmcHMpIHtcbiAgICAgIHJldHVybiBfZGVsdGEgLyAoMTAwMCAvIChmcHMgfHwgNjApKTtcbiAgICB9LFxuICAgIHdha2U6IGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgICBpZiAoX2NvcmVSZWFkeSkge1xuICAgICAgICBpZiAoIV9jb3JlSW5pdHRlZCAmJiBfd2luZG93RXhpc3RzKCkpIHtcbiAgICAgICAgICBfd2luID0gX2NvcmVJbml0dGVkID0gd2luZG93O1xuICAgICAgICAgIF9kb2MgPSBfd2luLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICAgIF9nbG9iYWxzLmdzYXAgPSBnc2FwO1xuICAgICAgICAgIChfd2luLmdzYXBWZXJzaW9ucyB8fCAoX3dpbi5nc2FwVmVyc2lvbnMgPSBbXSkpLnB1c2goZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAgIF9pbnN0YWxsKF9pbnN0YWxsU2NvcGUgfHwgX3dpbi5HcmVlblNvY2tHbG9iYWxzIHx8ICFfd2luLmdzYXAgJiYgX3dpbiB8fCB7fSk7XG5cbiAgICAgICAgICBfcmFmID0gX3dpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICAgICAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5mb3JFYWNoKF9jcmVhdGVQbHVnaW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgX2lkICYmIF9zZWxmLnNsZWVwKCk7XG5cbiAgICAgICAgX3JlcSA9IF9yYWYgfHwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBfbmV4dFRpbWUgLSBfc2VsZi50aW1lICogMTAwMCArIDEgfCAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGlja2VyQWN0aXZlID0gMTtcblxuICAgICAgICBfdGljaygyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsZWVwOiBmdW5jdGlvbiBzbGVlcCgpIHtcbiAgICAgIChfcmFmID8gX3dpbi5jYW5jZWxBbmltYXRpb25GcmFtZSA6IGNsZWFyVGltZW91dCkoX2lkKTtcbiAgICAgIF90aWNrZXJBY3RpdmUgPSAwO1xuICAgICAgX3JlcSA9IF9lbXB0eUZ1bmM7XG4gICAgfSxcbiAgICBsYWdTbW9vdGhpbmc6IGZ1bmN0aW9uIGxhZ1Ntb290aGluZyh0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG4gICAgICBfbGFnVGhyZXNob2xkID0gdGhyZXNob2xkIHx8IEluZmluaXR5OyAvLyB6ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cbiAgICAgIF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnIHx8IDMzLCBfbGFnVGhyZXNob2xkKTtcbiAgICB9LFxuICAgIGZwczogZnVuY3Rpb24gZnBzKF9mcHMpIHtcbiAgICAgIF9nYXAgPSAxMDAwIC8gKF9mcHMgfHwgMjQwKTtcbiAgICAgIF9uZXh0VGltZSA9IF9zZWxmLnRpbWUgKiAxMDAwICsgX2dhcDtcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24gYWRkKGNhbGxiYWNrLCBvbmNlLCBwcmlvcml0aXplKSB7XG4gICAgICB2YXIgZnVuYyA9IG9uY2UgPyBmdW5jdGlvbiAodCwgZCwgZiwgdikge1xuICAgICAgICBjYWxsYmFjayh0LCBkLCBmLCB2KTtcblxuICAgICAgICBfc2VsZi5yZW1vdmUoZnVuYyk7XG4gICAgICB9IDogY2FsbGJhY2s7XG5cbiAgICAgIF9zZWxmLnJlbW92ZShjYWxsYmFjayk7XG5cbiAgICAgIF9saXN0ZW5lcnNbcHJpb3JpdGl6ZSA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCJdKGZ1bmMpO1xuXG4gICAgICBfd2FrZSgpO1xuXG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNhbGxiYWNrLCBpKSB7XG4gICAgICB+KGkgPSBfbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spKSAmJiBfbGlzdGVuZXJzLnNwbGljZShpLCAxKSAmJiBfaSA+PSBpICYmIF9pLS07XG4gICAgfSxcbiAgICBfbGlzdGVuZXJzOiBfbGlzdGVuZXJzXG4gIH07XG4gIHJldHVybiBfc2VsZjtcbn0oKSxcbiAgICBfd2FrZSA9IGZ1bmN0aW9uIF93YWtlKCkge1xuICByZXR1cm4gIV90aWNrZXJBY3RpdmUgJiYgX3RpY2tlci53YWtlKCk7XG59LFxuICAgIC8vYWxzbyBlbnN1cmVzIHRoZSBjb3JlIGNsYXNzZXMgYXJlIGluaXRpYWxpemVkLlxuXG4vKlxuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIEVBU0lOR1xuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuX2Vhc2VNYXAgPSB7fSxcbiAgICBfY3VzdG9tRWFzZUV4cCA9IC9eW1xcZC5cXC1NXVtcXGQuXFwtLFxcc10vLFxuICAgIF9xdW90ZXNFeHAgPSAvW1wiJ10vZyxcbiAgICBfcGFyc2VPYmplY3RJblN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZU9iamVjdEluU3RyaW5nKHZhbHVlKSB7XG4gIC8vdGFrZXMgYSBzdHJpbmcgbGlrZSBcInt3aWdnbGVzOjEwLCB0eXBlOmFudGljaXBhdGV9KVwiIGFuZCB0dXJucyBpdCBpbnRvIGEgcmVhbCBvYmplY3QuIE5vdGljZSBpdCBlbmRzIGluIFwiKVwiIGFuZCBpbmNsdWRlcyB0aGUge30gd3JhcHBlcnMuIFRoaXMgaXMgYmVjYXVzZSB3ZSBvbmx5IHVzZSB0aGlzIGZ1bmN0aW9uIGZvciBwYXJzaW5nIGVhc2UgY29uZmlncyBhbmQgcHJpb3JpdGl6ZWQgb3B0aW1pemF0aW9uIHJhdGhlciB0aGFuIHJldXNhYmlsaXR5LlxuICB2YXIgb2JqID0ge30sXG4gICAgICBzcGxpdCA9IHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAzKS5zcGxpdChcIjpcIiksXG4gICAgICBrZXkgPSBzcGxpdFswXSxcbiAgICAgIGkgPSAxLFxuICAgICAgbCA9IHNwbGl0Lmxlbmd0aCxcbiAgICAgIGluZGV4LFxuICAgICAgdmFsLFxuICAgICAgcGFyc2VkVmFsO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFsID0gc3BsaXRbaV07XG4gICAgaW5kZXggPSBpICE9PSBsIC0gMSA/IHZhbC5sYXN0SW5kZXhPZihcIixcIikgOiB2YWwubGVuZ3RoO1xuICAgIHBhcnNlZFZhbCA9IHZhbC5zdWJzdHIoMCwgaW5kZXgpO1xuICAgIG9ialtrZXldID0gaXNOYU4ocGFyc2VkVmFsKSA/IHBhcnNlZFZhbC5yZXBsYWNlKF9xdW90ZXNFeHAsIFwiXCIpLnRyaW0oKSA6ICtwYXJzZWRWYWw7XG4gICAga2V5ID0gdmFsLnN1YnN0cihpbmRleCArIDEpLnRyaW0oKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF92YWx1ZUluUGFyZW50aGVzZXMgPSBmdW5jdGlvbiBfdmFsdWVJblBhcmVudGhlc2VzKHZhbHVlKSB7XG4gIHZhciBvcGVuID0gdmFsdWUuaW5kZXhPZihcIihcIikgKyAxLFxuICAgICAgY2xvc2UgPSB2YWx1ZS5pbmRleE9mKFwiKVwiKSxcbiAgICAgIG5lc3RlZCA9IHZhbHVlLmluZGV4T2YoXCIoXCIsIG9wZW4pO1xuICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKG9wZW4sIH5uZXN0ZWQgJiYgbmVzdGVkIDwgY2xvc2UgPyB2YWx1ZS5pbmRleE9mKFwiKVwiLCBjbG9zZSArIDEpIDogY2xvc2UpO1xufSxcbiAgICBfY29uZmlnRWFzZUZyb21TdHJpbmcgPSBmdW5jdGlvbiBfY29uZmlnRWFzZUZyb21TdHJpbmcobmFtZSkge1xuICAvL25hbWUgY2FuIGJlIGEgc3RyaW5nIGxpa2UgXCJlbGFzdGljLm91dCgxLDAuNSlcIiwgYW5kIHBhc3MgaW4gX2Vhc2VNYXAgYXMgb2JqIGFuZCBpdCdsbCBwYXJzZSBpdCBvdXQgYW5kIGNhbGwgdGhlIGFjdHVhbCBmdW5jdGlvbiBsaWtlIF9lYXNlTWFwLkVsYXN0aWMuZWFzZU91dC5jb25maWcoMSwwLjUpLiBJdCB3aWxsIGFsc28gcGFyc2UgY3VzdG9tIGVhc2Ugc3RyaW5ncyBhcyBsb25nIGFzIEN1c3RvbUVhc2UgaXMgbG9hZGVkIGFuZCByZWdpc3RlcmVkIChpbnRlcm5hbGx5IGFzIF9lYXNlTWFwLl9DRSkuXG4gIHZhciBzcGxpdCA9IChuYW1lICsgXCJcIikuc3BsaXQoXCIoXCIpLFxuICAgICAgZWFzZSA9IF9lYXNlTWFwW3NwbGl0WzBdXTtcbiAgcmV0dXJuIGVhc2UgJiYgc3BsaXQubGVuZ3RoID4gMSAmJiBlYXNlLmNvbmZpZyA/IGVhc2UuY29uZmlnLmFwcGx5KG51bGwsIH5uYW1lLmluZGV4T2YoXCJ7XCIpID8gW19wYXJzZU9iamVjdEluU3RyaW5nKHNwbGl0WzFdKV0gOiBfdmFsdWVJblBhcmVudGhlc2VzKG5hbWUpLnNwbGl0KFwiLFwiKS5tYXAoX251bWVyaWNJZlBvc3NpYmxlKSkgOiBfZWFzZU1hcC5fQ0UgJiYgX2N1c3RvbUVhc2VFeHAudGVzdChuYW1lKSA/IF9lYXNlTWFwLl9DRShcIlwiLCBuYW1lKSA6IGVhc2U7XG59LFxuICAgIF9pbnZlcnRFYXNlID0gZnVuY3Rpb24gX2ludmVydEVhc2UoZWFzZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2UoMSAtIHApO1xuICB9O1xufSxcbiAgICAvLyBhbGxvdyB5b3lvRWFzZSB0byBiZSBzZXQgaW4gY2hpbGRyZW4gYW5kIGhhdmUgdGhvc2UgYWZmZWN0ZWQgd2hlbiB0aGUgcGFyZW50L2FuY2VzdG9yIHRpbWVsaW5lIHlveW9zLlxuX3Byb3BhZ2F0ZVlveW9FYXNlID0gZnVuY3Rpb24gX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pIHtcbiAgdmFyIGNoaWxkID0gdGltZWxpbmUuX2ZpcnN0LFxuICAgICAgZWFzZTtcblxuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLCBpc1lveW8pO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQudmFycy55b3lvRWFzZSAmJiAoIWNoaWxkLl95b3lvIHx8ICFjaGlsZC5fcmVwZWF0KSAmJiBjaGlsZC5feW95byAhPT0gaXNZb3lvKSB7XG4gICAgICBpZiAoY2hpbGQudGltZWxpbmUpIHtcbiAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLnRpbWVsaW5lLCBpc1lveW8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWFzZSA9IGNoaWxkLl9lYXNlO1xuICAgICAgICBjaGlsZC5fZWFzZSA9IGNoaWxkLl95RWFzZTtcbiAgICAgICAgY2hpbGQuX3lFYXNlID0gZWFzZTtcbiAgICAgICAgY2hpbGQuX3lveW8gPSBpc1lveW87XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgfVxufSxcbiAgICBfcGFyc2VFYXNlID0gZnVuY3Rpb24gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICByZXR1cm4gIWVhc2UgPyBkZWZhdWx0RWFzZSA6IChfaXNGdW5jdGlvbihlYXNlKSA/IGVhc2UgOiBfZWFzZU1hcFtlYXNlXSB8fCBfY29uZmlnRWFzZUZyb21TdHJpbmcoZWFzZSkpIHx8IGRlZmF1bHRFYXNlO1xufSxcbiAgICBfaW5zZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnNlcnRFYXNlKG5hbWVzLCBlYXNlSW4sIGVhc2VPdXQsIGVhc2VJbk91dCkge1xuICBpZiAoZWFzZU91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgICAgcmV0dXJuIDEgLSBlYXNlSW4oMSAtIHApO1xuICAgIH07XG4gIH1cblxuICBpZiAoZWFzZUluT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlSW5PdXQgPSBmdW5jdGlvbiBlYXNlSW5PdXQocCkge1xuICAgICAgcmV0dXJuIHAgPCAuNSA/IGVhc2VJbihwICogMikgLyAyIDogMSAtIGVhc2VJbigoMSAtIHApICogMikgLyAyO1xuICAgIH07XG4gIH1cblxuICB2YXIgZWFzZSA9IHtcbiAgICBlYXNlSW46IGVhc2VJbixcbiAgICBlYXNlT3V0OiBlYXNlT3V0LFxuICAgIGVhc2VJbk91dDogZWFzZUluT3V0XG4gIH0sXG4gICAgICBsb3dlcmNhc2VOYW1lO1xuXG4gIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9nbG9iYWxzW25hbWVdID0gZWFzZTtcbiAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXSA9IGVhc2VPdXQ7XG5cbiAgICBmb3IgKHZhciBwIGluIGVhc2UpIHtcbiAgICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgKyAocCA9PT0gXCJlYXNlSW5cIiA/IFwiLmluXCIgOiBwID09PSBcImVhc2VPdXRcIiA/IFwiLm91dFwiIDogXCIuaW5PdXRcIildID0gX2Vhc2VNYXBbbmFtZSArIFwiLlwiICsgcF0gPSBlYXNlW3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9lYXNlSW5PdXRGcm9tT3V0ID0gZnVuY3Rpb24gX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gKDEgLSBlYXNlT3V0KDEgLSBwICogMikpIC8gMiA6IC41ICsgZWFzZU91dCgocCAtIC41KSAqIDIpIC8gMjtcbiAgfTtcbn0sXG4gICAgX2NvbmZpZ0VsYXN0aWMgPSBmdW5jdGlvbiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICB2YXIgcDEgPSBhbXBsaXR1ZGUgPj0gMSA/IGFtcGxpdHVkZSA6IDEsXG4gICAgICAvL25vdGU6IGlmIGFtcGxpdHVkZSBpcyA8IDEsIHdlIHNpbXBseSBhZGp1c3QgdGhlIHBlcmlvZCBmb3IgYSBtb3JlIG5hdHVyYWwgZmVlbC4gT3RoZXJ3aXNlIHRoZSBtYXRoIGRvZXNuJ3Qgd29yayByaWdodCBhbmQgdGhlIGN1cnZlIHN0YXJ0cyBhdCAxLlxuICBwMiA9IChwZXJpb2QgfHwgKHR5cGUgPyAuMyA6IC40NSkpIC8gKGFtcGxpdHVkZSA8IDEgPyBhbXBsaXR1ZGUgOiAxKSxcbiAgICAgIHAzID0gcDIgLyBfMlBJICogKE1hdGguYXNpbigxIC8gcDEpIHx8IDApLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID09PSAxID8gMSA6IHAxICogTWF0aC5wb3coMiwgLTEwICogcCkgKiBfc2luKChwIC0gcDMpICogcDIpICsgMTtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIHAyID0gXzJQSSAvIHAyOyAvL3ByZWNhbGN1bGF0ZSB0byBvcHRpbWl6ZVxuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gICAgcmV0dXJuIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2NvbmZpZ0JhY2sgPSBmdW5jdGlvbiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpIHtcbiAgaWYgKG92ZXJzaG9vdCA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnNob290ID0gMS43MDE1ODtcbiAgfVxuXG4gIHZhciBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPyAtLXAgKiBwICogKChvdmVyc2hvb3QgKyAxKSAqIHAgKyBvdmVyc2hvb3QpICsgMSA6IDA7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChvdmVyc2hvb3QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn07IC8vIGEgY2hlYXBlciAoa2IgYW5kIGNwdSkgYnV0IG1vcmUgbWlsZCB3YXkgdG8gZ2V0IGEgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIGJ5IGZlZWRpbmcgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2UgPSByYXRpbyA9PiB7XG4vLyBcdGxldCB5ID0gMC41ICsgcmF0aW8gLyAyO1xuLy8gXHRyZXR1cm4gcCA9PiAoMiAqICgxIC0gcCkgKiBwICogeSArIHAgKiBwKTtcbi8vIH0sXG4vLyBhIHN0cm9uZ2VyIChidXQgbW9yZSBleHBlbnNpdmUga2IvY3B1KSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgdGhhdCBsZXRzIHlvdSBmZWVkIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlU3Ryb25nID0gcmF0aW8gPT4ge1xuLy8gXHRyYXRpbyA9IC41ICsgcmF0aW8gLyAyO1xuLy8gXHRsZXQgbyA9IDEgLyAzICogKHJhdGlvIDwgLjUgPyByYXRpbyA6IDEgLSByYXRpbyksXG4vLyBcdFx0YiA9IHJhdGlvIC0gbyxcbi8vIFx0XHRjID0gcmF0aW8gKyBvO1xuLy8gXHRyZXR1cm4gcCA9PiBwID09PSAxID8gcCA6IDMgKiBiICogKDEgLSBwKSAqICgxIC0gcCkgKiBwICsgMyAqIGMgKiAoMSAtIHApICogcCAqIHAgKyBwICogcCAqIHA7XG4vLyB9O1xuXG5cbl9mb3JFYWNoTmFtZShcIkxpbmVhcixRdWFkLEN1YmljLFF1YXJ0LFF1aW50LFN0cm9uZ1wiLCBmdW5jdGlvbiAobmFtZSwgaSkge1xuICB2YXIgcG93ZXIgPSBpIDwgNSA/IGkgKyAxIDogaTtcblxuICBfaW5zZXJ0RWFzZShuYW1lICsgXCIsUG93ZXJcIiArIChwb3dlciAtIDEpLCBpID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocCwgcG93ZXIpO1xuICB9IDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcDtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSBwLCBwb3dlcik7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/IE1hdGgucG93KHAgKiAyLCBwb3dlcikgLyAyIDogMSAtIE1hdGgucG93KCgxIC0gcCkgKiAyLCBwb3dlcikgLyAyO1xuICB9KTtcbn0pO1xuXG5fZWFzZU1hcC5MaW5lYXIuZWFzZU5vbmUgPSBfZWFzZU1hcC5ub25lID0gX2Vhc2VNYXAuTGluZWFyLmVhc2VJbjtcblxuX2luc2VydEVhc2UoXCJFbGFzdGljXCIsIF9jb25maWdFbGFzdGljKFwiaW5cIiksIF9jb25maWdFbGFzdGljKFwib3V0XCIpLCBfY29uZmlnRWxhc3RpYygpKTtcblxuKGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBuMSA9IDEgLyBjLFxuICAgICAgbjIgPSAyICogbjEsXG4gICAgICBuMyA9IDIuNSAqIG4xLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwIDwgbjEgPyBuICogcCAqIHAgOiBwIDwgbjIgPyBuICogTWF0aC5wb3cocCAtIDEuNSAvIGMsIDIpICsgLjc1IDogcCA8IG4zID8gbiAqIChwIC09IDIuMjUgLyBjKSAqIHAgKyAuOTM3NSA6IG4gKiBNYXRoLnBvdyhwIC0gMi42MjUgLyBjLCAyKSArIC45ODQzNzU7XG4gIH07XG5cbiAgX2luc2VydEVhc2UoXCJCb3VuY2VcIiwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9LCBlYXNlT3V0KTtcbn0pKDcuNTYyNSwgMi43NSk7XG5cbl9pbnNlcnRFYXNlKFwiRXhwb1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA/IE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgOiAwO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQ2lyY1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gLShfc3FydCgxIC0gcCAqIHApIC0gMSk7XG59KTtcblxuX2luc2VydEVhc2UoXCJTaW5lXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID09PSAxID8gMSA6IC1fY29zKHAgKiBfSEFMRl9QSSkgKyAxO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQmFja1wiLCBfY29uZmlnQmFjayhcImluXCIpLCBfY29uZmlnQmFjayhcIm91dFwiKSwgX2NvbmZpZ0JhY2soKSk7XG5cbl9lYXNlTWFwLlN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuc3RlcHMgPSBfZ2xvYmFscy5TdGVwcGVkRWFzZSA9IHtcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoc3RlcHMsIGltbWVkaWF0ZVN0YXJ0KSB7XG4gICAgaWYgKHN0ZXBzID09PSB2b2lkIDApIHtcbiAgICAgIHN0ZXBzID0gMTtcbiAgICB9XG5cbiAgICB2YXIgcDEgPSAxIC8gc3RlcHMsXG4gICAgICAgIHAyID0gc3RlcHMgKyAoaW1tZWRpYXRlU3RhcnQgPyAwIDogMSksXG4gICAgICAgIHAzID0gaW1tZWRpYXRlU3RhcnQgPyAxIDogMCxcbiAgICAgICAgbWF4ID0gMSAtIF90aW55TnVtO1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuICgocDIgKiBfY2xhbXAoMCwgbWF4LCBwKSB8IDApICsgcDMpICogcDE7XG4gICAgfTtcbiAgfVxufTtcbl9kZWZhdWx0cy5lYXNlID0gX2Vhc2VNYXBbXCJxdWFkLm91dFwiXTtcblxuX2ZvckVhY2hOYW1lKFwib25Db21wbGV0ZSxvblVwZGF0ZSxvblN0YXJ0LG9uUmVwZWF0LG9uUmV2ZXJzZUNvbXBsZXRlLG9uSW50ZXJydXB0XCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfY2FsbGJhY2tOYW1lcyArPSBuYW1lICsgXCIsXCIgKyBuYW1lICsgXCJQYXJhbXMsXCI7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ0FDSEVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIEdTQ2FjaGUgPSBmdW5jdGlvbiBHU0NhY2hlKHRhcmdldCwgaGFybmVzcykge1xuICB0aGlzLmlkID0gX2dzSUQrKztcbiAgdGFyZ2V0Ll9nc2FwID0gdGhpcztcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMuaGFybmVzcyA9IGhhcm5lc3M7XG4gIHRoaXMuZ2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0IDogX2dldFByb3BlcnR5O1xuICB0aGlzLnNldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldFNldHRlciA6IF9nZXRTZXR0ZXI7XG59O1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBTklNQVRJT05cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZXhwb3J0IHZhciBBbmltYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBbmltYXRpb24odmFycykge1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgdGhpcy5fZGVsYXkgPSArdmFycy5kZWxheSB8fCAwO1xuXG4gICAgaWYgKHRoaXMuX3JlcGVhdCA9IHZhcnMucmVwZWF0ID09PSBJbmZpbml0eSA/IC0yIDogdmFycy5yZXBlYXQgfHwgMCkge1xuICAgICAgLy8gVE9ETzogcmVwZWF0OiBJbmZpbml0eSBvbiBhIHRpbWVsaW5lJ3MgY2hpbGRyZW4gbXVzdCBmbGFnIHRoYXQgdGltZWxpbmUgaW50ZXJuYWxseSBhbmQgYWZmZWN0IGl0cyB0b3RhbER1cmF0aW9uLCBvdGhlcndpc2UgaXQnbGwgc3RvcCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIHdoZW4gcmVhY2hpbmcgdGhlIHN0YXJ0LlxuICAgICAgdGhpcy5fckRlbGF5ID0gdmFycy5yZXBlYXREZWxheSB8fCAwO1xuICAgICAgdGhpcy5feW95byA9ICEhdmFycy55b3lvIHx8ICEhdmFycy55b3lvRWFzZTtcbiAgICB9XG5cbiAgICB0aGlzLl90cyA9IDE7XG5cbiAgICBfc2V0RHVyYXRpb24odGhpcywgK3ZhcnMuZHVyYXRpb24sIDEsIDEpO1xuXG4gICAgdGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXG4gICAgaWYgKF9jb250ZXh0KSB7XG4gICAgICB0aGlzLl9jdHggPSBfY29udGV4dDtcblxuICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICAgIH1cblxuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQW5pbWF0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVsYXkgPSBmdW5jdGlvbiBkZWxheSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5zdGFydFRpbWUodGhpcy5fc3RhcnQgKyB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHRoaXMuX2RlbGF5ID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLmR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxEdXJhdGlvbih0aGlzLl9yZXBlYXQgPiAwID8gdmFsdWUgKyAodmFsdWUgKyB0aGlzLl9yRGVsYXkpICogdGhpcy5fcmVwZWF0IDogdmFsdWUpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgJiYgdGhpcy5fZHVyO1xuICB9O1xuXG4gIF9wcm90by50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3REdXI7XG4gICAgfVxuXG4gICAgdGhpcy5fZGlydHkgPSAwO1xuICAgIHJldHVybiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fcmVwZWF0IDwgMCA/IHZhbHVlIDogKHZhbHVlIC0gdGhpcy5fcmVwZWF0ICogdGhpcy5fckRlbGF5KSAvICh0aGlzLl9yZXBlYXQgKyAxKSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gdGhpcy5fZHA7XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLl90cykge1xuICAgICAgX2FsaWduUGxheWhlYWQodGhpcywgX3RvdGFsVGltZSk7XG5cbiAgICAgICFwYXJlbnQuX2RwIHx8IHBhcmVudC5wYXJlbnQgfHwgX3Bvc3RBZGRDaGVja3MocGFyZW50LCB0aGlzKTsgLy8gZWRnZSBjYXNlOiBpZiB0aGlzIGlzIGEgY2hpbGQgb2YgYSB0aW1lbGluZSB0aGF0IGFscmVhZHkgY29tcGxldGVkLCBmb3IgZXhhbXBsZSwgd2UgbXVzdCByZS1hY3RpdmF0ZSB0aGUgcGFyZW50LlxuICAgICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3IgdGltZWxpbmVzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZCwgd2Ugc2hvdWxkIHJlc2V0IHRoZWlyIHRvdGFsVGltZSgpIHdoaWNoIHdpbGwgYWxzbyBlbnN1cmUgdGhhdCB0aGV5J3JlIGxpbmVkIHVwIHByb3Blcmx5IGFuZCBlbmFibGVkLiBTa2lwIGZvciBhbmltYXRpb25zIHRoYXQgYXJlIG9uIHRoZSByb290ICh3YXN0ZWZ1bCkuIEV4YW1wbGU6IGEgVGltZWxpbmVMaXRlLmV4cG9ydFJvb3QoKSBpcyBwZXJmb3JtZWQgd2hlbiB0aGVyZSdzIGEgcGF1c2VkIHR3ZWVuIG9uIHRoZSByb290LCB0aGUgZXhwb3J0IHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoYXQgdHdlZW4gaXMgdW5wYXVzZWQsIGJ1dCBpbWFnaW5lIGEgY2hpbGQgZ2V0cyByZXN0YXJ0ZWQgbGF0ZXIsIGFmdGVyIGFsbCBbdW5wYXVzZWRdIHR3ZWVucyBoYXZlIGNvbXBsZXRlZC4gVGhlIHN0YXJ0IG9mIHRoYXQgY2hpbGQgd291bGQgZ2V0IHB1c2hlZCBvdXQsIGJ1dCBvbmUgb2YgdGhlIGFuY2VzdG9ycyBtYXkgaGF2ZSBjb21wbGV0ZWQuXG5cbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LnBhcmVudC5fdGltZSAhPT0gcGFyZW50Ll9zdGFydCArIChwYXJlbnQuX3RzID49IDAgPyBwYXJlbnQuX3RUaW1lIC8gcGFyZW50Ll90cyA6IChwYXJlbnQudG90YWxEdXJhdGlvbigpIC0gcGFyZW50Ll90VGltZSkgLyAtcGFyZW50Ll90cykpIHtcbiAgICAgICAgICBwYXJlbnQudG90YWxUaW1lKHBhcmVudC5fdFRpbWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnBhcmVudCAmJiB0aGlzLl9kcC5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgKHRoaXMuX3RzID4gMCAmJiBfdG90YWxUaW1lIDwgdGhpcy5fdER1ciB8fCB0aGlzLl90cyA8IDAgJiYgX3RvdGFsVGltZSA+IDAgfHwgIXRoaXMuX3REdXIgJiYgIV90b3RhbFRpbWUpKSB7XG4gICAgICAgIC8vaWYgdGhlIGFuaW1hdGlvbiBkb2Vzbid0IGhhdmUgYSBwYXJlbnQsIHB1dCBpdCBiYWNrIGludG8gaXRzIGxhc3QgcGFyZW50IChyZWNvcmRlZCBhcyBfZHAgZm9yIGV4YWN0bHkgY2FzZXMgbGlrZSB0aGlzKS4gTGltaXQgdG8gcGFyZW50cyB3aXRoIGF1dG9SZW1vdmVDaGlsZHJlbiAobGlrZSBnbG9iYWxUaW1lbGluZSkgc28gdGhhdCBpZiB0aGUgdXNlciBtYW51YWxseSByZW1vdmVzIGFuIGFuaW1hdGlvbiBmcm9tIGEgdGltZWxpbmUgYW5kIHRoZW4gYWx0ZXJzIGl0cyBwbGF5aGVhZCwgaXQgZG9lc24ndCBnZXQgYWRkZWQgYmFjayBpbi5cbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGhpcy5fZHAsIHRoaXMsIHRoaXMuX3N0YXJ0IC0gdGhpcy5fZGVsYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl90VGltZSAhPT0gX3RvdGFsVGltZSB8fCAhdGhpcy5fZHVyICYmICFzdXBwcmVzc0V2ZW50cyB8fCB0aGlzLl9pbml0dGVkICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSA9PT0gX3RpbnlOdW0gfHwgIV90b3RhbFRpbWUgJiYgIXRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuYWRkIHx8IHRoaXMuX3B0TG9va3VwKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIF9wdExvb2t1cCBvbiBhIFR3ZWVuIGluc3RhbmNlIHRvIGVuc3VyZSBpdCBoYXMgYWN0dWFsbHkgZmluaXNoZWQgYmVpbmcgaW5zdGFudGlhdGVkLCBvdGhlcndpc2UgaWYgdGhpcy5yZXZlcnNlKCkgZ2V0cyBjYWxsZWQgaW4gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgaXQgY291bGQgdHJpZ2dlciBhIHJlbmRlcigpIGhlcmUgZXZlbiB0aG91Z2ggdGhlIF90YXJnZXRzIHdlcmVuJ3QgcG9wdWxhdGVkLCB0aHVzIHdoZW4gX2luaXQoKSBpcyBjYWxsZWQgdGhlcmUgd29uJ3QgYmUgYW55IFByb3BUd2VlbnMgKGl0J2xsIGFjdCBsaWtlIHRoZSB0d2VlbiBpcyBub24tZnVuY3Rpb25hbClcbiAgICAgIHRoaXMuX3RzIHx8ICh0aGlzLl9wVGltZSA9IF90b3RhbFRpbWUpOyAvLyBvdGhlcndpc2UsIGlmIGFuIGFuaW1hdGlvbiBpcyBwYXVzZWQsIHRoZW4gdGhlIHBsYXloZWFkIGlzIG1vdmVkIGJhY2sgdG8gemVybywgdGhlbiByZXN1bWVkLCBpdCdkIHJldmVydCBiYWNrIHRvIHRoZSBvcmlnaW5hbCB0aW1lIGF0IHRoZSBwYXVzZVxuICAgICAgLy9pZiAoIXRoaXMuX2xvY2spIHsgLy8gYXZvaWQgZW5kbGVzcyByZWN1cnNpb24gKG5vdCBzdXJlIHdlIG5lZWQgdGhpcyB5ZXQgb3IgaWYgaXQncyB3b3J0aCB0aGUgcGVyZm9ybWFuY2UgaGl0KVxuICAgICAgLy8gICB0aGlzLl9sb2NrID0gMTtcblxuICAgICAgX2xhenlTYWZlUmVuZGVyKHRoaXMsIF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKTsgLy8gICB0aGlzLl9sb2NrID0gMDtcbiAgICAgIC8vfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnRpbWUgPSBmdW5jdGlvbiB0aW1lKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUoTWF0aC5taW4odGhpcy50b3RhbER1cmF0aW9uKCksIHZhbHVlICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpKSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIHx8ICh2YWx1ZSA/IHRoaXMuX2R1ciA6IDApLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl90aW1lOyAvLyBub3RlOiBpZiB0aGUgbW9kdWx1cyByZXN1bHRzIGluIDAsIHRoZSBwbGF5aGVhZCBjb3VsZCBiZSBleGFjdGx5IGF0IHRoZSBlbmQgb3IgdGhlIGJlZ2lubmluZywgYW5kIHdlIGFsd2F5cyBkZWZlciB0byB0aGUgRU5EIHdpdGggYSBub24temVybyB2YWx1ZSwgb3RoZXJ3aXNlIGlmIHlvdSBzZXQgdGhlIHRpbWUoKSB0byB0aGUgdmVyeSBlbmQgKGR1cmF0aW9uKCkpLCBpdCB3b3VsZCByZW5kZXIgYXQgdGhlIFNUQVJUIVxuICB9O1xuXG4gIF9wcm90by50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24gdG90YWxQcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMudG90YWxEdXJhdGlvbigpICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMudG90YWxEdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdFRpbWUgLyB0aGlzLl90RHVyKSA6IHRoaXMucmF0aW87XG4gIH07XG5cbiAgX3Byb3RvLnByb2dyZXNzID0gZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLmR1cmF0aW9uKCkgKiAodGhpcy5feW95byAmJiAhKHRoaXMuaXRlcmF0aW9uKCkgJiAxKSA/IDEgLSB2YWx1ZSA6IHZhbHVlKSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5kdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdGltZSAvIHRoaXMuX2R1cikgOiB0aGlzLnJhdGlvO1xuICB9O1xuXG4gIF9wcm90by5pdGVyYXRpb24gPSBmdW5jdGlvbiBpdGVyYXRpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgdmFyIGN5Y2xlRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCkgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuX3RpbWUgKyAodmFsdWUgLSAxKSAqIGN5Y2xlRHVyYXRpb24sIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbikgKyAxIDogMTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGFkZGl0aW9uOlxuICAvLyBpc1BsYXlpbmdCYWNrd2FyZHMoKSB7XG4gIC8vIFx0bGV0IGFuaW1hdGlvbiA9IHRoaXMsXG4gIC8vIFx0XHRvcmllbnRhdGlvbiA9IDE7IC8vIDEgPSBmb3J3YXJkLCAtMSA9IGJhY2t3YXJkXG4gIC8vIFx0d2hpbGUgKGFuaW1hdGlvbikge1xuICAvLyBcdFx0b3JpZW50YXRpb24gKj0gYW5pbWF0aW9uLnJldmVyc2VkKCkgfHwgKGFuaW1hdGlvbi5yZXBlYXQoKSAmJiAhKGFuaW1hdGlvbi5pdGVyYXRpb24oKSAmIDEpKSA/IC0xIDogMTtcbiAgLy8gXHRcdGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXJlbnQ7XG4gIC8vIFx0fVxuICAvLyBcdHJldHVybiBvcmllbnRhdGlvbiA8IDA7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90by50aW1lU2NhbGUgPSBmdW5jdGlvbiB0aW1lU2NhbGUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLU1hdGguYWJzKHRoaXMuX2RlbGF5KSwgdGhpcy5fdER1ciwgdFRpbWUpLCBzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpO1xuXG4gICAgX3NldEVuZCh0aGlzKTsgLy8gaWYgcGFyZW50LnNtb290aENoaWxkVGltaW5nIHdhcyBmYWxzZSwgdGhlIGVuZCB0aW1lIGRpZG4ndCBnZXQgdXBkYXRlZCBpbiB0aGUgX2FsaWduUGxheWhlYWQoKSBtZXRob2QsIHNvIGRvIGl0IGhlcmUuXG5cblxuICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIHByZXZJc1JldmVydGluZyA9IF9yZXZlcnRpbmc7XG4gICAgX3JldmVydGluZyA9IGNvbmZpZztcblxuICAgIGlmICh0aGlzLl9pbml0dGVkIHx8IHRoaXMuX3N0YXJ0QXQpIHtcbiAgICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5yZXZlcnQoY29uZmlnKTtcbiAgICAgIHRoaXMudG90YWxUaW1lKC0wLjAxLCBjb25maWcuc3VwcHJlc3NFdmVudHMpO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YSAhPT0gXCJuZXN0ZWRcIiAmJiBjb25maWcua2lsbCAhPT0gZmFsc2UgJiYgdGhpcy5raWxsKCk7XG4gICAgX3JldmVydGluZyA9IHByZXZJc1JldmVydGluZztcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ2xvYmFsVGltZSA9IGZ1bmN0aW9uIGdsb2JhbFRpbWUocmF3VGltZSkge1xuICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA/IHJhd1RpbWUgOiBhbmltYXRpb24ucmF3VGltZSgpO1xuXG4gICAgd2hpbGUgKGFuaW1hdGlvbikge1xuICAgICAgdGltZSA9IGFuaW1hdGlvbi5fc3RhcnQgKyB0aW1lIC8gKE1hdGguYWJzKGFuaW1hdGlvbi5fdHMpIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMuX3NhdCA/IHRoaXMuX3NhdC5nbG9iYWxUaW1lKHJhd1RpbWUpIDogdGltZTsgLy8gdGhlIF9zdGFydEF0IHR3ZWVucyBmb3IgLmZyb21UbygpIGFuZCAuZnJvbSgpIHRoYXQgaGF2ZSBpbW1lZGlhdGVSZW5kZXIgc2hvdWxkIGFsd2F5cyBiZSBGSVJTVCBpbiB0aGUgdGltZWxpbmUgKGltcG9ydGFudCBmb3IgY29udGV4dC5yZXZlcnQoKSkuIFwiX3NhdFwiIHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlbiwgcmVmZXJyaW5nIHRvIHRoZSBwYXJlbnQgdHdlZW4gdGhhdCBjcmVhdGVkIHRoZSBfc3RhcnRBdC4gV2UgbXVzdCBkaXNjZXJuIGlmIHRoYXQgdHdlZW4gaGFkIGltbWVkaWF0ZVJlbmRlciBzbyB0aGF0IHdlIGNhbiBrbm93IHdoZXRoZXIgb3Igbm90IHRvIHByaW9yaXRpemUgaXQgaW4gcmV2ZXJ0KCkuXG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdCA9IGZ1bmN0aW9uIHJlcGVhdCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9yZXBlYXQgPSB2YWx1ZSA9PT0gSW5maW5pdHkgPyAtMiA6IHZhbHVlO1xuICAgICAgcmV0dXJuIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlcGVhdCA9PT0gLTIgPyBJbmZpbml0eSA6IHRoaXMuX3JlcGVhdDtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiByZXBlYXREZWxheSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdGltZSA9IHRoaXMuX3RpbWU7XG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YWx1ZTtcblxuICAgICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcblxuICAgICAgcmV0dXJuIHRpbWUgPyB0aGlzLnRpbWUodGltZSkgOiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yRGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLnlveW8gPSBmdW5jdGlvbiB5b3lvKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3lveW8gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl95b3lvO1xuICB9O1xuXG4gIF9wcm90by5zZWVrID0gZnVuY3Rpb24gc2Vlayhwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5yZXN0YXJ0ID0gZnVuY3Rpb24gcmVzdGFydChpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTsgLy8gaW4gY2FzZSB0aW1lU2NhbGUgaXMgemVybywgcmV2ZXJzaW5nIHdvdWxkIGhhdmUgbm8gZWZmZWN0IHNvIHdlIHVzZSBfdGlueU51bS5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3J0cyA8IDA7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX2luaXR0ZWQgPSB0aGlzLl9hY3QgPSAwO1xuICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9zdGFydCxcbiAgICAgICAgcmF3VGltZTtcbiAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgIHR5cGUgPT09IFwib25VcGRhdGVcIiAmJiAodGhpcy5fb25VcGRhdGUgPSBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by50aGVuID0gZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBmID0gX2lzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiBfcGFzc1Rocm91Z2gsXG4gICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICBzZWxmLnRoZW4gPSBudWxsOyAvLyB0ZW1wb3JhcmlseSBudWxsIHRoZSB0aGVuKCkgbWV0aG9kIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzMyMilcblxuICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgc2VsZi50aGVuID0gX3RoZW47XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgX3Jlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2ludGVycnVwdCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG5fc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICBfdGltZTogMCxcbiAgX3N0YXJ0OiAwLFxuICBfZW5kOiAwLFxuICBfdFRpbWU6IDAsXG4gIF90RHVyOiAwLFxuICBfZGlydHk6IDAsXG4gIF9yZXBlYXQ6IDAsXG4gIF95b3lvOiBmYWxzZSxcbiAgcGFyZW50OiBudWxsLFxuICBfaW5pdHRlZDogZmFsc2UsXG4gIF9yRGVsYXk6IDAsXG4gIF90czogMSxcbiAgX2RwOiAwLFxuICByYXRpbzogMCxcbiAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gIF9wcm9tOiAwLFxuICBfcHM6IGZhbHNlLFxuICBfcnRzOiAxXG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSU1FTElORVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbikge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQW5pbWF0aW9uLmNhbGwodGhpcywgdmFycykgfHwgdGhpcztcbiAgICBfdGhpcy5sYWJlbHMgPSB7fTtcbiAgICBfdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9ICEhdmFycy5zbW9vdGhDaGlsZFRpbWluZztcbiAgICBfdGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAhIXZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuO1xuICAgIF90aGlzLl9zb3J0ID0gX2lzTm90RmFsc2UodmFycy5zb3J0Q2hpbGRyZW4pO1xuICAgIF9nbG9iYWxUaW1lbGluZSAmJiBfYWRkVG9UaW1lbGluZSh2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwb3NpdGlvbik7XG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpcy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMucGF1c2VkKHRydWUpO1xuICAgIHZhcnMuc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgdmFycy5zY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRpbWVsaW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDAsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmNhbGwgPSBmdW5jdGlvbiBjYWxsKGNhbGxiYWNrLCBwYXJhbXMsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMpLCBwb3NpdGlvbik7XG4gIH0gLy9PTkxZIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ISBNYXliZSBkZWxldGU/XG4gIDtcblxuICBfcHJvdG8yLnN0YWdnZXJUbyA9IGZ1bmN0aW9uIHN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdmFycy5zdGFnZ2VyID0gdmFycy5zdGFnZ2VyIHx8IHN0YWdnZXI7XG4gICAgdmFycy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZUFsbDtcbiAgICB2YXJzLm9uQ29tcGxldGVQYXJhbXMgPSBvbkNvbXBsZXRlQWxsUGFyYW1zO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24gc3RhZ2dlckZyb20odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5ydW5CYWNrd2FyZHMgPSAxO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tVG8odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHRvVmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodG9WYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl9kaXJ0eSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA8PSAwID8gMCA6IF9yb3VuZFByZWNpc2UodG90YWxUaW1lKSxcbiAgICAgICAgLy8gaWYgYSBwYXVzZWQgdGltZWxpbmUgaXMgcmVzdW1lZCAob3IgaXRzIF9zdGFydCBpcyB1cGRhdGVkIGZvciBhbm90aGVyIHJlYXNvbi4uLndoaWNoIHJvdW5kcyBpdCksIHRoYXQgY291bGQgcmVzdWx0IGluIHRoZSBwbGF5aGVhZCBzaGlmdGluZyBhICoqdGlueSoqIGFtb3VudCBhbmQgYSB6ZXJvLWR1cmF0aW9uIGNoaWxkIGF0IHRoYXQgc3BvdCBtYXkgZ2V0IHJlbmRlcmVkIGF0IGEgZGlmZmVyZW50IHJhdGlvLCBsaWtlIGl0cyB0b3RhbFRpbWUgaW4gcmVuZGVyKCkgbWF5IGJlIDFlLTE3IGluc3RlYWQgb2YgMCwgZm9yIGV4YW1wbGUuXG4gICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgcGF1c2VUd2VlbixcbiAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIHlveW8sXG4gICAgICAgIGlzWW95bztcbiAgICB0aGlzICE9PSBfZ2xvYmFsVGltZWxpbmUgJiYgdFRpbWUgPiB0RHVyICYmIHRvdGFsVGltZSA+PSAwICYmICh0VGltZSA9IHREdXIpO1xuXG4gICAgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCBmb3JjZSB8fCBjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgZHVyKSB7XG4gICAgICAgIC8vaWYgdG90YWxEdXJhdGlvbigpIGZpbmRzIGEgY2hpbGQgd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0VGltZSBhbmQgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgdGhpbmdzIGdldCBzaGlmdGVkIGFyb3VuZCBpbnRlcm5hbGx5IHNvIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSB0aW1lIGFjY29yZGluZ2x5LiBGb3IgZXhhbXBsZSwgaWYgYSB0d2VlbiBzdGFydHMgYXQgLTMwIHdlIG11c3Qgc2hpZnQgRVZFUllUSElORyBmb3J3YXJkIDMwIHNlY29uZHMgYW5kIG1vdmUgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSBiYWNrd2FyZCBieSAzMCBzZWNvbmRzIHNvIHRoYXQgdGhpbmdzIGFsaWduIHdpdGggdGhlIHBsYXloZWFkIChubyBqdW1wKS5cbiAgICAgICAgdFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgICB0b3RhbFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgfVxuXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICBwcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgIHRpbWVTY2FsZSA9IHRoaXMuX3RzO1xuICAgICAgcHJldlBhdXNlZCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgIGlmIChjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICAgIGR1ciB8fCAocHJldlRpbWUgPSB0aGlzLl96VGltZSk7IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUsIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhc3VwcHJlc3NFdmVudHMpICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIHlveW8gPSB0aGlzLl95b3lvO1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiB0b3RhbFRpbWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7IC8vIGVkZ2UgY2FzZSAtIGlmIHNvbWVvbmUgZG9lcyBhZGRQYXVzZSgpIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBhIHJlcGVhdGluZyB0aW1lbGluZSwgdGhhdCBwYXVzZSBpcyB0ZWNobmljYWxseSBhdCB0aGUgc2FtZSBzcG90IGFzIHRoZSBlbmQgd2hpY2ggY2F1c2VzIHRoaXMuX3RpbWUgdG8gZ2V0IHNldCB0byAwIHdoZW4gdGhlIHRvdGFsVGltZSB3b3VsZCBub3JtYWxseSBwbGFjZSB0aGUgcGxheWhlYWQgYXQgdGhlIGVuZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1IGFsc28sIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCBqdXN0IGNoZWNrcyB0byBtYWtlIHN1cmUgaXQgd2Fzbid0IHByZXZpb3VzbHkgaW4gdGhlIFwicmVwZWF0RGVsYXlcIiBwb3J0aW9uXG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiB0VGltZSAlIGR1ciA/IGR1ciA6IHRUaW1lOyAvLyBpZiB0aGUgcGxheWhlYWQgaXMgbGFuZGluZyBleGFjdGx5IGF0IHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLCB1c2UgdGhhdCB0b3RhbFRpbWUgcmF0aGVyIHRoYW4gb25seSB0aGUgZHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBza2lwIHRoZSAybmQgcmVuZGVyIHNpbmNlIGl0J3MgZWZmZWN0aXZlbHkgYXQgdGhlIHNhbWUgdGltZS5cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kUHJlY2lzZShpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTsgLy8gaWYgYSB1c2VyIGdldHMgdGhlIGl0ZXJhdGlvbigpIGluc2lkZSB0aGUgb25SZXBlYXQsIGZvciBleGFtcGxlLCBpdCBzaG91bGQgYmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2sgPSAxKTtcblxuICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAvLyBpZiBwcmV2VGltZSBpcyAwIGFuZCB3ZSByZW5kZXIgYXQgdGhlIHZlcnkgZW5kLCBfdGltZSB3aWxsIGJlIHRoZSBlbmQsIHRodXMgd29uJ3QgbWF0Y2guIFNvIGluIHRoaXMgZWRnZSBjYXNlLCBwcmV2VGltZSB3b24ndCBtYXRjaCBfdGltZSBidXQgdGhhdCdzIG9rYXkuIElmIGl0IGdldHMga2lsbGVkIGluIHRoZSBvblJlcGVhdCwgZWplY3QgYXMgd2VsbC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cjsgLy8gaW4gY2FzZSB0aGUgZHVyYXRpb24gY2hhbmdlZCBpbiB0aGUgb25SZXBlYXRcblxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyO1xuXG4gICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gZHVyIDogLTAuMDAwMTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IC8vaW4gb3JkZXIgZm9yIHlveW9FYXNlIHRvIHdvcmsgcHJvcGVybHkgd2hlbiB0aGVyZSdzIGEgc3RhZ2dlciwgd2UgbXVzdCBzd2FwIG91dCB0aGUgZWFzZSBpbiBlYWNoIHN1Yi10d2Vlbi5cblxuXG4gICAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKHRoaXMsIGlzWW95byk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nICYmIHRoaXMuX2xvY2sgPCAyKSB7XG4gICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXRlcmF0aW9uKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIChjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnRBdCkpOyAvLyBpZiByZXZlcnRpbmcsIHdlIHNob3VsZCBhbHdheXMgZm9yY2UgcmVuZGVycyBvZiBpbml0dGVkIHR3ZWVucyAoYnV0IHJlbWVtYmVyIHRoYXQgLmZyb21UbygpIG9yIC5mcm9tKCkgbWF5IGhhdmUgYSBfc3RhcnRBdCBidXQgbm90IF9pbml0dGVkIHlldCkuIElmLCBmb3IgZXhhbXBsZSwgYSAuZnJvbVRvKCkgdHdlZW4gd2l0aCBhIHN0YWdnZXIgKHdoaWNoIGNyZWF0ZXMgYW4gaW50ZXJuYWwgdGltZWxpbmUpIGdldHMgcmV2ZXJ0ZWQgQkVGT1JFIHNvbWUgb2YgaXRzIGNoaWxkIHR3ZWVucyByZW5kZXIgZm9yIHRoZSBmaXJzdCB0aW1lLCBpdCBtYXkgbm90IHByb3Blcmx5IHRyaWdnZXIgdGhlbSB0byByZXZlcnQuXG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90VGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyLCBhIGNoaWxkJ3MgY2FsbGJhY2sgbWF5IGFsdGVyIHRoaXMgdGltZWxpbmUncyBwbGF5aGVhZCBvciB0aW1lU2NhbGUgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gYWRkIHNvbWUgb2YgdGhlc2UgY2hlY2tzLlxuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkID0gZnVuY3Rpb24gYWRkKGNoaWxkLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICB9XG5cbiAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgIHRoaXMubGFiZWxzW2xhYmVsXSA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwobGFiZWwpIHtcbiAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICB0LmRhdGEgPSBcImlzUGF1c2VcIjtcbiAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgcG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSxcbiAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiAhPT0gdHdlZW5zW2ldICYmIHR3ZWVuc1tpXS5raWxsKHRhcmdldHMsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgIC8vIGEgbnVtYmVyIGlzIGludGVycHJldGVkIGFzIGEgZ2xvYmFsIHRpbWUuIElmIHRoZSBhbmltYXRpb24gc3BhbnNcbiAgICBjaGlsZHJlbjtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAvLyBub3RlOiBpZiB0aGlzIGlzIGZvciBvdmVyd3JpdGluZywgaXQgc2hvdWxkIG9ubHkgYmUgZm9yIHR3ZWVucyB0aGF0IGFyZW4ndCBwYXVzZWQgYW5kIGFyZSBpbml0dGVkLlxuICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGNoaWxkcmVuID0gY2hpbGQuZ2V0VHdlZW5zT2YocGFyc2VkVGFyZ2V0cywgb25seUFjdGl2ZSkpLmxlbmd0aCkge1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAtIHRhcmdldHMoKSBvbiB0aW1lbGluZXNcbiAgLy8gdGFyZ2V0cygpIHtcbiAgLy8gXHRsZXQgcmVzdWx0ID0gW107XG4gIC8vIFx0dGhpcy5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaCh0ID0+IHJlc3VsdC5wdXNoKC4uLnQudGFyZ2V0cygpKSk7XG4gIC8vIFx0cmV0dXJuIHJlc3VsdC5maWx0ZXIoKHYsIGkpID0+IHJlc3VsdC5pbmRleE9mKHYpID09PSBpKTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICBvdmVyd3JpdGU6IFwiYXV0b1wiLFxuICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgIHRsLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgIHR3ZWVuLl9kdXIgIT09IGR1cmF0aW9uICYmIF9zZXREdXJhdGlvbih0d2VlbiwgZHVyYXRpb24sIDAsIDEpLnJlbmRlcih0d2Vlbi5fdGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfb25TdGFydCAmJiBfb25TdGFydC5hcHBseSh0d2Vlbiwgb25TdGFydFBhcmFtcyB8fCBbXSk7IC8vaW4gY2FzZSB0aGUgdXNlciBoYWQgYW4gb25TdGFydCBpbiB0aGUgdmFycyAtIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIGl0LlxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcblxuICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgfTtcblxuICBfcHJvdG8yLnR3ZWVuRnJvbVRvID0gZnVuY3Rpb24gdHdlZW5Gcm9tVG8oZnJvbVBvc2l0aW9uLCB0b1Bvc2l0aW9uLCB2YXJzKSB7XG4gICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgc3RhcnRBdDoge1xuICAgICAgICB0aW1lOiBfcGFyc2VQb3NpdGlvbih0aGlzLCBmcm9tUG9zaXRpb24pXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuICB9O1xuXG4gIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gIH07XG5cbiAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZnRlclRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgfTtcblxuICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiZWZvcmVUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICB9O1xuXG4gIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBsYWJlbHMgPSB0aGlzLmxhYmVscyxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RMYWJlbHMpIHtcbiAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgbGFiZWxzW3BdICs9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKSB7XG4gIHZhciB2YXJzID0gdHdlZW4udmFycyxcbiAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgaW1tZWRpYXRlUmVuZGVyID0gdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICBwcmV2U3RhcnRBdC5felRpbWUgPCAwICYmIHByZXZTdGFydEF0LnByb2dyZXNzKDEpOyAvLyBpbiBjYXNlIGl0J3MgYSBsYXp5IHN0YXJ0QXQgdGhhdCBoYXNuJ3QgcmVuZGVyZWQgeWV0LlxuXG4gICAgICB0aW1lIDwgMCAmJiBydW5CYWNrd2FyZHMgJiYgaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ID8gcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSA6IHByZXZTdGFydEF0LnJldmVydChydW5CYWNrd2FyZHMgJiYgZHVyID8gX3JldmVydENvbmZpZ05vS2lsbCA6IF9zdGFydEF0UmV2ZXJ0Q29uZmlnKTsgLy8gaWYgaXQncyBhIFwic3RhcnRBdFwiIChub3QgXCJmcm9tKClcIiBvciBydW5CYWNrd2FyZHM6IHRydWUpLCB3ZSBvbmx5IG5lZWQgdG8gZG8gYSBzaGFsbG93IHJldmVydCAoa2VlcCB0cmFuc2Zvcm1zIGNhY2hlZCBpbiBDU1NQbHVnaW4pXG4gICAgICAvLyBkb24ndCBqdXN0IF9yZW1vdmVGcm9tUGFyZW50KHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpIGJlY2F1c2UgdGhhdCdsbCBsZWF2ZSBpbmxpbmUgc3R5bGVzLiBXZSdyZSBjcmVhdGluZyBhIG5ldyBfc3RhcnRBdCBmb3IgXCJzdGFydEF0XCIgdHdlZW5zIHRoYXQgcmUtY2FwdHVyZSB0aGluZ3MgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHByZS10d2VlbiB2YWx1ZXMgY2hhbmdlZCBzaW5jZSB0aGUgdHdlZW4gd2FzIGNyZWF0ZWQsIHRoZXkncmUgcmVjb3JkZWQuXG5cbiAgICAgIHByZXZTdGFydEF0Ll9sYXp5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6ICFwcmV2U3RhcnRBdCAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhZ2dlcjogMFxuICAgICAgfSwgc3RhcnRBdCkpKTsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIGZyb20sIHRvKS5mcm9tVG8oZSwgdG8sIGZyb20pO1xuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhIExpa2Ugd2hlbiByZXZlcnQoKSBpcyBjYWxsZWQgYW5kIHRvdGFsVGltZSgpIGdldHMgc2V0LlxuXG4gICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47IC8vIHVzZWQgaW4gZ2xvYmFsVGltZSgpLiBfc2F0IHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlblxuXG4gICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyB8fCAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0KSAmJiB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgaWYgKGR1ciAmJiB0aW1lIDw9IDAgJiYgdFRpbWUgPD0gMCkge1xuICAgICAgICAgIC8vIGNoZWNrIHRUaW1lIGhlcmUgYmVjYXVzZSBpbiB0aGUgY2FzZSBvZiBhIHlveW8gdHdlZW4gd2hvc2UgcGxheWhlYWQgZ2V0cyBwdXNoZWQgdG8gdGhlIGVuZCBsaWtlIHR3ZWVuLnByb2dyZXNzKDEpLCB3ZSBzaG91bGQgYWxsb3cgaXQgdGhyb3VnaCBzbyB0aGF0IHRoZSBvbkNvbXBsZXRlIGdldHMgZmlyZWQgcHJvcGVybHkuXG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydW5CYWNrd2FyZHMgJiYgZHVyKSB7XG4gICAgICAvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG4gICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgIC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcbiAgICAgICAgICBzdGFnZ2VyOiAwLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50IC8vZW5zdXJlcyB0aGF0IG5lc3RlZCB0d2VlbnMgdGhhdCBoYWQgYSBzdGFnZ2VyIGFyZSBoYW5kbGVkIHByb3Blcmx5LCBsaWtlIGdzYXAuZnJvbShcIi5jbGFzc1wiLCB7eTogZ3NhcC51dGlscy53cmFwKFstMTAwLDEwMF0pLCBzdGFnZ2VyOiAwLjV9KVxuXG4gICAgICAgIH0sIGNsZWFuVmFycyk7XG4gICAgICAgIGhhcm5lc3NWYXJzICYmIChwW2hhcm5lc3MucHJvcF0gPSBoYXJuZXNzVmFycyk7IC8vIGluIGNhc2Ugc29tZW9uZSBkb2VzIHNvbWV0aGluZyBsaWtlIC5mcm9tKC4uLiwge2Nzczp7fX0pXG5cbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgcCkpO1xuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhXG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX3NhdCA9IHR3ZWVuOyAvLyB1c2VkIGluIGdsb2JhbFRpbWUoKVxuXG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSwgX3RpbnlOdW0pOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cblxuICBrZXlmcmFtZXMgJiYgdGltZSA8PSAwICYmIHRsLnJlbmRlcihfYmlnTnVtLCB0cnVlLCB0cnVlKTsgLy8gaWYgdGhlcmUncyBhIDAlIGtleWZyYW1lLCBpdCdsbCByZW5kZXIgaW4gdGhlIFwiYmVmb3JlXCIgc3RhdGUgZm9yIGFueSBzdGFnZ2VyZWQvZGVsYXllZCBhbmltYXRpb25zIHRodXMgd2hlbiB0aGUgZm9sbG93aW5nIHR3ZWVuIGluaXRpYWxpemVzLCBpdCdsbCB1c2UgdGhlIFwiYmVmb3JlXCIgc3RhdGUgaW5zdGVhZCBvZiB0aGUgXCJhZnRlclwiIHN0YXRlIGFzIHRoZSBpbml0aWFsIHZhbHVlcy5cbn0sXG4gICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSwgc2tpcFJlY3Vyc2lvbikge1xuICB2YXIgcHRDYWNoZSA9ICh0d2Vlbi5fcHQgJiYgdHdlZW4uX3B0Q2FjaGUgfHwgKHR3ZWVuLl9wdENhY2hlID0ge30pKVtwcm9wZXJ0eV0sXG4gICAgICBwdCxcbiAgICAgIHJvb3RQVCxcbiAgICAgIGxvb2t1cCxcbiAgICAgIGk7XG5cbiAgaWYgKCFwdENhY2hlKSB7XG4gICAgcHRDYWNoZSA9IHR3ZWVuLl9wdENhY2hlW3Byb3BlcnR5XSA9IFtdO1xuICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAvLyBpdCdzIGEgcGx1Z2luLCBzbyBmaW5kIHRoZSBuZXN0ZWQgUHJvcFR3ZWVuXG4gICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3BlcnR5ICYmIHB0LmZwICE9PSBwcm9wZXJ0eSkge1xuICAgICAgICAgIC8vIFwiZnBcIiBpcyBmdW5jdGlvblBhcmFtIGZvciB0aGluZ3MgbGlrZSBzZXR0aW5nIENTUyB2YXJpYWJsZXMgd2hpY2ggcmVxdWlyZSAuc2V0UHJvcGVydHkoXCItLXZhci1uYW1lXCIsIHZhbHVlKVxuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwdCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBubyBQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIHRoYXQgcHJvcGVydHksIHNvIHdlIG11c3QgRk9SQ0Ugb25lIHRvIGJlIGNyZWF0ZWQgYW5kIGRpdGNoIG91dCBvZiB0aGlzXG4gICAgICAgIC8vIGlmIHRoZSB0d2VlbiBoYXMgb3RoZXIgcHJvcGVydGllcyB0aGF0IGFscmVhZHkgcmVuZGVyZWQgYXQgbmV3IHBvc2l0aW9ucywgd2UnZCBub3JtYWxseSBoYXZlIHRvIHJld2luZCB0byBwdXQgdGhlbSBiYWNrIGxpa2UgdHdlZW4ucmVuZGVyKDAsIHRydWUpIGJlZm9yZSBmb3JjaW5nIGFuIF9pbml0VHdlZW4oKSwgYnV0IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGVkZ2UgY2FzZSBsaWtlIHR3ZWVuaW5nIGEgdGltZWxpbmUncyBwcm9ncmVzcyB3b3VsZCB0cmlnZ2VyIG9uVXBkYXRlcyB0byBmaXJlIHdoaWNoIGNvdWxkIG1vdmUgb3RoZXIgdGhpbmdzIGFyb3VuZC4gSXQncyBiZXR0ZXIgdG8ganVzdCBpbmZvcm0gdXNlcnMgdGhhdCAucmVzZXRUbygpIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIHR3ZWVucyB0aGF0IGFscmVhZHkgaGF2ZSB0aGF0IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgeW91IGNhbid0IGdzYXAudG8oLi4ueyB5OiAwIH0pIGFuZCB0aGVuIHR3ZWVuLnJlc3RUbyhcInhcIiwgMjAwKSBmb3IgZXhhbXBsZS5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDE7IC8vIG90aGVyd2lzZSwgd2hlbiB3ZSBfYWRkUHJvcFR3ZWVuKCkgYW5kIGl0IGZpbmRzIG5vIGNoYW5nZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgaXQgc2tpcHMgY3JlYXRpbmcgYSBQcm9wVHdlZW4gKGZvciBlZmZpY2llbmN5Li4ud2h5IHR3ZWVuIHdoZW4gdGhlcmUncyBubyBkaWZmZXJlbmNlPykgYnV0IGluIHRoaXMgY2FzZSB3ZSBORUVEIHRoYXQgUHJvcFR3ZWVuIGNyZWF0ZWQgc28gd2UgY2FuIGVkaXQgaXQuXG5cbiAgICAgICAgdHdlZW4udmFyc1twcm9wZXJ0eV0gPSBcIis9MFwiO1xuXG4gICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICByZXR1cm4gc2tpcFJlY3Vyc2lvbiA/IF93YXJuKHByb3BlcnR5ICsgXCIgbm90IGVsaWdpYmxlIGZvciByZXNldFwiKSA6IDE7IC8vIGlmIHNvbWVvbmUgdHJpZXMgdG8gZG8gYSBxdWlja1RvKCkgb24gYSBzcGVjaWFsIHByb3BlcnR5IGxpa2UgYm9yZGVyUmFkaXVzIHdoaWNoIG11c3QgZ2V0IHNwbGl0IGludG8gNCBkaWZmZXJlbnQgcHJvcGVydGllcywgdGhhdCdzIG5vdCBlbGlnaWJsZSBmb3IgLnJlc2V0VG8oKS5cbiAgICAgIH1cblxuICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICB9XG4gIH1cblxuICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDsgLy8gY29tcGxleCB2YWx1ZXMgbWF5IGhhdmUgbmVzdGVkIFByb3BUd2VlbnMuIFdlIG9ubHkgYWNjb21tb2RhdGUgdGhlIEZJUlNUIHZhbHVlLlxuXG4gICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgIHJvb3RQVC5lICYmIChyb290UFQuZSA9IF9yb3VuZCh2YWx1ZSkgKyBnZXRVbml0KHJvb3RQVC5lKSk7IC8vIG1haW5seSBmb3IgQ1NTUGx1Z2luIChlbmQgdmFsdWUpXG5cbiAgICByb290UFQuYiAmJiAocm9vdFBULmIgPSBwdC5zICsgZ2V0VW5pdChyb290UFQuYikpOyAvLyAoYmVnaW5uaW5nIHZhbHVlKVxuICB9XG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgLy8gcGFyc2VzIG11bHRpcGxlIGZvcm1hdHMsIGxpa2Uge1wiMCVcIjoge3g6IDEwMH0sIHtcIjUwJVwiOiB7eDogLTIwfX0gYW5kIHsgeDoge1wiMCVcIjogMTAwLCBcIjUwJVwiOiAtMjB9IH0sIGFuZCBhbiBcImVhc2VcIiBjYW4gYmUgc2V0IG9uIGFueSBvYmplY3QuIFdlIHBvcHVsYXRlIGFuIFwiYWxsUHJvcHNcIiBvYmplY3Qgd2l0aCBhbiBBcnJheSBmb3IgZWFjaCBwcm9wZXJ0eSwgbGlrZSB7eDogW3t9LCB7fV0sIHk6W3t9LCB7fV19IHdpdGggZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eSB0d2Vlbi4gVGhlIG9iamVjdHMgaGF2ZSBhIFwidFwiICh0aW1lKSwgXCJ2XCIsICh2YWx1ZSksIGFuZCBcImVcIiAoZWFzZSkgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIHBpZWNlIHRvZ2V0aGVyIGEgdGltZWxpbmUgbGF0ZXIuXG5fcGFyc2VLZXlmcmFtZSA9IGZ1bmN0aW9uIF9wYXJzZUtleWZyYW1lKHByb3AsIG9iaiwgYWxsUHJvcHMsIGVhc2VFYWNoKSB7XG4gIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgIHAsXG4gICAgICBhO1xuXG4gIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTsgLy8gdCA9IHRpbWUgKG91dCBvZiAxMDApLCB2ID0gdmFsdWUsIGUgPSBlYXNlXG5cbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgdjogdmFsdWUsXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIGEgPSBhbGxQcm9wc1twXSB8fCAoYWxsUHJvcHNbcF0gPSBbXSk7XG4gICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICB2OiBvYmpbcF0sXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsXG4gICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG5fZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3N0YWdnZXJQcm9wc1RvU2tpcFtuYW1lXSA9IDE7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uMikge1xuICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdGhpczMgPSBfQW5pbWF0aW9uMi5jYWxsKHRoaXMsIHNraXBJbmhlcml0ID8gdmFycyA6IF9pbmhlcml0RGVmYXVsdHModmFycykpIHx8IHRoaXM7XG4gICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX3RoaXMzJHZhcnMuZGVsYXksXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgIG92ZXJ3cml0ZSA9IF90aGlzMyR2YXJzLm92ZXJ3cml0ZSxcbiAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyID0gX3RoaXMzJHZhcnMuc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gKF9pc0FycmF5KHRhcmdldHMpIHx8IF9pc1R5cGVkQXJyYXkodGFyZ2V0cykgPyBfaXNOdW1iZXIodGFyZ2V0c1swXSkgOiBcImxlbmd0aFwiIGluIHZhcnMpID8gW3RhcmdldHNdIDogdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgdGwsXG4gICAgICAgIGksXG4gICAgICAgIGNvcHksXG4gICAgICAgIGwsXG4gICAgICAgIHAsXG4gICAgICAgIGN1clRhcmdldCxcbiAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICBfdGhpczMuX3RhcmdldHMgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aCA/IF9oYXJuZXNzKHBhcnNlZFRhcmdldHMpIDogX3dhcm4oXCJHU0FQIHRhcmdldCBcIiArIHRhcmdldHMgKyBcIiBub3QgZm91bmQuIGh0dHBzOi8vZ3NhcC5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9LFxuICAgICAgICB0YXJnZXRzOiBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogcGFyc2VkVGFyZ2V0c1xuICAgICAgfSk7IC8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIHRhcmdldHMgYmVjYXVzZSBmb3Igc3RhZ2dlcnMgYW5kIGtleWZyYW1lcywgd2UgZW5kIHVwIGNyZWF0aW5nIGFuIGluZGl2aWR1YWwgdHdlZW4gZm9yIGVhY2ggYnV0IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBuZWVkIHRvIGtub3cgdGhlIGluZGV4IGFuZCB0aGUgd2hvbGUgQXJyYXkgb2YgdGFyZ2V0cy5cblxuICAgICAgdGwua2lsbCgpO1xuICAgICAgdGwucGFyZW50ID0gdGwuX2RwID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuICAgICAgdGwuX3N0YXJ0ID0gMDtcblxuICAgICAgaWYgKHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGwgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcbiAgICAgICAgc3RhZ2dlckZ1bmMgPSBzdGFnZ2VyICYmIGRpc3RyaWJ1dGUoc3RhZ2dlcik7XG5cbiAgICAgICAgaWYgKF9pc09iamVjdChzdGFnZ2VyKSkge1xuICAgICAgICAgIC8vdXNlcnMgY2FuIHBhc3MgaW4gY2FsbGJhY2tzIGxpa2Ugb25TdGFydC9vbkNvbXBsZXRlIGluIHRoZSBzdGFnZ2VyIG9iamVjdC4gVGhlc2Ugc2hvdWxkIGZpcmUgd2l0aCBlYWNoIGluZGl2aWR1YWwgdHdlZW4uXG4gICAgICAgICAgZm9yIChwIGluIHN0YWdnZXIpIHtcbiAgICAgICAgICAgIGlmICh+X3N0YWdnZXJUd2VlblByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlIHx8IChzdGFnZ2VyVmFyc1RvTWVyZ2UgPSB7fSk7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZVtwXSA9IHN0YWdnZXJbcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvcHkgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfc3RhZ2dlclByb3BzVG9Ta2lwKTtcbiAgICAgICAgICBjb3B5LnN0YWdnZXIgPSAwO1xuICAgICAgICAgIHlveW9FYXNlICYmIChjb3B5LnlveW9FYXNlID0geW95b0Vhc2UpO1xuICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSAmJiBfbWVyZ2UoY29weSwgc3RhZ2dlclZhcnNUb01lcmdlKTtcbiAgICAgICAgICBjdXJUYXJnZXQgPSBwYXJzZWRUYXJnZXRzW2ldOyAvL2Rvbid0IGp1c3QgY29weSBkdXJhdGlvbiBvciBkZWxheSBiZWNhdXNlIGlmIHRoZXkncmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24sIHdlJ2QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AgYmVjYXVzZSBfaXNGdW5jT3JTdHJpbmcoKSB3b3VsZCBldmFsdWF0ZSBhcyB0cnVlIGluIHRoZSBjaGlsZCB0d2VlbnMsIGVudGVyaW5nIHRoaXMgbG9vcCwgZXRjLiBTbyB3ZSBwYXJzZSB0aGUgdmFsdWUgc3RyYWlnaHQgZnJvbSB2YXJzIGFuZCBkZWZhdWx0IHRvIDAuXG5cbiAgICAgICAgICBjb3B5LmR1cmF0aW9uID0gK19wYXJzZUZ1bmNPclN0cmluZyhkdXJhdGlvbiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpO1xuICAgICAgICAgIGNvcHkuZGVsYXkgPSAoK19wYXJzZUZ1bmNPclN0cmluZyhkZWxheSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIHx8IDApIC0gX3RoaXMzLl9kZWxheTtcblxuICAgICAgICAgIGlmICghc3RhZ2dlciAmJiBsID09PSAxICYmIGNvcHkuZGVsYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIHNvbWVvbmUgZG9lcyBkZWxheTpcInJhbmRvbSgxLCA1KVwiLCByZXBlYXQ6LTEsIGZvciBleGFtcGxlLCB0aGUgZGVsYXkgc2hvdWxkbid0IGJlIGluc2lkZSB0aGUgcmVwZWF0LlxuICAgICAgICAgICAgX3RoaXMzLl9kZWxheSA9IGRlbGF5ID0gY29weS5kZWxheTtcbiAgICAgICAgICAgIF90aGlzMy5fc3RhcnQgKz0gZGVsYXk7XG4gICAgICAgICAgICBjb3B5LmRlbGF5ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC50byhjdXJUYXJnZXQsIGNvcHksIHN0YWdnZXJGdW5jID8gc3RhZ2dlckZ1bmMoaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSA6IDApO1xuICAgICAgICAgIHRsLl9lYXNlID0gX2Vhc2VNYXAubm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRsLmR1cmF0aW9uKCkgPyBkdXJhdGlvbiA9IGRlbGF5ID0gMCA6IF90aGlzMy50aW1lbGluZSA9IDA7IC8vIGlmIHRoZSB0aW1lbGluZSdzIGR1cmF0aW9uIGlzIDAsIHdlIGRvbid0IG5lZWQgYSB0aW1lbGluZSBpbnRlcm5hbGx5IVxuICAgICAgfSBlbHNlIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgX2luaGVyaXREZWZhdWx0cyhfc2V0RGVmYXVsdHModGwudmFycy5kZWZhdWx0cywge1xuICAgICAgICAgIGVhc2U6IFwibm9uZVwiXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0bC5fZWFzZSA9IF9wYXJzZUVhc2Uoa2V5ZnJhbWVzLmVhc2UgfHwgdmFycy5lYXNlIHx8IFwibm9uZVwiKTtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGtmLFxuICAgICAgICAgICAgdjtcblxuICAgICAgICBpZiAoX2lzQXJyYXkoa2V5ZnJhbWVzKSkge1xuICAgICAgICAgIGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRsLnRvKHBhcnNlZFRhcmdldHMsIGZyYW1lLCBcIj5cIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGwuZHVyYXRpb24oKTsgLy8gdG8gZW5zdXJlIHRsLl9kdXIgaXMgY2FjaGVkIGJlY2F1c2Ugd2UgdGFwIGludG8gaXQgZm9yIHBlcmZvcm1hbmNlIHB1cnBvc2VzIGluIHRoZSByZW5kZXIoKSBtZXRob2QuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29weSA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIGtleWZyYW1lcykge1xuICAgICAgICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgcCA9PT0gXCJlYXNlRWFjaFwiIHx8IF9wYXJzZUtleWZyYW1lKHAsIGtleWZyYW1lc1twXSwgY29weSwga2V5ZnJhbWVzLmVhc2VFYWNoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHAgaW4gY29weSkge1xuICAgICAgICAgICAgYSA9IGNvcHlbcF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gYS50IC0gYi50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aW1lID0gMDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAga2YgPSBhW2ldO1xuICAgICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICAgIGVhc2U6IGtmLmUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IChrZi50IC0gKGkgPyBhW2kgLSAxXS50IDogMCkpIC8gMTAwICogZHVyYXRpb25cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdltwXSA9IGtmLnY7XG4gICAgICAgICAgICAgIHRsLnRvKHBhcnNlZFRhcmdldHMsIHYsIHRpbWUpO1xuICAgICAgICAgICAgICB0aW1lICs9IHYuZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwuZHVyYXRpb24oKSA8IGR1cmF0aW9uICYmIHRsLnRvKHt9LCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLSB0bC5kdXJhdGlvbigpXG4gICAgICAgICAgfSk7IC8vIGluIGNhc2Uga2V5ZnJhbWVzIGRpZG4ndCBnbyB0byAxMDAlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZHVyYXRpb24gfHwgX3RoaXMzLmR1cmF0aW9uKGR1cmF0aW9uID0gdGwuZHVyYXRpb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzMy50aW1lbGluZSA9IDA7IC8vc3BlZWQgb3B0aW1pemF0aW9uLCBmYXN0ZXIgbG9va3VwcyAobm8gZ29pbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbilcbiAgICB9XG5cbiAgICBpZiAob3ZlcndyaXRlID09PSB0cnVlICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcblxuICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZihwYXJzZWRUYXJnZXRzKTtcblxuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBwb3NpdGlvbik7XG5cbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzMy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMzLnBhdXNlZCh0cnVlKTtcblxuICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgIF90aGlzMy5fdFRpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXG4gICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkgfHwgMCk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIGlzTmVnYXRpdmUgPSB0b3RhbFRpbWUgPCAwLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gX3JvdW5kUHJlY2lzZSh0VGltZSAvIGN5Y2xlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQgJiYgaXRlcmF0aW9uID09PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgLy9jb3VsZCBiZSBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IHBhcnQuIE5vIG5lZWQgdG8gcmVuZGVyIGFuZCBmaXJlIGNhbGxiYWNrcy5cbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIHRpbWVsaW5lICYmIHRoaXMuX3lFYXNlICYmIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKTsgLy9yZXBlYXRSZWZyZXNoIGZ1bmN0aW9uYWxpdHlcblxuICAgICAgICAgIGlmICh0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICF0aGlzLl9sb2NrICYmIHRoaXMuX3RpbWUgIT09IGR1ciAmJiB0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgICAgICAvLyB0aGlzLl90aW1lIHdpbGwgPT09IGR1ciB3aGVuIHdlIHJlbmRlciBhdCBFWEFDVExZIHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLiBXaXRob3V0IHRoaXMgY29uZGl0aW9uLCBpdCdkIG9mdGVuIGRvIHRoZSByZXBlYXRSZWZyZXNoIHJlbmRlciBUV0lDRSAoYWdhaW4gb24gdGhlIHZlcnkgbmV4dCB0aWNrKS5cbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSBmb3JjZSA9IDE7IC8vZm9yY2UsIG90aGVyd2lzZSBpZiBsYXp5IGlzIHRydWUsIHRoZSBfYXR0ZW1wdEluaXRUd2VlbigpIHdpbGwgcmV0dXJuIGFuZCB3ZSdsbCBqdW1wIG91dCBhbmQgZ2V0IGNhdWdodCBib3VuY2luZyBvbiBlYWNoIHRpY2suXG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKF9yb3VuZFByZWNpc2UoY3ljbGVEdXJhdGlvbiAqIGl0ZXJhdGlvbiksIHRydWUpLmludmFsaWRhdGUoKS5fbG9jayA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICBpZiAoX2F0dGVtcHRJbml0VHdlZW4odGhpcywgaXNOZWdhdGl2ZSA/IHRvdGFsVGltZSA6IHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSAwOyAvLyBpbiBjb25zdHJ1Y3RvciBpZiBpbW1lZGlhdGVSZW5kZXIgaXMgdHJ1ZSwgd2Ugc2V0IF90VGltZSB0byAtX3RpbnlOdW0gdG8gaGF2ZSB0aGUgcGxheWhlYWQgY3Jvc3MgdGhlIHN0YXJ0aW5nIHBvaW50IGJ1dCB3ZSBjYW4ndCBsZWF2ZSBfdFRpbWUgYXMgYSBuZWdhdGl2ZSBudW1iZXIuXG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiAhKGZvcmNlICYmIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikpIHtcbiAgICAgICAgICAvLyByYXJlIGVkZ2UgY2FzZSAtIGR1cmluZyBpbml0aWFsaXphdGlvbiwgYW4gb25VcGRhdGUgaW4gdGhlIF9zdGFydEF0ICguZnJvbVRvKCkpIG1pZ2h0IGZvcmNlIHRoaXMgdHdlZW4gdG8gcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZGl0Y2ggdGhpcyByZW5kZXIoKSBjYWxsIHNvIHRoYXQgaXQgZG9lc24ndCByZXZlcnQgdGhlIHZhbHVlcy4gQnV0IHdlIGFsc28gZG9uJ3Qgd2FudCB0byBkdW1wIGlmIHdlJ3JlIGRvaW5nIGEgcmVwZWF0UmVmcmVzaCByZW5kZXIhXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVyICE9PSB0aGlzLl9kdXIpIHtcbiAgICAgICAgICAvLyB3aGlsZSBpbml0dGluZywgYSBwbHVnaW4gbGlrZSBJbmVydGlhUGx1Z2luIG1pZ2h0IGFsdGVyIHRoZSBkdXJhdGlvbiwgc28gcmVydW4gZnJvbSB0aGUgc3RhcnQgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgcmVuZGVycyBhcyBpdCBzaG91bGQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG5cbiAgICAgIGlmICghdGhpcy5fYWN0ICYmIHRoaXMuX3RzKSB7XG4gICAgICAgIHRoaXMuX2FjdCA9IDE7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICAgIHRoaXMuX2xhenkgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgIGlmICh0aGlzLl9mcm9tKSB7XG4gICAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgJiYgIXByZXZUaW1lICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXRlcmF0aW9uKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHQgPSB0aGlzLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuXG4gICAgICB0aW1lbGluZSAmJiB0aW1lbGluZS5yZW5kZXIodG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6ICF0aW1lICYmIGlzWW95byA/IC1fdGlueU51bSA6IHRpbWVsaW5lLl9kdXIgKiB0aW1lbGluZS5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB8fCB0aGlzLl9zdGFydEF0ICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG5cbiAgICAgIGlmICh0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7IC8vbm90ZTogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIHR1Y2sgdGhpcyBjb25kaXRpb25hbCBsb2dpYyBpbnNpZGUgbGVzcyB0cmF2ZWxlZCBhcmVhcyAobW9zdCB0d2VlbnMgZG9uJ3QgaGF2ZSBhbiBvblVwZGF0ZSkuIFdlJ2QganVzdCBoYXZlIGl0IGF0IHRoZSBlbmQgYmVmb3JlIHRoZSBvbkNvbXBsZXRlLCBidXQgdGhlIHZhbHVlcyBzaG91bGQgYmUgdXBkYXRlZCBiZWZvcmUgYW55IG9uVXBkYXRlIGlzIGNhbGxlZCwgc28gd2UgQUxTTyBwdXQgaXQgaGVyZSBhbmQgdGhlbiBpZiBpdCdzIG5vdCBjYWxsZWQsIHdlIGRvIHNvIGxhdGVyIG5lYXIgdGhlIG9uQ29tcGxldGUuXG5cbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcGVhdCAmJiBpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgdGhpcy52YXJzLm9uUmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcblxuICAgICAgaWYgKCh0VGltZSA9PT0gdGhpcy5fdER1ciB8fCAhdFRpbWUpICYmIHRoaXMuX3RUaW1lID09PSB0VGltZSkge1xuICAgICAgICBpc05lZ2F0aXZlICYmICF0aGlzLl9vblVwZGF0ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdGhpcy5fdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB3ZSdyZSByZW5kZXJpbmcgYXQgZXhhY3RseSBhIHRpbWUgb2YgMCwgYXMgdGhlcmUgY291bGQgYmUgYXV0b1JldmVydCB2YWx1ZXMgdGhhdCBzaG91bGQgZ2V0IHNldCBvbiB0aGUgbmV4dCB0aWNrIChpZiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0VGltZSwgbmVnYXRpdmUgdG90YWxUaW1lKS4gRG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKGlzTmVnYXRpdmUgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgaXNZb3lvKSkge1xuICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGFuZCB0VGltZSBhcmUgemVybywgd2Ugc2hvdWxkbid0IGZpcmUgdGhlIG9uUmV2ZXJzZUNvbXBsZXRlLiBUaGlzIGNvdWxkIGhhcHBlbiBpZiB5b3UgZ3NhcC50byguLi4ge3BhdXNlZDp0cnVlfSkucGxheSgpO1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzMudGFyZ2V0cyA9IGZ1bmN0aW9uIHRhcmdldHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHM7XG4gIH07XG5cbiAgX3Byb3RvMy5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZShzb2Z0KSB7XG4gICAgLy8gXCJzb2Z0XCIgZ2l2ZXMgdXMgYSB3YXkgdG8gY2xlYXIgb3V0IGV2ZXJ5dGhpbmcgRVhDRVBUIHRoZSByZWNvcmRlZCBwcmUtXCJmcm9tXCIgcG9ydGlvbiBvZiBmcm9tKCkgdHdlZW5zLiBPdGhlcndpc2UsIGZvciBleGFtcGxlLCBpZiB5b3UgdHdlZW4ucHJvZ3Jlc3MoMSkucmVuZGVyKDAsIHRydWUgdHJ1ZSkuaW52YWxpZGF0ZSgpLCB0aGUgXCJmcm9tXCIgdmFsdWVzIHdvdWxkIHBlcnNpc3QgYW5kIHRoZW4gb24gdGhlIG5leHQgcmVuZGVyLCB0aGUgZnJvbSgpIHR3ZWVucyB3b3VsZCBpbml0aWFsaXplIGFuZCB0aGUgY3VycmVudCB2YWx1ZSB3b3VsZCBtYXRjaCB0aGUgXCJmcm9tXCIgdmFsdWVzLCB0aHVzIGFuaW1hdGUgZnJvbSB0aGUgc2FtZSB2YWx1ZSB0byB0aGUgc2FtZSB2YWx1ZSAobm8gYW5pbWF0aW9uKS4gV2UgdGFwIGludG8gdGhpcyBpbiBTY3JvbGxUcmlnZ2VyJ3MgcmVmcmVzaCgpIHdoZXJlIHdlIG11c3QgcHVzaCBhIHR3ZWVuIHRvIGNvbXBsZXRpb24gYW5kIHRoZW4gYmFjayBhZ2FpbiBidXQgaG9ub3IgaXRzIGluaXQgc3RhdGUgaW4gY2FzZSB0aGUgdHdlZW4gaXMgZGVwZW5kZW50IG9uIGFub3RoZXIgdHdlZW4gZnVydGhlciB1cCBvbiB0aGUgcGFnZS5cbiAgICAoIXNvZnQgfHwgIXRoaXMudmFycy5ydW5CYWNrd2FyZHMpICYmICh0aGlzLl9zdGFydEF0ID0gMCk7XG4gICAgdGhpcy5fcHQgPSB0aGlzLl9vcCA9IHRoaXMuX29uVXBkYXRlID0gdGhpcy5fbGF6eSA9IHRoaXMucmF0aW8gPSAwO1xuICAgIHRoaXMuX3B0TG9va3VwID0gW107XG4gICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLmludmFsaWRhdGUoc29mdCk7XG4gICAgcmV0dXJuIF9BbmltYXRpb24yLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcywgc29mdCk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZXNldFRvID0gZnVuY3Rpb24gcmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHNraXBSZWN1cnNpb24pIHtcbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICAgIHRoaXMuX3RzIHx8IHRoaXMucGxheSgpO1xuICAgIHZhciB0aW1lID0gTWF0aC5taW4odGhpcy5fZHVyLCAodGhpcy5fZHAuX3RpbWUgLSB0aGlzLl9zdGFydCkgKiB0aGlzLl90cyksXG4gICAgICAgIHJhdGlvO1xuICAgIHRoaXMuX2luaXR0ZWQgfHwgX2luaXRUd2Vlbih0aGlzLCB0aW1lKTtcbiAgICByYXRpbyA9IHRoaXMuX2Vhc2UodGltZSAvIHRoaXMuX2R1cik7IC8vIGRvbid0IGp1c3QgZ2V0IHR3ZWVuLnJhdGlvIGJlY2F1c2UgaXQgbWF5IG5vdCBoYXZlIHJlbmRlcmVkIHlldC5cbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgYWRkaXRpb24gdG8gYWxsb3cgYW4gb2JqZWN0IHdpdGggbXVsdGlwbGUgdmFsdWVzIHRvIHVwZGF0ZSwgbGlrZSB0d2Vlbi5yZXNldFRvKHt4OiAxMDAsIHk6IDIwMH0pOyBBdCB0aGlzIHBvaW50LCBpdCBkb2Vzbid0IHNlZW0gd29ydGggdGhlIGFkZGVkIGtiIGdpdmVuIHRoZSBmYWN0IHRoYXQgbW9zdCB1c2VycyB3aWxsIGxpa2VseSBvcHQgZm9yIHRoZSBjb252ZW5pZW50IGdzYXAucXVpY2tUbygpIHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIHRoaXMgbWV0aG9kLlxuICAgIC8vIGlmIChfaXNPYmplY3QocHJvcGVydHkpKSB7IC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxuICAgIC8vIFx0Zm9yIChwIGluIHByb3BlcnR5KSB7XG4gICAgLy8gXHRcdGlmIChfdXBkYXRlUHJvcFR3ZWVucyh0aGlzLCBwLCBwcm9wZXJ0eVtwXSwgdmFsdWUgPyB2YWx1ZVtwXSA6IG51bGwsIHN0YXJ0LCByYXRpbywgdGltZSkpIHtcbiAgICAvLyBcdFx0XHRyZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIC8vIFx0XHR9XG4gICAgLy8gXHR9XG4gICAgLy8gfSBlbHNlIHtcblxuICAgIGlmIChfdXBkYXRlUHJvcFR3ZWVucyh0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lLCBza2lwUmVjdXJzaW9uKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIDEpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICB9IC8vfVxuXG5cbiAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCAwKTtcblxuICAgIHRoaXMucGFyZW50IHx8IF9hZGRMaW5rZWRMaXN0SXRlbSh0aGlzLl9kcCwgdGhpcywgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aGlzLl9kcC5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXIoMCk7XG4gIH07XG5cbiAgX3Byb3RvMy5raWxsID0gZnVuY3Rpb24ga2lsbCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IFwiYWxsXCI7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXRzICYmICghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSkge1xuICAgICAgdGhpcy5fbGF6eSA9IHRoaXMuX3B0ID0gMDtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IF9pbnRlcnJ1cHQodGhpcykgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRpbWVsaW5lKSB7XG4gICAgICB2YXIgdER1ciA9IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpO1xuICAgICAgdGhpcy50aW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgdmFycywgX292ZXJ3cml0aW5nVHdlZW4gJiYgX292ZXJ3cml0aW5nVHdlZW4udmFycy5vdmVyd3JpdGUgIT09IHRydWUpLl9maXJzdCB8fCBfaW50ZXJydXB0KHRoaXMpOyAvLyBpZiBub3RoaW5nIGlzIGxlZnQgdHdlZW5pbmcsIGludGVycnVwdC5cblxuICAgICAgdGhpcy5wYXJlbnQgJiYgdER1ciAhPT0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCkgJiYgX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX2R1ciAqIHRoaXMudGltZWxpbmUuX3REdXIgLyB0RHVyLCAwLCAxKTsgLy8gaWYgYSBuZXN0ZWQgdHdlZW4gaXMga2lsbGVkIHRoYXQgY2hhbmdlcyB0aGUgZHVyYXRpb24sIGl0IHNob3VsZCBhZmZlY3QgdGhpcyB0d2VlbidzIGR1cmF0aW9uLiBXZSBtdXN0IHVzZSB0aGUgcmF0aW8sIHRob3VnaCwgYmVjYXVzZSBzb21ldGltZXMgdGhlIGludGVybmFsIHRpbWVsaW5lIGlzIHN0cmV0Y2hlZCBsaWtlIGZvciBrZXlmcmFtZXMgd2hlcmUgdGhleSBkb24ndCBhbGwgYWRkIHVwIHRvIHdoYXRldmVyIHRoZSBwYXJlbnQgdHdlZW4ncyBkdXJhdGlvbiB3YXMgc2V0IHRvLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VkVGFyZ2V0cyA9IHRoaXMuX3RhcmdldHMsXG4gICAgICAgIGtpbGxpbmdUYXJnZXRzID0gdGFyZ2V0cyA/IHRvQXJyYXkodGFyZ2V0cykgOiBwYXJzZWRUYXJnZXRzLFxuICAgICAgICBwcm9wVHdlZW5Mb29rdXAgPSB0aGlzLl9wdExvb2t1cCxcbiAgICAgICAgZmlyc3RQVCA9IHRoaXMuX3B0LFxuICAgICAgICBvdmVyd3JpdHRlblByb3BzLFxuICAgICAgICBjdXJMb29rdXAsXG4gICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzLFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgcCxcbiAgICAgICAgcHQsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpICYmIF9hcnJheXNNYXRjaChwYXJzZWRUYXJnZXRzLCBraWxsaW5nVGFyZ2V0cykpIHtcbiAgICAgIHZhcnMgPT09IFwiYWxsXCIgJiYgKHRoaXMuX3B0ID0gMCk7XG4gICAgICByZXR1cm4gX2ludGVycnVwdCh0aGlzKTtcbiAgICB9XG5cbiAgICBvdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3AgPSB0aGlzLl9vcCB8fCBbXTtcblxuICAgIGlmICh2YXJzICE9PSBcImFsbFwiKSB7XG4gICAgICAvL3NvIHBlb3BsZSBjYW4gcGFzcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzXG4gICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgIHAgPSB7fTtcblxuICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gcFtuYW1lXSA9IDE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhcnMgPSBwO1xuICAgICAgfVxuXG4gICAgICB2YXJzID0gX2FkZEFsaWFzZXNUb1ZhcnMocGFyc2VkVGFyZ2V0cywgdmFycyk7XG4gICAgfVxuXG4gICAgaSA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKH5raWxsaW5nVGFyZ2V0cy5pbmRleE9mKHBhcnNlZFRhcmdldHNbaV0pKSB7XG4gICAgICAgIGN1ckxvb2t1cCA9IHByb3BUd2Vlbkxvb2t1cFtpXTtcblxuICAgICAgICBpZiAodmFycyA9PT0gXCJhbGxcIikge1xuICAgICAgICAgIG92ZXJ3cml0dGVuUHJvcHNbaV0gPSB2YXJzO1xuICAgICAgICAgIHByb3BzID0gY3VyTG9va3VwO1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0ge307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSBvdmVyd3JpdHRlblByb3BzW2ldID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSB8fCB7fTtcbiAgICAgICAgICBwcm9wcyA9IHZhcnM7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHAgaW4gcHJvcHMpIHtcbiAgICAgICAgICBwdCA9IGN1ckxvb2t1cCAmJiBjdXJMb29rdXBbcF07XG5cbiAgICAgICAgICBpZiAocHQpIHtcbiAgICAgICAgICAgIGlmICghKFwia2lsbFwiIGluIHB0LmQpIHx8IHB0LmQua2lsbChwKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgY3VyTG9va3VwW3BdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJPdmVyd3JpdGVQcm9wcyAhPT0gXCJhbGxcIikge1xuICAgICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHNbcF0gPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXR0ZWQgJiYgIXRoaXMuX3B0ICYmIGZpcnN0UFQgJiYgX2ludGVycnVwdCh0aGlzKTsgLy9pZiBhbGwgdHdlZW5pbmcgcHJvcGVydGllcyBhcmUga2lsbGVkLCBraWxsIHRoZSB0d2Vlbi4gV2l0aG91dCB0aGlzIGxpbmUsIGlmIHRoZXJlJ3MgYSB0d2VlbiB3aXRoIG11bHRpcGxlIHRhcmdldHMgYW5kIHRoZW4geW91IGtpbGxUd2VlbnNPZigpIGVhY2ggdGFyZ2V0IGluZGl2aWR1YWxseSwgdGhlIHR3ZWVuIHdvdWxkIHRlY2huaWNhbGx5IHN0aWxsIHJlbWFpbiBhY3RpdmUgYW5kIGZpcmUgaXRzIG9uQ29tcGxldGUgZXZlbiB0aG91Z2ggdGhlcmUgYXJlbid0IGFueSBtb3JlIHByb3BlcnRpZXMgdHdlZW5pbmcuXG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBUd2Vlbi50byA9IGZ1bmN0aW9uIHRvKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIGFyZ3VtZW50c1syXSk7XG4gIH07XG5cbiAgVHdlZW4uZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uZGVsYXllZENhbGwgPSBmdW5jdGlvbiBkZWxheWVkQ2FsbChkZWxheSwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKGNhbGxiYWNrLCAwLCB7XG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgb25Db21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvblJldmVyc2VDb21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvbkNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBvblJldmVyc2VDb21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgY2FsbGJhY2tTY29wZTogc2NvcGVcbiAgICB9KTsgLy8gd2UgbXVzdCB1c2Ugb25SZXZlcnNlQ29tcGxldGUgdG9vIGZvciB0aGluZ3MgbGlrZSB0aW1lbGluZS5hZGQoKCkgPT4gey4uLn0pIHdoaWNoIHNob3VsZCBiZSB0cmlnZ2VyZWQgaW4gQk9USCBkaXJlY3Rpb25zIChmb3J3YXJkIGFuZCByZXZlcnNlKVxuICB9O1xuXG4gIFR3ZWVuLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycykge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzKTtcbiAgfTtcblxuICBUd2Vlbi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSk7XG4gIH07XG5cbiAgcmV0dXJuIFR3ZWVuO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVHdlZW4ucHJvdG90eXBlLCB7XG4gIF90YXJnZXRzOiBbXSxcbiAgX2xhenk6IDAsXG4gIF9zdGFydEF0OiAwLFxuICBfb3A6IDAsXG4gIF9vbkluaXQ6IDBcbn0pOyAvL2FkZCB0aGUgcGVydGluZW50IHRpbWVsaW5lIG1ldGhvZHMgdG8gVHdlZW4gaW5zdGFuY2VzIHNvIHRoYXQgdXNlcnMgY2FuIGNoYWluIGNvbnZlbmllbnRseSBhbmQgY3JlYXRlIGEgdGltZWxpbmUgYXV0b21hdGljYWxseS4gKHJlbW92ZWQgZHVlIHRvIGNvbmNlcm5zIHRoYXQgaXQnZCB1bHRpbWF0ZWx5IGFkZCB0byBtb3JlIGNvbmZ1c2lvbiBlc3BlY2lhbGx5IGZvciBiZWdpbm5lcnMpXG4vLyBfZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxzZXQsY2FsbCxhZGQsYWRkTGFiZWwsYWRkUGF1c2VcIiwgbmFtZSA9PiB7XG4vLyBcdFR3ZWVuLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuLy8gXHRcdGxldCB0bCA9IG5ldyBUaW1lbGluZSgpO1xuLy8gXHRcdHJldHVybiBfYWRkVG9UaW1lbGluZSh0bCwgdGhpcylbbmFtZV0uYXBwbHkodGwsIHRvQXJyYXkoYXJndW1lbnRzKSk7XG4vLyBcdH1cbi8vIH0pO1xuLy9mb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gTGV2ZXJhZ2UgdGhlIHRpbWVsaW5lIGNhbGxzLlxuXG5cbl9mb3JFYWNoTmFtZShcInN0YWdnZXJUbyxzdGFnZ2VyRnJvbSxzdGFnZ2VyRnJvbVRvXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIFR3ZWVuW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSgpLFxuICAgICAgICBwYXJhbXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcGFyYW1zLnNwbGljZShuYW1lID09PSBcInN0YWdnZXJGcm9tVG9cIiA/IDUgOiA0LCAwLCAwKTtcbiAgICByZXR1cm4gdGxbbmFtZV0uYXBwbHkodGwsIHBhcmFtcyk7XG4gIH07XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUFJPUFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9zZXR0ZXJQbGFpbiA9IGZ1bmN0aW9uIF9zZXR0ZXJQbGFpbih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyRnVuYyA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckZ1bmNXaXRoUGFyYW0gPSBmdW5jdGlvbiBfc2V0dGVyRnVuY1dpdGhQYXJhbSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XShkYXRhLmZwLCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfc2V0dGVyQXR0cmlidXRlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc2V0QXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9nZXRTZXR0ZXIgPSBmdW5jdGlvbiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHRhcmdldFtwcm9wZXJ0eV0pID8gX3NldHRlckZ1bmMgOiBfaXNVbmRlZmluZWQodGFyZ2V0W3Byb3BlcnR5XSkgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZSA/IF9zZXR0ZXJBdHRyaWJ1dGUgOiBfc2V0dGVyUGxhaW47XG59LFxuICAgIF9yZW5kZXJQbGFpbiA9IGZ1bmN0aW9uIF9yZW5kZXJQbGFpbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwMDApIC8gMTAwMDAwMCwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJCb29sZWFuID0gZnVuY3Rpb24gX3JlbmRlckJvb2xlYW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCAhIShkYXRhLnMgKyBkYXRhLmMgKiByYXRpbyksIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ29tcGxleFN0cmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDb21wbGV4U3RyaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0LFxuICAgICAgcyA9IFwiXCI7XG5cbiAgaWYgKCFyYXRpbyAmJiBkYXRhLmIpIHtcbiAgICAvL2IgPSBiZWdpbm5pbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuYjtcbiAgfSBlbHNlIGlmIChyYXRpbyA9PT0gMSAmJiBkYXRhLmUpIHtcbiAgICAvL2UgPSBlbmRpbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuZTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHMgPSBwdC5wICsgKHB0Lm0gPyBwdC5tKHB0LnMgKyBwdC5jICogcmF0aW8pIDogTWF0aC5yb3VuZCgocHQucyArIHB0LmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCkgKyBzOyAvL3dlIHVzZSB0aGUgXCJwXCIgcHJvcGVydHkgZm9yIHRoZSB0ZXh0IGluYmV0d2VlbiAobGlrZSBhIHN1ZmZpeCkuIEFuZCBpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBsZXggc3RyaW5nLCB0aGUgbW9kaWZpZXIgKG0pIGlzIHR5cGljYWxseSBqdXN0IE1hdGgucm91bmQoKSwgbGlrZSBmb3IgUkdCIGNvbG9ycy5cblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICBzICs9IGRhdGEuYzsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIGNodW5rIG9mIG5vbi1udW1lcmljIHRleHQuXG4gIH1cblxuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcywgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3JlbmRlclByb3BUd2VlbnMocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxufSxcbiAgICBfYWRkUGx1Z2luTW9kaWZpZXIgPSBmdW5jdGlvbiBfYWRkUGx1Z2luTW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQucCA9PT0gcHJvcGVydHkgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQpO1xuICAgIHB0ID0gbmV4dDtcbiAgfVxufSxcbiAgICBfa2lsbFByb3BUd2VlbnNPZiA9IGZ1bmN0aW9uIF9raWxsUHJvcFR3ZWVuc09mKHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nLFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG5cbiAgICBpZiAocHQucCA9PT0gcHJvcGVydHkgJiYgIXB0Lm9wIHx8IHB0Lm9wID09PSBwcm9wZXJ0eSkge1xuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICB9IGVsc2UgaWYgKCFwdC5kZXApIHtcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyA9IDE7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuICFoYXNOb25EZXBlbmRlbnRSZW1haW5pbmc7XG59LFxuICAgIF9zZXR0ZXJXaXRoTW9kaWZpZXIgPSBmdW5jdGlvbiBfc2V0dGVyV2l0aE1vZGlmaWVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIGRhdGEubVNldCh0YXJnZXQsIHByb3BlcnR5LCBkYXRhLm0uY2FsbChkYXRhLnR3ZWVuLCB2YWx1ZSwgZGF0YS5tdCksIGRhdGEpO1xufSxcbiAgICBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5ID0gZnVuY3Rpb24gX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eShwYXJlbnQpIHtcbiAgdmFyIHB0ID0gcGFyZW50Ll9wdCxcbiAgICAgIG5leHQsXG4gICAgICBwdDIsXG4gICAgICBmaXJzdCxcbiAgICAgIGxhc3Q7IC8vc29ydHMgdGhlIFByb3BUd2VlbiBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwcmlvcml0eSBiZWNhdXNlIHNvbWUgcGx1Z2lucyBuZWVkIHRvIGRvIHRoZWlyIHdvcmsgYWZ0ZXIgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIHdlcmUgY3JlYXRlZCAobGlrZSBSb3VuZFByb3BzUGx1Z2luIGFuZCBNb2RpZmllcnNQbHVnaW4pXG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0MiA9IGZpcnN0O1xuXG4gICAgd2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuICAgICAgcHQyID0gcHQyLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpIHtcbiAgICAgIHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpcnN0ID0gcHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9uZXh0ID0gcHQyKSB7XG4gICAgICBwdDIuX3ByZXYgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IHB0O1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHBhcmVudC5fcHQgPSBmaXJzdDtcbn07IC8vUHJvcFR3ZWVuIGtleTogdCA9IHRhcmdldCwgcCA9IHByb3AsIHIgPSByZW5kZXJlciwgZCA9IGRhdGEsIHMgPSBzdGFydCwgYyA9IGNoYW5nZSwgb3AgPSBvdmVyd3JpdGVQcm9wZXJ0eSAoT05MWSBwb3B1bGF0ZWQgd2hlbiBpdCdzIGRpZmZlcmVudCB0aGFuIHApLCBwciA9IHByaW9yaXR5LCBfbmV4dC9fcHJldiBmb3IgdGhlIGxpbmtlZCBsaXN0IHNpYmxpbmdzLCBzZXQgPSBzZXR0ZXIsIG0gPSBtb2RpZmllciwgbVNldCA9IG1vZGlmaWVyU2V0dGVyICh0aGUgb3JpZ2luYWwgc2V0dGVyLCBiZWZvcmUgYSBtb2RpZmllciB3YXMgYWRkZWQpXG5cblxuZXhwb3J0IHZhciBQcm9wVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9wVHdlZW4obmV4dCwgdGFyZ2V0LCBwcm9wLCBzdGFydCwgY2hhbmdlLCByZW5kZXJlciwgZGF0YSwgc2V0dGVyLCBwcmlvcml0eSkge1xuICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICB0aGlzLnMgPSBzdGFydDtcbiAgICB0aGlzLmMgPSBjaGFuZ2U7XG4gICAgdGhpcy5wID0gcHJvcDtcbiAgICB0aGlzLnIgPSByZW5kZXJlciB8fCBfcmVuZGVyUGxhaW47XG4gICAgdGhpcy5kID0gZGF0YSB8fCB0aGlzO1xuICAgIHRoaXMuc2V0ID0gc2V0dGVyIHx8IF9zZXR0ZXJQbGFpbjtcbiAgICB0aGlzLnByID0gcHJpb3JpdHkgfHwgMDtcbiAgICB0aGlzLl9uZXh0ID0gbmV4dDtcblxuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0Ll9wcmV2ID0gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvNCA9IFByb3BUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5tb2RpZmllciA9IGZ1bmN0aW9uIG1vZGlmaWVyKGZ1bmMsIHR3ZWVuLCB0YXJnZXQpIHtcbiAgICB0aGlzLm1TZXQgPSB0aGlzLm1TZXQgfHwgdGhpcy5zZXQ7IC8vaW4gY2FzZSBpdCB3YXMgYWxyZWFkeSBzZXQgKGEgUHJvcFR3ZWVuIGNhbiBvbmx5IGhhdmUgb25lIG1vZGlmaWVyKVxuXG4gICAgdGhpcy5zZXQgPSBfc2V0dGVyV2l0aE1vZGlmaWVyO1xuICAgIHRoaXMubSA9IGZ1bmM7XG4gICAgdGhpcy5tdCA9IHRhcmdldDsgLy9tb2RpZmllciB0YXJnZXRcblxuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcbiAgfTtcblxuICByZXR1cm4gUHJvcFR3ZWVuO1xufSgpOyAvL0luaXRpYWxpemF0aW9uIHRhc2tzXG5cbl9mb3JFYWNoTmFtZShfY2FsbGJhY2tOYW1lcyArIFwicGFyZW50LGR1cmF0aW9uLGVhc2UsZGVsYXksb3ZlcndyaXRlLHJ1bkJhY2t3YXJkcyxzdGFydEF0LHlveW8saW1tZWRpYXRlUmVuZGVyLHJlcGVhdCxyZXBlYXREZWxheSxkYXRhLHBhdXNlZCxyZXZlcnNlZCxsYXp5LGNhbGxiYWNrU2NvcGUsc3RyaW5nRmlsdGVyLGlkLHlveW9FYXNlLHN0YWdnZXIsaW5oZXJpdCxyZXBlYXRSZWZyZXNoLGtleWZyYW1lcyxhdXRvUmV2ZXJ0LHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbn0pO1xuXG5fZ2xvYmFscy5Ud2Vlbk1heCA9IF9nbG9iYWxzLlR3ZWVuTGl0ZSA9IFR3ZWVuO1xuX2dsb2JhbHMuVGltZWxpbmVMaXRlID0gX2dsb2JhbHMuVGltZWxpbmVNYXggPSBUaW1lbGluZTtcbl9nbG9iYWxUaW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gIHNvcnRDaGlsZHJlbjogZmFsc2UsXG4gIGRlZmF1bHRzOiBfZGVmYXVsdHMsXG4gIGF1dG9SZW1vdmVDaGlsZHJlbjogdHJ1ZSxcbiAgaWQ6IFwicm9vdFwiLFxuICBzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZVxufSk7XG5fY29uZmlnLnN0cmluZ0ZpbHRlciA9IF9jb2xvclN0cmluZ0ZpbHRlcjtcblxudmFyIF9tZWRpYSA9IFtdLFxuICAgIF9saXN0ZW5lcnMgPSB7fSxcbiAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgIF9sYXN0TWVkaWFUaW1lID0gMCxcbiAgICBfY29udGV4dElEID0gMCxcbiAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICByZXR1cm4gKF9saXN0ZW5lcnNbdHlwZV0gfHwgX2VtcHR5QXJyYXkpLm1hcChmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmKCk7XG4gIH0pO1xufSxcbiAgICBfb25NZWRpYUNoYW5nZSA9IGZ1bmN0aW9uIF9vbk1lZGlhQ2hhbmdlKCkge1xuICB2YXIgdGltZSA9IERhdGUubm93KCksXG4gICAgICBtYXRjaGVzID0gW107XG5cbiAgaWYgKHRpbWUgLSBfbGFzdE1lZGlhVGltZSA+IDIpIHtcbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhSW5pdFwiKTtcblxuICAgIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgcXVlcmllcyA9IGMucXVlcmllcyxcbiAgICAgICAgICBjb25kaXRpb25zID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgYW55TWF0Y2gsXG4gICAgICAgICAgdG9nZ2xlZDtcblxuICAgICAgZm9yIChwIGluIHF1ZXJpZXMpIHtcbiAgICAgICAgbWF0Y2ggPSBfd2luLm1hdGNoTWVkaWEocXVlcmllc1twXSkubWF0Y2hlczsgLy8gRmlyZWZveCBkb2Vzbid0IHVwZGF0ZSB0aGUgXCJtYXRjaGVzXCIgcHJvcGVydHkgb2YgdGhlIE1lZGlhUXVlcnlMaXN0IG9iamVjdCBjb3JyZWN0bHkgLSBpdCBvbmx5IGRvZXMgc28gYXMgaXQgY2FsbHMgaXRzIGNoYW5nZSBoYW5kbGVyIC0gc28gd2UgbXVzdCByZS1jcmVhdGUgYSBtZWRpYSBxdWVyeSBoZXJlIHRvIGVuc3VyZSBpdCdzIGFjY3VyYXRlLlxuXG4gICAgICAgIG1hdGNoICYmIChhbnlNYXRjaCA9IDEpO1xuXG4gICAgICAgIGlmIChtYXRjaCAhPT0gY29uZGl0aW9uc1twXSkge1xuICAgICAgICAgIGNvbmRpdGlvbnNbcF0gPSBtYXRjaDtcbiAgICAgICAgICB0b2dnbGVkID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9nZ2xlZCkge1xuICAgICAgICBjLnJldmVydCgpO1xuICAgICAgICBhbnlNYXRjaCAmJiBtYXRjaGVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhUmV2ZXJ0XCIpO1xuXG4gICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5vbk1hdGNoKGMsIGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgIHJldHVybiBjLmFkZChudWxsLCBmdW5jKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9sYXN0TWVkaWFUaW1lID0gdGltZTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gIH1cbn07XG5cbnZhciBDb250ZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHRoaXMuc2VsZWN0b3IgPSBzY29wZSAmJiBzZWxlY3RvcihzY29wZSk7XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGhpcy5fciA9IFtdOyAvLyByZXR1cm5lZC9jbGVhbnVwIGZ1bmN0aW9uc1xuXG4gICAgdGhpcy5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgdGhpcy5pZCA9IF9jb250ZXh0SUQrKzsgLy8gdG8gd29yayBhcm91bmQgaXNzdWVzIHRoYXQgZnJhbWV3b3JrcyBsaWtlIFZ1ZSBjYXVzZSBieSBtYWtpbmcgdGhpbmdzIGludG8gUHJveGllcyB3aGljaCBtYWtlIGl0IGltcG9zc2libGUgdG8gZG8gc29tZXRoaW5nIGxpa2UgX21lZGlhLmluZGV4T2YodGhpcykgYmVjYXVzZSBcInRoaXNcIiB3b3VsZCBubyBsb25nZXIgcmVmZXIgdG8gdGhlIENvbnRleHQgaW5zdGFuY2UgaXRzZWxmIC0gaXQnZCByZWZlciB0byBhIFByb3h5ISBXZSBuZWVkZWQgYSB3YXkgdG8gaWRlbnRpZnkgdGhlIGNvbnRleHQgdW5pcXVlbHlcblxuICAgIGZ1bmMgJiYgdGhpcy5hZGQoZnVuYyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNSA9IENvbnRleHQucHJvdG90eXBlO1xuXG4gIF9wcm90bzUuYWRkID0gZnVuY3Rpb24gYWRkKG5hbWUsIGZ1bmMsIHNjb3BlKSB7XG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIGlmIHdlIG5lZWQgdGhlIGFiaWxpdHkgdG8gYWRkKCkgYW4gYW5pbWF0aW9uIHRvIGEgY29udGV4dCBhbmQgZm9yIHdoYXRldmVyIHJlYXNvbiBjYW5ub3QgY3JlYXRlIHRoYXQgYW5pbWF0aW9uIGluc2lkZSBvZiBhIGNvbnRleHQuYWRkKCgpID0+IHsuLi59KSBmdW5jdGlvbi5cbiAgICAvLyBpZiAobmFtZSAmJiBfaXNGdW5jdGlvbihuYW1lLnJldmVydCkpIHtcbiAgICAvLyBcdHRoaXMuZGF0YS5wdXNoKG5hbWUpO1xuICAgIC8vIFx0cmV0dXJuIChuYW1lLl9jdHggPSB0aGlzKTtcbiAgICAvLyB9XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICBzY29wZSA9IGZ1bmM7XG4gICAgICBmdW5jID0gbmFtZTtcbiAgICAgIG5hbWUgPSBfaXNGdW5jdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGYgPSBmdW5jdGlvbiBmKCkge1xuICAgICAgdmFyIHByZXYgPSBfY29udGV4dCxcbiAgICAgICAgICBwcmV2U2VsZWN0b3IgPSBzZWxmLnNlbGVjdG9yLFxuICAgICAgICAgIHJlc3VsdDtcbiAgICAgIHByZXYgJiYgcHJldiAhPT0gc2VsZiAmJiBwcmV2LmRhdGEucHVzaChzZWxmKTtcbiAgICAgIHNjb3BlICYmIChzZWxmLnNlbGVjdG9yID0gc2VsZWN0b3Ioc2NvcGUpKTtcbiAgICAgIF9jb250ZXh0ID0gc2VsZjtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHJlc3VsdCkgJiYgc2VsZi5fci5wdXNoKHJlc3VsdCk7XG4gICAgICBfY29udGV4dCA9IHByZXY7XG4gICAgICBzZWxmLnNlbGVjdG9yID0gcHJldlNlbGVjdG9yO1xuICAgICAgc2VsZi5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBzZWxmLmxhc3QgPSBmO1xuICAgIHJldHVybiBuYW1lID09PSBfaXNGdW5jdGlvbiA/IGYoc2VsZiwgZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZWxmLmFkZChudWxsLCBmdW5jKTtcbiAgICB9KSA6IG5hbWUgPyBzZWxmW25hbWVdID0gZiA6IGY7XG4gIH07XG5cbiAgX3Byb3RvNS5pZ25vcmUgPSBmdW5jdGlvbiBpZ25vcmUoZnVuYykge1xuICAgIHZhciBwcmV2ID0gX2NvbnRleHQ7XG4gICAgX2NvbnRleHQgPSBudWxsO1xuICAgIGZ1bmModGhpcyk7XG4gICAgX2NvbnRleHQgPSBwcmV2O1xuICB9O1xuXG4gIF9wcm90bzUuZ2V0VHdlZW5zID0gZnVuY3Rpb24gZ2V0VHdlZW5zKCkge1xuICAgIHZhciBhID0gW107XG4gICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgQ29udGV4dCA/IGEucHVzaC5hcHBseShhLCBlLmdldFR3ZWVucygpKSA6IGUgaW5zdGFuY2VvZiBUd2VlbiAmJiAhKGUucGFyZW50ICYmIGUucGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIpICYmIGEucHVzaChlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG81LmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fci5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgfTtcblxuICBfcHJvdG81LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCwgbWF0Y2hNZWRpYSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVydCkge1xuICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHR3ZWVucyA9IF90aGlzNC5nZXRUd2VlbnMoKSxcbiAgICAgICAgICAgIGkgPSBfdGhpczQuZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICB0O1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAvLyBGbGlwIHBsdWdpbiB0d2VlbnMgYXJlIHZlcnkgZGlmZmVyZW50IGluIHRoYXQgdGhleSBzaG91bGQgYWN0dWFsbHkgYmUgcHVzaGVkIHRvIHRoZWlyIGVuZC4gVGhlIHBsdWdpbiByZXBsYWNlcyB0aGUgdGltZWxpbmUncyAucmV2ZXJ0KCkgbWV0aG9kIHRvIGRvIGV4YWN0bHkgdGhhdC4gQnV0IHdlIGFsc28gbmVlZCB0byByZW1vdmUgYW55IG9mIHRob3NlIG5lc3RlZCB0d2VlbnMgaW5zaWRlIHRoZSBmbGlwIHRpbWVsaW5lIHNvIHRoYXQgdGhleSBkb24ndCBnZXQgaW5kaXZpZHVhbGx5IHJldmVydGVkLlxuICAgICAgICAgIHQgPSBfdGhpczQuZGF0YVtpXTtcblxuICAgICAgICAgIGlmICh0LmRhdGEgPT09IFwiaXNGbGlwXCIpIHtcbiAgICAgICAgICAgIHQucmV2ZXJ0KCk7XG4gICAgICAgICAgICB0LmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICAgICAgICByZXR1cm4gdHdlZW5zLnNwbGljZSh0d2VlbnMuaW5kZXhPZih0d2VlbiksIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHNhdmUgYXMgYW4gb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGNhY2hlIHRoZSBnbG9iYWxUaW1lIGZvciBlYWNoIHR3ZWVuIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIGR1cmluZyB0aGUgc29ydFxuXG5cbiAgICAgICAgdHdlZW5zLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnOiB0Ll9kdXIgfHwgdC5fZGVsYXkgfHwgdC5fc2F0ICYmICF0Ll9zYXQudmFycy5pbW1lZGlhdGVSZW5kZXIgPyB0Lmdsb2JhbFRpbWUoMCkgOiAtSW5maW5pdHksXG4gICAgICAgICAgICB0OiB0XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLUluZmluaXR5O1xuICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgcmV0dXJuIG8udC5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgICAgfSk7IC8vIG5vdGU6IGFsbCBvZiB0aGUgX3N0YXJ0QXQgdHdlZW5zIHNob3VsZCBiZSByZXZlcnRlZCBpbiByZXZlcnNlIG9yZGVyIHRoYXQgdGhleSB3ZXJlIGNyZWF0ZWQsIGFuZCB0aGV5J2xsIGFsbCBoYXZlIHRoZSBzYW1lIGdsb2JhbFRpbWUgKC0xKSBzbyB0aGUgXCIgfHwgLTFcIiBpbiB0aGUgc29ydCBrZWVwcyB0aGUgb3JkZXIgcHJvcGVybHkuXG5cbiAgICAgICAgaSA9IF90aGlzNC5kYXRhLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGxvb3AgYmFja3dhcmRzIHNvIHRoYXQsIGZvciBleGFtcGxlLCBTcGxpdFRleHRzIHRoYXQgd2VyZSBjcmVhdGVkIGxhdGVyIG9uIHRoZSBzYW1lIGVsZW1lbnQgZ2V0IHJldmVydGVkIGZpcnN0XG4gICAgICAgICAgdCA9IF90aGlzNC5kYXRhW2ldO1xuXG4gICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgICAgICAgaWYgKHQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgICAgICAgICB0LnNjcm9sbFRyaWdnZXIgJiYgdC5zY3JvbGxUcmlnZ2VyLnJldmVydCgpO1xuICAgICAgICAgICAgICB0LmtpbGwoKTsgLy8gZG9uJ3QgcmV2ZXJ0KCkgdGhlIHRpbWVsaW5lIGJlY2F1c2UgdGhhdCdzIGR1cGxpY2F0aW5nIGVmZm9ydHMgc2luY2Ugd2UgYWxyZWFkeSByZXZlcnRlZCBhbGwgdGhlIHR3ZWVuc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAhKHQgaW5zdGFuY2VvZiBUd2VlbikgJiYgdC5yZXZlcnQgJiYgdC5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczQuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBmKHJldmVydCwgX3RoaXM0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXM0LmlzUmV2ZXJ0ZWQgPSB0cnVlO1xuICAgICAgfSkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICB2YXIgaSA9IF9tZWRpYS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgLy8gcHJldmlvdXNseSwgd2UgY2hlY2tlZCBfbWVkaWEuaW5kZXhPZih0aGlzKSwgYnV0IHNvbWUgZnJhbWV3b3JrcyBsaWtlIFZ1ZSBlbmZvcmNlIFByb3h5IG9iamVjdHMgdGhhdCBtYWtlIGl0IGltcG9zc2libGUgdG8gZ2V0IHRoZSBwcm9wZXIgcmVzdWx0IHRoYXQgd2F5LCBzbyB3ZSBtdXN0IHVzZSBhIHVuaXF1ZSBJRCBudW1iZXIgaW5zdGVhZC5cbiAgICAgICAgX21lZGlhW2ldLmlkID09PSB0aGlzLmlkICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzUucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiBDb250ZXh0O1xufSgpO1xuXG52YXIgTWF0Y2hNZWRpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgX2NvbnRleHQgJiYgIWNvbnRleHQuc2VsZWN0b3IgJiYgKGNvbnRleHQuc2VsZWN0b3IgPSBfY29udGV4dC5zZWxlY3Rvcik7IC8vIGluIGNhc2UgYSBjb250ZXh0IGlzIGNyZWF0ZWQgaW5zaWRlIGEgY29udGV4dC4gTGlrZSBhIGdzYXAubWF0Y2hNZWRpYSgpIHRoYXQncyBpbnNpZGUgYSBzY29wZWQgZ3NhcC5jb250ZXh0KClcblxuICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICBmdW5jID0gY29udGV4dC5hZGQoXCJvbk1hdGNoXCIsIGZ1bmMpO1xuICAgIGNvbnRleHQucXVlcmllcyA9IGNvbmRpdGlvbnM7XG5cbiAgICBmb3IgKHAgaW4gY29uZGl0aW9ucykge1xuICAgICAgaWYgKHAgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgYWN0aXZlID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1xID0gX3dpbi5tYXRjaE1lZGlhKGNvbmRpdGlvbnNbcF0pO1xuXG4gICAgICAgIGlmIChtcSkge1xuICAgICAgICAgIF9tZWRpYS5pbmRleE9mKGNvbnRleHQpIDwgMCAmJiBfbWVkaWEucHVzaChjb250ZXh0KTtcbiAgICAgICAgICAoY29uZFtwXSA9IG1xLm1hdGNoZXMpICYmIChhY3RpdmUgPSAxKTtcbiAgICAgICAgICBtcS5hZGRMaXN0ZW5lciA/IG1xLmFkZExpc3RlbmVyKF9vbk1lZGlhQ2hhbmdlKSA6IG1xLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgX29uTWVkaWFDaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWN0aXZlICYmIGZ1bmMoY29udGV4dCwgZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmFkZChudWxsLCBmKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMi4zXCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMi4zXG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyMywgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5LCBpc05vdENTUykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG5cbiAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBzdHlsZSkge1xuICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICBpZiAocHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGZtW2FdID0gX2dldCh0YXJnZXQsIGEpO1xuICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSBjYWNoZS54ID8gY2FjaGVbcHJvcGVydHldIDogX2dldCh0YXJnZXQsIHByb3BlcnR5KTsgLy8gbm90ZTogc2NhbGUgd291bGQgbWFwIHRvIFwic2NhbGVYLHNjYWxlWVwiLCB0aHVzIHdlIGxvb3AgYW5kIGFwcGx5IHRoZW0gYm90aC5cblxuICAgICAgcHJvcGVydHkgPT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0aGlzLnRmbS56T3JpZ2luID0gY2FjaGUuek9yaWdpbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfcHJvcGVydHlBbGlhc2VzLnRyYW5zZm9ybS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gX3NhdmVTdHlsZS5jYWxsKF90aGlzLCBwLCBpc05vdENTUyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmRleE9mKF90cmFuc2Zvcm1Qcm9wKSA+PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgdGhpcy5zdmdvID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTtcbiAgICAgIHRoaXMucHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgaXNOb3RDU1MsIFwiXCIpO1xuICAgIH1cblxuICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gIH1cblxuICAoc3R5bGUgfHwgaXNOb3RDU1MpICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgaXNOb3RDU1MsIHN0eWxlW3Byb3BlcnR5XSk7XG59LFxuICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKSB7XG4gIGlmIChzdHlsZS50cmFuc2xhdGUpIHtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zbGF0ZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInNjYWxlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwicm90YXRlXCIpO1xuICB9XG59LFxuICAgIF9yZXZlcnRTdHlsZSA9IGZ1bmN0aW9uIF9yZXZlcnRTdHlsZSgpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIGksXG4gICAgICBwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMykge1xuICAgIC8vIHN0b3JlZCBsaWtlIHRoaXM6IHByb3BlcnR5LCBpc05vdENTUywgdmFsdWVcbiAgICBwcm9wc1tpICsgMV0gPyB0YXJnZXRbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogcHJvcHNbaSArIDJdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0uc3Vic3RyKDAsIDIpID09PSBcIi0tXCIgPyBwcm9wc1tpXSA6IHByb3BzW2ldLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgaWYgKHRoaXMudGZtKSB7XG4gICAgZm9yIChwIGluIHRoaXMudGZtKSB7XG4gICAgICBjYWNoZVtwXSA9IHRoaXMudGZtW3BdO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB0aGlzLnN2Z28gfHwgXCJcIik7XG4gICAgfVxuXG4gICAgaSA9IF9yZXZlcnRpbmcoKTtcblxuICAgIGlmICgoIWkgfHwgIWkuaXNTdGFydCkgJiYgIXN0eWxlW190cmFuc2Zvcm1Qcm9wXSkge1xuICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG5cbiAgICAgIGlmIChjYWNoZS56T3JpZ2luICYmIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSkge1xuICAgICAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gKz0gXCIgXCIgKyBjYWNoZS56T3JpZ2luICsgXCJweFwiOyAvLyBzaW5jZSB3ZSdyZSB1bmNhY2hpbmcsIHdlIG11c3QgcHV0IHRoZSB6T3JpZ2luIGJhY2sgaW50byB0aGUgdHJhbnNmb3JtT3JpZ2luIHNvIHRoYXQgd2UgY2FuIHB1bGwgaXQgb3V0IGFjY3VyYXRlbHkgd2hlbiB3ZSBwYXJzZSBhZ2Fpbi4gT3RoZXJ3aXNlLCB3ZSdkIGxvc2UgdGhlIHogcG9ydGlvbiBvZiB0aGUgb3JpZ2luIHNpbmNlIHdlIGV4dHJhY3QgaXQgdG8gcHJvdGVjdCBmcm9tIFNhZmFyaSBidWdzLlxuXG4gICAgICAgIGNhY2hlLnpPcmlnaW4gPSAwO1xuICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIH1cblxuICAgICAgY2FjaGUudW5jYWNoZSA9IDE7IC8vIGlmIGl0J3MgYSBzdGFydEF0IHRoYXQncyBiZWluZyByZXZlcnRlZCBpbiB0aGUgX2luaXRUd2VlbigpIG9mIHRoZSBjb3JlLCB3ZSBkb24ndCBuZWVkIHRvIHVuY2FjaGUgdHJhbnNmb3Jtcy4gVGhpcyBpcyBwdXJlbHkgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdHlsZVNhdmVyID0gZnVuY3Rpb24gX2dldFN0eWxlU2F2ZXIodGFyZ2V0LCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBzYXZlciA9IHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBwcm9wczogW10sXG4gICAgcmV2ZXJ0OiBfcmV2ZXJ0U3R5bGUsXG4gICAgc2F2ZTogX3NhdmVTdHlsZVxuICB9O1xuICB0YXJnZXQuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKHRhcmdldCk7IC8vIGp1c3QgbWFrZSBzdXJlIHRoZXJlJ3MgYSBfZ3NhcCBjYWNoZSBkZWZpbmVkIGJlY2F1c2Ugd2UgcmVhZCBmcm9tIGl0IGluIF9zYXZlU3R5bGUoKSBhbmQgaXQncyBtb3JlIGVmZmljaWVudCB0byBqdXN0IGNoZWNrIGl0IGhlcmUgb25jZS5cblxuICBwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgfSk7XG4gIHJldHVybiBzYXZlcjtcbn0sXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUgJiYgZS5zdHlsZSA/IGUgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBlbnZpcm9ubWVudHMgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgd2hlbiBjcmVhdGVkIHdpdGggYSBuYW1lc3BhY2UgaW4gd2hpY2ggY2FzZSB3ZSBkZWZhdWx0IHRvIHRoZSBzdGFuZGFyZCBjcmVhdGVFbGVtZW50KCkgdG8gd29yayBhcm91bmQgdGhlIGlzc3VlLiBBbHNvIG5vdGUgdGhhdCB3aGVuIEdTQVAgaXMgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIGFuIFNWRyBmaWxlLCBjcmVhdGVFbGVtZW50KCkgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBzdHlsZSBvYmplY3QgaW4gRmlyZWZveCAoc2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcmV2ZXJ0aW5nID0gZ3NhcC5jb3JlLnJldmVydGluZztcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgb2xkUGFyZW50ID0gdGhpcy5wYXJlbnROb2RlLFxuICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICBiYm94O1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJib3ggPSB0aGlzLmdldEJCb3goKTtcbiAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94OyAvL3N0b3JlIHRoZSBvcmlnaW5hbFxuXG4gICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSBlbHNlIGlmICh0aGlzLl9nc2FwQkJveCkge1xuICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICB9XG5cbiAgaWYgKG9sZFBhcmVudCkge1xuICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHM7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICB9XG5cbiAgYm91bmRzICYmIChib3VuZHMud2lkdGggfHwgYm91bmRzLmhlaWdodCkgfHwgdGFyZ2V0LmdldEJCb3ggPT09IF9nZXRCQm94SGFjayB8fCAoYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgZmlyc3QyQ2hhcnM7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCkge1xuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcbiAgICAgIGZpcnN0MkNoYXJzID0gcHJvcGVydHkuc3Vic3RyKDAsIDIpO1xuXG4gICAgICBpZiAoZmlyc3QyQ2hhcnMgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgLy9NaWNyb3NvZnQgYW5kIHNvbWUgV2Via2l0IGJyb3dzZXJzIGRvbid0IGNvbmZvcm0gdG8gdGhlIHN0YW5kYXJkIG9mIGNhcGl0YWxpemluZyB0aGUgZmlyc3QgcHJlZml4IGNoYXJhY3Rlciwgc28gd2UgYWRqdXN0IHNvIHRoYXQgd2hlbiB3ZSBwcmVmaXggdGhlIGNhcHMgd2l0aCBhIGRhc2gsIGl0J3MgY29ycmVjdCAob3RoZXJ3aXNlIGl0J2QgYmUgXCJtcy10cmFuc2Zvcm1cIiBpbnN0ZWFkIG9mIFwiLW1zLXRyYW5zZm9ybVwiIGZvciBJRTksIGZvciBleGFtcGxlKVxuICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KGZpcnN0MkNoYXJzID09PSBcIi0tXCIgPyBwcm9wZXJ0eSA6IHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgb25seVNldEF0RW5kID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSk7XG4gIHBsdWdpbi5fcHQgPSBwdDtcbiAgcHQuYiA9IGJlZ2lubmluZztcbiAgcHQuZSA9IGVuZDtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gIGRlZzogMSxcbiAgcmFkOiAxLFxuICB0dXJuOiAxXG59LFxuICAgIF9ub25TdGFuZGFyZExheW91dHMgPSB7XG4gIGdyaWQ6IDEsXG4gIGZsZXg6IDFcbn0sXG4gICAgLy90YWtlcyBhIHNpbmdsZSB2YWx1ZSBsaWtlIDIwcHggYW5kIGNvbnZlcnRzIGl0IHRvIHRoZSB1bml0IHNwZWNpZmllZCwgbGlrZSBcIiVcIiwgcmV0dXJuaW5nIG9ubHkgdGhlIG51bWVyaWMgYW1vdW50LlxuX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgY3VyVW5pdCA9ICh2YWx1ZSArIFwiXCIpLnRyaW0oKS5zdWJzdHIoKGN1clZhbHVlICsgXCJcIikubGVuZ3RoKSB8fCBcInB4XCIsXG4gICAgICAvLyBzb21lIGJyb3dzZXJzIGxlYXZlIGV4dHJhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBDU1MgdmFyaWFibGVzLCBoZW5jZSB0aGUgbmVlZCB0byB0cmltKClcbiAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgIGhvcml6b250YWwgPSBfaG9yaXpvbnRhbEV4cC50ZXN0KHByb3BlcnR5KSxcbiAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgIGFtb3VudCA9IDEwMCxcbiAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICBweCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhY2hlLFxuICAgICAgaXNTVkc7XG5cbiAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgcmV0dXJuIGN1clZhbHVlO1xuICB9XG5cbiAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICBpZiAoKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gfHwgfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSkpIHtcbiAgICBweCA9IGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICByZXR1cm4gX3JvdW5kKHRvUGVyY2VudCA/IGN1clZhbHVlIC8gcHggKiBhbW91bnQgOiBjdXJWYWx1ZSAvIDEwMCAqIHB4KTtcbiAgfVxuXG4gIHN0eWxlW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA9IGFtb3VudCArICh0b1BpeGVscyA/IGN1clVuaXQgOiB1bml0KTtcbiAgcGFyZW50ID0gfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSB8fCB1bml0ID09PSBcImVtXCIgJiYgdGFyZ2V0LmFwcGVuZENoaWxkICYmICFpc1Jvb3RTVkcgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcblxuICBpZiAoaXNTVkcpIHtcbiAgICBwYXJlbnQgPSAodGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCB8fCB7fSkucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmICghcGFyZW50IHx8IHBhcmVudCA9PT0gX2RvYyB8fCAhcGFyZW50LmFwcGVuZENoaWxkKSB7XG4gICAgcGFyZW50ID0gX2RvYy5ib2R5O1xuICB9XG5cbiAgY2FjaGUgPSBwYXJlbnQuX2dzYXA7XG5cbiAgaWYgKGNhY2hlICYmIHRvUGVyY2VudCAmJiBjYWNoZS53aWR0aCAmJiBob3Jpem9udGFsICYmIGNhY2hlLnRpbWUgPT09IF90aWNrZXIudGltZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBfcm91bmQoY3VyVmFsdWUgLyBjYWNoZS53aWR0aCAqIGFtb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRvUGVyY2VudCAmJiAocHJvcGVydHkgPT09IFwiaGVpZ2h0XCIgfHwgcHJvcGVydHkgPT09IFwid2lkdGhcIikpIHtcbiAgICAgIC8vIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCB3aWR0aC9oZWlnaHQgdGhhdCdzIGluc2lkZSBhIGNvbnRhaW5lciB3aXRoIHBhZGRpbmcgYW5kL29yIGl0J3MgYSBmbGV4Ym94L2dyaWQgY29udGFpbmVyLCB3ZSBtdXN0IGFwcGx5IGl0IHRvIHRoZSB0YXJnZXQgaXRzZWxmIHJhdGhlciB0aGFuIHRoZSBfdGVtcERpdiBpbiBvcmRlciB0byBlbnN1cmUgY29tcGxldGUgYWNjdXJhY3ksIGZhY3RvcmluZyBpbiB0aGUgcGFyZW50J3MgcGFkZGluZy5cbiAgICAgIHZhciB2ID0gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XTtcbiAgICAgIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSBhbW91bnQgKyB1bml0O1xuICAgICAgcHggPSB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHYgPyB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdiA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgIV9ub25TdGFuZGFyZExheW91dHNbX2dldENvbXB1dGVkUHJvcGVydHkocGFyZW50LCBcImRpc3BsYXlcIildICYmIChzdHlsZS5wb3NpdGlvbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJwb3NpdGlvblwiKSk7XG4gICAgICBwYXJlbnQgPT09IHRhcmdldCAmJiAoc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiKTsgLy8gbGlrZSBmb3IgYm9yZGVyUmFkaXVzLCBpZiBpdCdzIGEgJSB3ZSBtdXN0IGhhdmUgaXQgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCBpdHNlbGYgYnV0IHRoYXQgbWF5IG5vdCBoYXZlIHBvc2l0aW9uOiByZWxhdGl2ZSBvciBwb3NpdGlvbjogYWJzb2x1dGUgaW4gd2hpY2ggY2FzZSBpdCdkIGdvIHVwIHRoZSBjaGFpbiB1bnRpbCBpdCBmaW5kcyBpdHMgb2Zmc2V0UGFyZW50IChiYWQpLiBwb3NpdGlvbjogc3RhdGljIHByb3RlY3RzIGFnYWluc3QgdGhhdC5cblxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcbiAgICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICB9XG5cbiAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICBjYWNoZS50aW1lID0gX3RpY2tlci50aW1lO1xuICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xufSxcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gIHZhciB2YWx1ZTtcbiAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgaWYgKHByb3BlcnR5IGluIF9wcm9wZXJ0eUFsaWFzZXMgJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zcGxpdChcIixcIilbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgIHZhbHVlID0gX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0gJiYgX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0odGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkgfHwgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IChwcm9wZXJ0eSA9PT0gXCJvcGFjaXR5XCIgPyAxIDogMCk7IC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCwgZG9uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkhIEluc3RlYWQsIGl0IG9ubHkgcmVwb3J0cyBldmVyeSBjb3JuZXIgbGlrZSAgYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xufSxcbiAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nID0gZnVuY3Rpb24gX3R3ZWVuQ29tcGxleENTU1N0cmluZyh0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzE4MzEwLWNsaXBwYXRoLWRvZXNudC13b3JrLW9uLWlvcy9cbiAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgcyA9IHAgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwLCAxKTtcblxuICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICBwcm9wID0gcDtcbiAgICAgIHN0YXJ0ID0gcztcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7IC8vIEZpcmVmb3ggYnVnOiBhbHdheXMgcmVwb3J0cyBcImJvcmRlckNvbG9yXCIgYXMgXCJcIiwgc28gd2UgbXVzdCBmYWxsIGJhY2sgdG8gYm9yZGVyVG9wQ29sb3IuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yNDU4My1ob3ctdG8tcmV0dXJuLWNvbG9ycy10aGF0LWktaGFkLWFmdGVyLXJldmVyc2UvXG4gICAgfVxuICB9XG5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LnN0eWxlLCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZyksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIGEsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydFZhbHVlcyxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgY29sb3IsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIGVuZFVuaXQsXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRWYWx1ZXM7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy8gZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChlbmQgPT09IFwiYXV0b1wiKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wXTtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgc3RhcnRWYWx1ZSA/IHRhcmdldC5zdHlsZVtwcm9wXSA9IHN0YXJ0VmFsdWUgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgfVxuXG4gIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpOyAvLyBwYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy8gdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NVxuICAgICAgYWRkZWRUb0RPTSA9IDE7IC8vZmxhZ1xuXG4gICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICAgIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHRhcmdldCk7IC8vd2UgbXVzdCBhZGQgaXQgdG8gdGhlIERPTSBpbiBvcmRlciB0byBnZXQgdmFsdWVzIHByb3Blcmx5XG5cbiAgICB9XG5cbiAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCk7XG4gICAgdGVtcCA/IHN0eWxlLmRpc3BsYXkgPSB0ZW1wIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKGFkZGVkVG9ET00pIHtcbiAgICAgIG5leHRTaWJsaW5nID8gcGFyZW50Lmluc2VydEJlZm9yZSh0YXJnZXQsIG5leHRTaWJsaW5nKSA6IHBhcmVudCA/IHBhcmVudC5hcHBlbmRDaGlsZCh0YXJnZXQpIDogX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9yY2UyRCAmJiBtYXRyaXgubGVuZ3RoID4gNiA/IFttYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzRdLCBtYXRyaXhbNV0sIG1hdHJpeFsxMl0sIG1hdHJpeFsxM11dIDogbWF0cml4O1xufSxcbiAgICBfYXBwbHlTVkdPcmlnaW4gPSBmdW5jdGlvbiBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBvcmlnaW4sIG9yaWdpbklzQWJzb2x1dGUsIHNtb290aCwgbWF0cml4QXJyYXksIHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIG1hdHJpeCA9IG1hdHJpeEFycmF5IHx8IF9nZXRNYXRyaXgodGFyZ2V0LCB0cnVlKSxcbiAgICAgIHhPcmlnaW5PbGQgPSBjYWNoZS54T3JpZ2luIHx8IDAsXG4gICAgICB5T3JpZ2luT2xkID0gY2FjaGUueU9yaWdpbiB8fCAwLFxuICAgICAgeE9mZnNldE9sZCA9IGNhY2hlLnhPZmZzZXQgfHwgMCxcbiAgICAgIHlPZmZzZXRPbGQgPSBjYWNoZS55T2Zmc2V0IHx8IDAsXG4gICAgICBhID0gbWF0cml4WzBdLFxuICAgICAgYiA9IG1hdHJpeFsxXSxcbiAgICAgIGMgPSBtYXRyaXhbMl0sXG4gICAgICBkID0gbWF0cml4WzNdLFxuICAgICAgdHggPSBtYXRyaXhbNF0sXG4gICAgICB0eSA9IG1hdHJpeFs1XSxcbiAgICAgIG9yaWdpblNwbGl0ID0gb3JpZ2luLnNwbGl0KFwiIFwiKSxcbiAgICAgIHhPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzBdKSB8fCAwLFxuICAgICAgeU9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMV0pIHx8IDAsXG4gICAgICBib3VuZHMsXG4gICAgICBkZXRlcm1pbmFudCxcbiAgICAgIHgsXG4gICAgICB5O1xuXG4gIGlmICghb3JpZ2luSXNBYnNvbHV0ZSkge1xuICAgIGJvdW5kcyA9IF9nZXRCQm94KHRhcmdldCk7XG4gICAgeE9yaWdpbiA9IGJvdW5kcy54ICsgKH5vcmlnaW5TcGxpdFswXS5pbmRleE9mKFwiJVwiKSA/IHhPcmlnaW4gLyAxMDAgKiBib3VuZHMud2lkdGggOiB4T3JpZ2luKTtcbiAgICB5T3JpZ2luID0gYm91bmRzLnkgKyAofihvcmlnaW5TcGxpdFsxXSB8fCBvcmlnaW5TcGxpdFswXSkuaW5kZXhPZihcIiVcIikgPyB5T3JpZ2luIC8gMTAwICogYm91bmRzLmhlaWdodCA6IHlPcmlnaW4pO1xuXG4gICAgaWYgKCEoXCJ4T3JpZ2luXCIgaW4gY2FjaGUpICYmICh4T3JpZ2luIHx8IHlPcmlnaW4pKSB7XG4gICAgICB4T3JpZ2luIC09IGJvdW5kcy54O1xuICAgICAgeU9yaWdpbiAtPSBib3VuZHMueTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7IC8vIHRoZW9yeTogd2Ugb25seSBoYWQgdG8gZG8gdGhpcyBmb3Igc21vb3RoaW5nIGFuZCBpdCBhc3N1bWVzIHRoYXQgdGhlIHByZXZpb3VzIG9uZSB3YXMgbm90IG9yaWdpbklzQWJzb2x1dGUuXG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3NbX3RyYW5zZm9ybVByb3BdICE9PSBcIm5vbmVcIiA/IGNzW190cmFuc2Zvcm1Qcm9wXSA6IFwiXCIpO1xuICAgIH1cblxuICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG4gIH1cblxuICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgaWYgKGNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIC8vIGlmIGNhY2hlLnVuY2FjaGUgaXMgdHJ1ZSAoYW5kIG1heWJlIGlmIG9yaWdpbiBpcyAwLDApLCB3ZSBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFByZXZpb3VzbHkgd2UgbGV0IHRoZSBkYXRhLXN2Zy1vcmlnaW4gc3RheSBpbnN0ZWFkLCBidXQgd2hlbiBpbnRyb2R1Y2luZyByZXZlcnQoKSwgaXQgY29tcGxpY2F0ZWQgdGhpbmdzLlxuICAgICAgdDIgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgICAgb3JpZ2luID0gY2FjaGUueE9yaWdpbiAtIHQyLnggKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSB0Mi55KSArIFwicHhcIjtcbiAgICAgIHQxID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdDEgPSAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyAgUmVtZW1iZXIsIHRvIHdvcmsgYXJvdW5kIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIHdlIGFsd2F5cyBmb3JjZSBTVkcgZWxlbWVudHMnIHRyYW5zZm9ybU9yaWdpbiB0byAwLDAgYW5kIG9mZnNldCB0aGUgdHJhbnNsYXRpb24gYWNjb3JkaW5nbHkuXG4gICAgfVxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAhdW5jYWNoZSAmJiBjYWNoZS56T3JpZ2luIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS5zdmcgfHwgKGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMCk7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IHN0YXJ0VmFsdWUgPT09IFwiYXV0b1wiIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCAwLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwICE9PSBcInBhcnNlVHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAocCBpbiBzdHlsZSA/IGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pIDogaW5saW5lUHJvcHMucHVzaChwLCAxLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSkpO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmcoKSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5zdHlsZXMucmV2ZXJ0KCk7XG4gICAgfVxuICB9LFxuICBnZXQ6IF9nZXQsXG4gIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgIC8vcmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUgYW5kIGFwcGxpZXMgaXQgYWNjb3JkaW5nbHkuIFJlbWVtYmVyLCBwcm9wZXJ0aWVzIGxpa2UgXCJ4XCIgYXJlbid0IGFzIHNpbXBsZSBhcyB0YXJnZXQuc3R5bGUucHJvcGVydHkgPSB2YWx1ZSBiZWNhdXNlIHRoZXkndmUgZ290IHRvIGJlIGFwcGxpZWQgdG8gYSBwcm94eSBvYmplY3QgYW5kIHRoZW4gbWVyZ2VkIGludG8gYSB0cmFuc2Zvcm0gc3RyaW5nIGluIGEgcmVuZGVyZXIuXG4gICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICBwICYmIHAuaW5kZXhPZihcIixcIikgPCAwICYmIChwcm9wZXJ0eSA9IHApO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgfSxcbiAgY29yZToge1xuICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgfVxufTtcbmdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuZ3NhcC5jb3JlLmdldFN0eWxlU2F2ZXIgPSBfZ2V0U3R5bGVTYXZlcjtcblxuKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdHJhbnNmb3JtUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwiZGVnXCI7XG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX3Byb3BlcnR5QWxpYXNlc1thbGxbMTNdXSA9IHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uO1xuXG4gIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIF9wcm9wZXJ0eUFsaWFzZXNbc3BsaXRbMV1dID0gYWxsW3NwbGl0WzBdXTtcbiAgfSk7XG59KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbl9mb3JFYWNoTmFtZShcIngseSx6LHRvcCxyaWdodCxib3R0b20sbGVmdCx3aWR0aCxoZWlnaHQsZm9udFNpemUscGFkZGluZyxtYXJnaW4scGVyc3BlY3RpdmVcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbn0pO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbik7XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCwgX2dldEJCb3gsIF9jcmVhdGVFbGVtZW50LCBfY2hlY2tQcm9wUHJlZml4IGFzIGNoZWNrUHJlZml4IH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sZWZ0LXBhbmVsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbGVmdC1wYW5lbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcHJvZ3Jlc3MuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9wcm9ncmVzcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2tldGNoLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2tldGNoLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3ZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3ZXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJleHBvcnQgeyBleHBvcnRQZGYgfVxuXG5cbmltcG9ydCB7IGFsbFN0ZXBzLCBjdXJyZW50U3RlcCwgZ290b1N0ZXAsIFN0ZXAsIHpvb21zSW4sIFpvb21TdGVwIH0gZnJvbSAnLi90aW1lbGluZSc7XG5pbXBvcnQgeyBNZXNzYWdlVG9TZXJ2ZXJQZGYgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHNlbmRUb1NlcnZlciB9IGZyb20gJy4vZmlsZXMnO1xuaW1wb3J0IHsgbWFuaWZlc3QgfSBmcm9tICcuL3ZpZXdlcic7XG5cblxuLy8gc2VuZCB0aGUgc2xpZGVzIHRvIGJlIGNvbnZlcnRlZCB0byBwZGYuIHRoZSBjb252ZXJzaW9uIGlzIGRvbmUgYnkgdGhlIGFwcCwgc2luY2UgdGhlIGxpYnJhcmllcyB0aGF0IGRvIHRoaXMgdGFrZSBhcHByb3hpbWF0ZWx5IDNNLCB0aHVzIGluY3JlYXNpbmcgdGhlIHNpemUgb2YgdGhlIHdlYnBhZ2UgZnJvbSAxTSB0byA0TS5cblxuXG5mdW5jdGlvbiByZWR1Y2VTdmcoc3ZnOiBTVkdFbGVtZW50ICYgU1ZHU1ZHRWxlbWVudCk6IHZvaWQge1xuXG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdmcpO1xuICBjb25zdCB2aWV3Qm94ID0gc3ZnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cbiAgc3ZnLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgIGNvbnN0IGJib3ggPSAoZWxlbWVudCBhcyBhbnkpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChcbiAgICAgIGJib3gueCArIGJib3gud2lkdGggPCB2aWV3Qm94LnggfHxcbiAgICAgIGJib3gueSArIGJib3guaGVpZ2h0IDwgdmlld0JveC55IHx8XG4gICAgICBiYm94LnggPiB2aWV3Qm94LnggKyB2aWV3Qm94LndpZHRoIHx8XG4gICAgICBiYm94LnkgPiB2aWV3Qm94LnkgKyB2aWV3Qm94LmhlaWdodFxuICAgICkge1xuICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG4gIH0pO1xuXG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzdmcpO1xufVxuXG5cblxuYXN5bmMgZnVuY3Rpb24gZXhwb3J0UGRmKCk6IFByb21pc2U8dm9pZD4ge1xuXG5cbiAgY29uc3Qgc3ZnRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdmcnKSBhcyBIVE1MRWxlbWVudCAmIFNWR1NWR0VsZW1lbnQ7XG4gIGNvbnN0IHZpZXdCb3ggPSBzdmdFbGVtZW50LnZpZXdCb3guYmFzZVZhbDtcbiAgLy8gY29uc3Qgdmlld0JveCA9IHN2Z0VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHNjYWxlID0gMTtcbiAgY29uc3Qgd2lkdGggPSB2aWV3Qm94LndpZHRoICogc2NhbGU7XG4gIGNvbnN0IGhlaWdodCA9IHZpZXdCb3guaGVpZ2h0ICogc2NhbGU7XG5cblxuICBjb25zdCBzYXZlZFN0ZXAgPSBjdXJyZW50U3RlcCgpO1xuXG5cbiAgbGV0IGFsbCA9IGFsbFN0ZXBzKCk7XG5cblxuICBjb25zdCByZXR2YWw6IE1lc3NhZ2VUb1NlcnZlclBkZiA9IHtcbiAgICB0eXBlOiAndG9QZGYnLFxuICAgIHN2ZzogdW5kZWZpbmVkLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBwcmVzZW50YXRpb246IG1hbmlmZXN0LnByZXNlbnRhdGlvbixcbiAgICBtYXhpbmRleDogMCxcbiAgICBpbmRleDogMFxuICB9XG5cbiAgLy93aGljaCBzdGVwcyBzaG91bGQgbWFrZSBpdCB0byB0aGUgcGRmXG4gIGZ1bmN0aW9uIHVzZVN0ZXAoc3RlcDogU3RlcCkge1xuICAgIHJldHVybiB0cnVlO1xuICAgIC8vd2UgY2FuIGxhdGVyIGltcm92ZSB0aGlzIGxvZ2ljIHNvIHRoYXQgb25seSBzb21lIGV2ZW50cyBhcmUgZXhwb3J0ZWQsIHN1Y2ggYXMgdGhlIGZvbGxvd2luZyAod2hpY2ggZG9lcyBub3Qgd29yaywgYnV0IGFwcGVhbHMgdG8gdGhlIHJpZ2h0IG1ldGhvZHMpXG4gICAgLy8gIHJldHVybiBzdGVwIGluc3RhbmNlb2YgWm9vbVN0ZXAgJiYgIXpvb21zSW4oc3RlcCk7XG4gIH1cblxuICAvL2NvdW50IGhvdyBtYW55IHN0ZXBzIHdpbGwgYmUgdXNlZFxuICBmb3IgKGNvbnN0IHN0ZXAgb2YgYWxsKVxuICAgIGlmICh1c2VTdGVwKHN0ZXApKVxuICAgICAgcmV0dmFsLm1heGluZGV4Kys7XG5cblxuICBjb25zdCBzdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGRmLWV4cG9ydC1zdGF0dXMnKTtcblxuICB0cnkge1xuICAgIGZvciAoY29uc3Qgc3RlcCBvZiBhbGwpXG4gICAgICBpZiAodXNlU3RlcChzdGVwKSkge1xuICAgICAgICBhd2FpdCBnb3RvU3RlcChzdGVwLCAnc2lsZW50Jyk7XG4gICAgICAgIGNvbnN0IGNsb25lZFNWRyA9IHN2Z0VsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50ICYgU1ZHU1ZHRWxlbWVudDtcblxuXG4gICAgICAgIHJlZHVjZVN2ZyhjbG9uZWRTVkcpO1xuICAgICAgICByZXR2YWwuc3ZnID0gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhjbG9uZWRTVkcpO1xuICAgICAgICByZXR2YWwuaW5kZXgrKztcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzZW5kVG9TZXJ2ZXIocmV0dmFsKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAncGRmIGNyZWF0ZWQnKSB7XG4gICAgICAgICAgc3RhdHVzLmlubmVySFRNTCA9ICdFeHBvcnRpbmcgc2xpZGUgJyArIHJldHZhbC5pbmRleCArICcvJyArIHJldHZhbC5tYXhpbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAnZXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyAocmVzcG9uc2UuZXhwbGFuYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHRocm93ICd1bmV4cGVjdGVkIHJlc3BvbnNlIGZyb20gc2VydmVyJztcbiAgICAgIH1cbiAgICBzdGF0dXMuaW5uZXJIVE1MID0gJ1N1Y2Nlc3NmdWxseSBleHBvcnRlZCBwZGYuJztcblxuICAgIC8vc2hvdyBhIGxpdHRsZSBhbmltYXRpb24gdGhhdCBkcmF3cyBhdHRlbnRpb24gdG8gdGhlIHBkZiBpY29uXG4gICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaW5rLXRvLXBkZicpO1xuICAgIGljb24uY2xhc3NMaXN0LmFkZCgnZ3Jvd0FuZFNocmluaycpO1xuICAgIGNvbnNvbGUubG9nKCdhZGRpbmcgbmV3Jyk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpY29uLmNsYXNzTGlzdC5yZW1vdmUoJ2dyb3dBbmRTaHJpbmsnKVxuICAgIH0sIDMwMDApO1xuXG4gIH1cbiAgY2F0Y2ggKGUpIHtcbiAgICBzdGF0dXMuaW5uZXJIVE1MID0gJ0ZhaWxlZCB0byBleHBvcnQ6JyArIGVcbiAgfVxuICBnb3RvU3RlcChzYXZlZFN0ZXAsICdzaWxlbnQnKTtcblxuXG5cblxuXG59XG5cbi8vIC8vdGhpcyBpcyBmb3IgZGVidWdnaW5nIHB1cnBvc2VzXG4vLyAod2luZG93IGFzIGFueSkuZXhwb3J0UGRmID0gZXhwb3J0UGRmO1xuIiwiZXhwb3J0IHtcbiAgICBjcmVhdGVFdmVudFRyZWUsXG4gICAgem9vbVNsaWRlLFxuICAgIGlzT3ZlcmxheSxcbiAgICBydW5PdmVybGF5LFxuICAgIGV2ZW50RGVzY3JpcHRpb24sXG4gICAgZmluZFpvb21FdmVudFxufVxuXG5pbXBvcnQge1xuICAgIEV2ZW50RGVzY3JpcHRpb24sXG4gICAgU2xpZGVFdmVudCwgWm9vbUV2ZW50XG59IGZyb20gJy4vdHlwZXMnXG5cblxuXG5pbXBvcnQge1xuICAgIG1hbmlmZXN0XG59IGZyb20gJy4vdmlld2VyJ1xuXG5pbXBvcnQge1xuICAgIGFwcGx5VHJhbnNmb3JtLFxuICAgIFJlY3QsXG59IGZyb20gJy4vdHJhbnNmb3JtJ1xuXG5pbXBvcnQge1xuICAgIFRpbWVsaW5lTWF4LCBnc2FwXG59IGZyb20gXCJnc2FwXCI7XG5pbXBvcnQge092ZXJsYXlTdGVwLCBTdGVwLCB6b29tc0luLCBab29tU3RlcCB9IGZyb20gJy4vdGltZWxpbmUnXG5pbXBvcnQgeyBsb2NhbFJlY3QsIHRyYW5zZm9ybXMsIHN2Z01hcCB9IGZyb20gJy4vbG9hZFNWRydcblxuXG5cbi8vdGhpcyBpcyBob3cgd2UgY2FuIGFjY2VzcyB2YXJpYWJsZXMgaW4gdGhlIGJyb3dzZXIgY29uc29sZVxuLy8gKHdpbmRvdyBhcyBhbnkpLnN2Z01hcCA9IHN2Z01hcDtcblxuXG5cblxuXG5cbmZ1bmN0aW9uIGlzT3ZlcmxheShldmVudDogU2xpZGVFdmVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoZXZlbnQudHlwZSA9PSAnc2hvdycgfHwgZXZlbnQudHlwZSA9PSAnaGlkZScpO1xufVxuXG5cblxuLy9kbyBhbiBhbmltYXRlZCB6b29tIHRvIHRoZSBzbGlkZSBvbiB0aGUgdG9wIG9mIHRoZSBzdGFja1xuZnVuY3Rpb24gem9vbVNsaWRlKG5vZGU6IFNsaWRlRXZlbnQsIG1vZGU6ICdzaWxlbnQnIHwgJ2FuaW1hdGVkJyA9ICdhbmltYXRlZCcpOiB2b2lkIHtcbiAgICBmdW5jdGlvbiB0ZXh0UmVjdChyZWN0OiBSZWN0KSB7XG4gICAgICAgIHJldHVybiBcIiBcIiArIHJlY3QueCArIFwiIFwiICsgcmVjdC55ICsgXCIgXCIgKyByZWN0LndpZHRoICsgXCIgXCIgKyByZWN0LmhlaWdodDtcbiAgICB9XG4gICAgY29uc3Qgc3ZnRG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdmdcIikgYXMgU1ZHU1ZHRWxlbWVudCAmIEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3Qgdmlld0JveCA9IGFwcGx5VHJhbnNmb3JtKHRyYW5zZm9ybXMuZ2V0KG5vZGUpLCBsb2NhbFJlY3QuZ2V0KG5vZGUpKTtcblxuICAgIGlmIChtb2RlID09ICdzaWxlbnQnKSB7XG4gICAgICAgIHN2Z0RvbS5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCB0ZXh0UmVjdCh2aWV3Qm94KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB0bGEgPSBuZXcgVGltZWxpbmVNYXgoe30pO1xuICAgICAgICB0bGEudG8oc3ZnRG9tLCAxLjUsIHtcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICB2aWV3Qm94OiB0ZXh0UmVjdCh2aWV3Qm94KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8vZXhlY3V0ZSBhbiBvdmVybGF5IGV2ZW50IChmb3IgdGhlIG1vbWVudCwgdGhlc2UgYXJlIGhpZGUgb3Igc2hvdylcbmZ1bmN0aW9uIHJ1bk92ZXJsYXkob3ZlcmxheTogU2xpZGVFdmVudCwgZGlyZWN0aW9uOiBudW1iZXIsIHNpbGVudDogc3RyaW5nKTogdm9pZCB7XG4gICAgbGV0IG9wYWNpdHk7XG4gICAgaWYgKChvdmVybGF5LnR5cGUgPT0gXCJzaG93XCIgJiYgZGlyZWN0aW9uID09IDEpIHx8IChvdmVybGF5LnR5cGUgPT0gXCJoaWRlXCIgJiYgZGlyZWN0aW9uID09IC0xKSlcbiAgICAgICAgb3BhY2l0eSA9IDE7XG5cbiAgICBlbHNlXG4gICAgICAgIG9wYWNpdHkgPSAwO1xuXG4gICAgY29uc3Qgc3ZnID0gc3ZnTWFwLmdldChvdmVybGF5KTtcbiAgICBpZiAoc3ZnICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoc2lsZW50ID09ICdhbmltYXRlZCcpIHtcbiAgICAgICAgICAgIGdzYXAudG8oc3ZnLCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuMyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN2Zy5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8vY3JlYXRlcyB0aGUgdHJlZSBvZiBzbGlkZXMgYW5kIGV2ZW50cywgd2l0aG91dCBhZGRpbmcgdGhlIHN2ZyBvYmplY3RzIHlldFxuZnVuY3Rpb24gY3JlYXRlRXZlbnRUcmVlKCk6IHZvaWQge1xuXG4gICAgZnVuY3Rpb24gbWFrZVBhcmVudHMobm9kZTogU2xpZGVFdmVudCwgcGFyZW50OiBab29tRXZlbnQpIHtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT0gJ2NoaWxkJykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKVxuICAgICAgICAgICAgICAgIG1ha2VQYXJlbnRzKGNoaWxkLCBub2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1ha2VQYXJlbnRzKG1hbmlmZXN0LnRyZWUsIHVuZGVmaW5lZCk7XG5cbiAgICBcblxuICAgIFxufVxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBldmVudERlc2NyaXB0aW9uKHN0ZXA6IFN0ZXApOiBFdmVudERlc2NyaXB0aW9uIHtcbiAgICBjb25zdCByZXR2YWwgOiBFdmVudERlc2NyaXB0aW9uID0geyBcbiAgICAgICAgdHlwZSA6ICdldmVudCcsXG4gICAgICAgIHNsaWRlSWQ6IHVuZGVmaW5lZCBhcyBzdHJpbmcsIGV2ZW50SWQ6IHVuZGVmaW5lZCBhcyBzdHJpbmcgfTtcbiAgICBpZiAoc3RlcCBpbnN0YW5jZW9mIE92ZXJsYXlTdGVwKSB7XG4gICAgICAgIHJldHZhbC5zbGlkZUlkID0gc3RlcC5vdmVybGF5c1swXS5wYXJlbnQuaWQ7XG4gICAgICAgIHJldHZhbC5ldmVudElkID0gc3RlcC5vdmVybGF5c1swXS5ldmVudElkO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdGVwIGluc3RhbmNlb2YgWm9vbVN0ZXApIHtcbiAgICAgICAgcmV0dmFsLnNsaWRlSWQgPSBzdGVwLnNvdXJjZS5pZDtcbiAgICAgICAgaWYgKHpvb21zSW4oc3RlcCkpXG4gICAgICAgICAgICByZXR2YWwuZXZlbnRJZCA9IHN0ZXAudGFyZ2V0LmV2ZW50SWQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHZhbC5ldmVudElkID0gJ2ZpbmlzaCc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvL3RoZSBsYXN0IHN0ZXBcbiAgICAgICAgcmV0dmFsLnNsaWRlSWQgPSBtYW5pZmVzdC50cmVlLmlkO1xuICAgICAgICByZXR2YWwuZXZlbnRJZCA9ICdmaW5pc2gnO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dmFsO1xufVxuXG5mdW5jdGlvbiBmaW5kWm9vbUV2ZW50KGlkIDogc3RyaW5nICkgOiBab29tRXZlbnQge1xuICAgIGZ1bmN0aW9uIHJlYyhldmVudCA6IFpvb21FdmVudCkgOiBab29tRXZlbnQge1xuICAgICAgICBpZiAoZXZlbnQuaWQgPT0gaWQpXG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgZXZlbnQuY2hpbGRyZW4pXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PSAnY2hpbGQnKXtcbiAgICAgICAgICAgICAgICBjb25zdCByZXR2YWwgPSByZWMoY2hpbGQpO1xuICAgICAgICAgICAgICAgIGlmIChyZXR2YWwgIT0gdW5kZWZpbmVkKSAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlYyhtYW5pZmVzdC50cmVlKTtcbn1cblxuXG5cblxuXG5cbiIsImV4cG9ydCB7XG4gICAgcHJlc2VudGF0aW9uRGlyLFxuICAgIGZpbGVOYW1lLFxuICAgIHNlbmRUb1NlcnZlcixcbiAgICBmZXRjaEpTT04sXG4gICAgcHJvYmVTZXJ2ZXJcbn1cblxuXG5cbmltcG9ydCB7XG4gICAgdXNlckFsZXJ0XG59IGZyb20gJy4vaHRtbCdcblxuaW1wb3J0IHsgTWVzc2FnZVRvU2VydmVyLCBTZXJ2ZXJSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgSnNvblN0cmVhbVN0cmluZ2lmeSB9IGZyb20gJ2pzb24tc3RyZWFtLXN0cmluZ2lmeSc7XG5cbmltcG9ydCB7XG4gICAgbWFuaWZlc3Rcbn0gZnJvbSAnLi92aWV3ZXInXG5pbXBvcnQgeyBsaXN0LCBzYXZlIH0gZnJvbSAncGRma2l0JztcblxuXG5cbi8vdGhlIGRpcmVjdG9yeSB3aGVyZSB0aGUgc2xpZGVzIGFyZVxuZnVuY3Rpb24gcHJlc2VudGF0aW9uRGlyKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuJ1xuICAgIC8vIHJldHVybiAgJ3NsaWRlcy8nICsgKG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpKS5zZWFyY2hQYXJhbXMuZ2V0KCdzbGlkZXMnKTsgXG59XG5cblxuZnVuY3Rpb24gZ2V0U2VydmVyKCkge1xuICAgIHJldHVybiAnaHR0cDovL2xvY2FsaG9zdDozMDAxJztcbn1cblxuXG4vL2dpdmVzIHRoZSBuYW1lIGZvciBhIGZpbGUgaW4gYSBzbGlkZSwgaW4gdGhlIGN1cnJlbnQgcHJlc2VudGF0aW9uXG4vL3RoZSBzbGlkZSBwYXJhbWV0ZXIgY291bGQgYmUgbnVsbCwgZm9yIHRvcC1sZXZlbCBpbmZvcm1hdGlvbiBpbiB0aGUgcHJlc2VudGF0aW9uLlxuZnVuY3Rpb24gZmlsZU5hbWUoc2xpZGU6IHN0cmluZywgZmlsZTogc3RyaW5nKTogc3RyaW5nIHtcblxuICAgIGlmIChzbGlkZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcmVzZW50YXRpb25EaXIoKSArICcvJyArIGZpbGU7XG4gICAgfSBlbHNlXG4gICAgICAgIHJldHVybiBwcmVzZW50YXRpb25EaXIoKSArICcvJyArIG1hbmlmZXN0LnNsaWRlRGljdFtzbGlkZV0gKyAnLycgKyBmaWxlO1xufVxuXG5cblxuLypcbi8vIGZhaWxlZCBhdHRlbXB0IG5yLiAxIHRvIHN0cmluZ2lmeSBsYXJnZSBvYmplY3RzXG4vLyB0aGUgdXN1YWwganNvbi5zdHJpbmdpZnkgZmFpbHMgb24gbGFyZ2Ugb2JqZWN0cywgYW5kIEkgZmFpbGVkIHRvIHVzZSBKU09OU3RyZWFtIHN0cmluZ2lmeSBhZnRlciBtYXkgYXR0ZXBtdHNcbmZ1bmN0aW9uIG15U3RyaW5naWZ5KG1zZyA6IE1lc3NhZ2VUb1NlcnZlcikgOiBSZWFkYWJsZSB7XG4gICAgY29uc3QgcmV0dmFsID0gbmV3IFJlYWRhYmxlKCk7XG5cbiAgICBpZiAobXNnLnR5cGUgPT0gJ3RvUGRmJykge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBjYXNlIHRoYXQgZ2l2ZXMgbGFyZ2UgcmVzdWx0c1xuICAgICAgICBjb25zdCBzYXZlZFN2Z3MgPSBtc2cuc3ZncztcbiAgICAgICAgbXNnLnN2Z3MgPSBbJ3BsYWNlaG9sZGVyJ107XG4gICAgICAgIGxldCBmaXJzdFN0cmluZyA9IEpTT04uc3RyaW5naWZ5KG1zZyk7XG4gICAgICAgIGNvbnN0IHR3b1BhcnRzID0gZmlyc3RTdHJpbmcuc3BsaXQoXCIncGxhY2Vob2xkZXInXCIpO1xuICAgICAgICByZXR2YWwucHVzaCh0d29QYXJ0c1swXSk7XG5cblxuXG4gICAgICAgIGxldCBsZW5ndGggPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IHN2ZyBvZiBzYXZlZFN2Z3MpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyID0gSlNPTi5zdHJpbmdpZnkoc3ZnKTtcbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gc3RyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc3RyaW5naWZ5aW5nIHNvbWV0aGluZywgbmV3IGxlbmd0aCBpcycrIHN0ci5sZW5ndGggKyAnIHRvdGFsIGxlbmd0aCBpcycgKyBsZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJldHZhbC5wdXNoKHN0cisnLCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIHJldHZhbC5wdXNoKHR3b1BhcnRzWzFdKTtcbiAgICB9XG4gICAgZWxzZSBcbiAgICAgICAgcmV0dmFsLnB1c2goSlNPTi5zdHJpbmdpZnkobXNnKSk7XG5cbiAgICByZXR1cm4gcmV0dmFsO1xufVxuXG4vLyBmYWlsZWQgc2Vjb25kIGF0dGVtcHRcbmZ1bmN0aW9uIG15U3RyaW5naWZ5Mihtc2cgOiBNZXNzYWdlVG9TZXJ2ZXIpIDogUmVhZGFibGUge1xuICAgIGNsYXNzIE15UmVhZGFibGVTdHJlYW0gZXh0ZW5kcyBSZWFkYWJsZSB7XG4gICAgICBjb25zdHJ1Y3RvcihvcHRpb25zIDogYW55KSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIFxuICAgICAgLy8gSW1wbGVtZW50IHRoZSBfcmVhZCBtZXRob2RcbiAgICAgIF9yZWFkKCkge1xuICAgICAgICAvLyBJbXBsZW1lbnQgYW55IGxvZ2ljIGlmIG5lZWRlZCBiZWZvcmUgcHVzaGluZyBkYXRhXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEluc3RhbnRpYXRlIHlvdXIgY3VzdG9tIHJlYWRhYmxlIHN0cmVhbVxuICAgIGNvbnN0IG15UmVhZGFibGVTdHJlYW0gPSBuZXcgTXlSZWFkYWJsZVN0cmVhbSh7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGEgSlNPTlN0cmVhbSBzdHJpbmdpZmllclxuICAgIGNvbnN0IHN0cmluZ2lmaWVyID0gSlNPTlN0cmVhbS5zdHJpbmdpZnkoKTtcbiAgICBcbiAgICAvLyBIYW5kbGUgZXJyb3JzIGR1cmluZyBzdHJpbmdpZmljYXRpb25cbiAgICBzdHJpbmdpZmllci5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzdHJpbmdpZnlpbmcgSlNPTjonLCBlcnIpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIFBpcGUgdGhlIG91dHB1dCBvZiB0aGUgSlNPTiBzdHJpbmdpZmllciB0byB0aGUgY3VzdG9tIHJlYWRhYmxlIHN0cmVhbVxuICAgIHN0cmluZ2lmaWVyLnBpcGUobXlSZWFkYWJsZVN0cmVhbSk7XG59XG4qL1xuXG5cblxuLy9zZW5kIGFuIG9iamVjdCB0byB0aGUgc2VydmVyXG5hc3luYyBmdW5jdGlvbiBzZW5kVG9TZXJ2ZXIobXNnOiBNZXNzYWdlVG9TZXJ2ZXIpOiBQcm9taXNlPFNlcnZlclJlc3BvbnNlPiB7XG4gICAgaWYgKG1zZy50eXBlID09ICdzbGlkZXMnIHx8IG1zZy50eXBlID09ICd3YXYnKVxuICAgICAgICBtc2cucHJlc2VudGF0aW9uID0gbWFuaWZlc3QucHJlc2VudGF0aW9uO1xuXG5cbiAgICBcblxuXG5cbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkobXNnKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGdldFNlcnZlcigpLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBqc29uIGFzIGFueSAgLy9JIGNhbm5vdCBmaWd1cmUgaG93IHRvIGNvcnJlY3RseSB0eXBlIHB1dHRpbmcgYSBzdHJlYW0gaW50byB0aGUgYm9keVxuICAgIH0pO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzIDogJ2Vycm9yJywgZXhwbGFuYXRpb24gOiAnbm90IGNvbm5lY3RlZCcgfTtcbiAgICB9IGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpIGFzIFNlcnZlclJlc3BvbnNlO1xuICAgICAgICB9XG59XG5cblxuXG5cbi8vZ2V0IGEganNvbiBmaWxlIGFuZCBwYXJzZSBpdFxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hKU09OKGZpbGVuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHVua25vd24+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChmaWxlbmFtZSk7XG4gICAgICAgIGlmICghKHJlcy5vaykpXG4gICAgICAgICAgICB0aHJvdyBcIm5vdCBjb25uZWN0ZWRcIjtcblxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHVzZXJBbGVydChcIkNvdWxkIG5vdCBsb2FkIHNsaWRlIGZpbGUgXCIgKyBmaWxlbmFtZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiBcblxuXG5hc3luYyBmdW5jdGlvbiBwcm9iZVNlcnZlcigpIDogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZmV0Y2goZ2V0U2VydmVyKCksIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdwcm9iZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9XG59IiwiZXhwb3J0IHtcbiAgICBtYXJrU2VlbixcbiAgICBhdWRpb1BsYXlpbmcsXG4gICAgdXBkYXRlVGltZWxpbmVEaXNwbGF5LFxuICAgIGluaXRQYW5lbHMsXG4gICAgb3BlblBhbmVsVHJlZSxcbiAgICBvcGVuUGFuZWxUcmVlUmVjLFxuICAgIHJlbW92ZUxvYWRpbmcsXG4gICAgdXBkYXRlUGFnZU51bWJlcixcbiAgICB1c2VyQWxlcnQsXG4gICAgbWFya0Rpc2FibGVkLFxuICAgIHNvdW5kSWNvbixcbiAgICB0aW1lbGluZVNlZW4sXG4gICAgdGltZWxpbmVIVE1MLFxuICAgIHVzZXJEZWZpbmVkS2V5c1xufVxuXG5cblxuXG5pbXBvcnQge1xuICAgIG1hbmlmZXN0LFxuICAgIHBsYXlCdXR0b24sXG4gICAgcHJldkJ1dHRvbixcbiAgICBuZXh0QnV0dG9uXG59IGZyb20gJy4vdmlld2VyJ1xuXG5pbXBvcnQge1xuICAgIHBsYXliYWNrUmF0ZUNoYW5nZSxcbiAgICBzb3VuZFN0YXRlLFxuICAgIGdvdG9BdWRpbyxcbiAgICBzb3VuZHMsXG4gICAgdG90YWxTb3VuZER1cmF0aW9uLFxuICAgIGVuZE9mU291bmQsXG4gICAgU291bmRTdGF0ZSxcbiAgICBzdGVwQXVkaW9cbn0gZnJvbSAnLi9zb3VuZCdcblxuaW1wb3J0IHtcbiAgICBpbml0U2VhcmNoXG59IGZyb20gJy4vc2VhcmNoJ1xuXG5pbXBvcnQge1xuICAgIGdzYXBcbn0gZnJvbSBcImdzYXBcIjtcblxuXG5pbXBvcnQgeyBTbGlkZUV2ZW50LCBab29tRXZlbnQgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHRvZ2dsZVNrZXRjaHBhZCwgY3VycmVudFRvb2wgfSBmcm9tICcuL3NrZXRjaHBhZCc7XG5pbXBvcnQgeyBjdXJyZW50U3RlcCwgZ290b0V2ZW50LCBnb3RvU3RlcCwgU3RlcCwgdGltZWxpbmUsIHpvb21zSW4sIE92ZXJsYXlTdGVwLCBab29tU3RlcCwgYWxsU3RlcHMgfSBmcm9tICcuL3RpbWVsaW5lJ1xuaW1wb3J0IHsgZXhwb3J0UGRmIH0gZnJvbSAnLi9jbGllbnQtcHJpbnQnO1xuXG5cblxuXG5cblxuXG4vL3RoZXNlIGRpY3Rpb25hcmllcyBzdG9yZSwgZm9yIGVhY2ggc2xpZGUgZXZlbnQsIHRoZSBjb3JyZXNwb25kaW5nIGRpdiBhbmQgc3VidHJlZURpdiBpbiB0aGUgdHJlZSBwYW5lbC4gVGhlIGRpdiBpcyB0aGUgbmFtZSBvZiB0aGUgZXZlbnQsIHdoaWxlIHRoZSBzdWJ0cmVlRGl2IGlzIGRlZmluZWQgb25seSBmb3IgY2hpbGQgZXZlbnRzLCBhbmQgaXQgaXMgdGhlIHN1YnRyZWUuXG5jb25zdCBkaXZDYWNoZTogTWFwPFNsaWRlRXZlbnQsIEhUTUxEaXZFbGVtZW50PiA9IG5ldyBNYXAoKTtcbmNvbnN0IHN1YnRyZWVEaXZDYWNoZTogTWFwPFNsaWRlRXZlbnQsIEhUTUxEaXZFbGVtZW50PiA9IG5ldyBNYXAoKTtcbi8vdGhpcyBpcyBhIGxpbmsgdG8gdGhlIHByb2dyZXNzIGl0ZW0gaW4gdGhlIHByb2dyZXNzIGJhciBhdCB0aGUgYm90dG9tXG5jb25zdCBwcm9ncmVzc0NhY2hlOiBNYXA8U3RlcCwgSFRNTERpdkVsZW1lbnQ+ID0gbmV3IE1hcCgpO1xuXG4vL3RoaXMgZGljdGlvbmFyeSB0ZWxscyB5b3UgaWYgdGhlIGRpdiwgZm9yIGEgY2hpbGQgZXZlbnQsIGlzIG9wZW4gKHRoZSB0cmVlIGlzIHVuZm9sZGVkXG5jb25zdCBkaXZPcGVuOiBNYXA8U2xpZGVFdmVudCwgYm9vbGVhbj4gPSBuZXcgTWFwKCk7XG5cblxuXG4vL2NyZWF0ZSB0aGUgdHJlZSBsaXN0IG9mIHRoZSBzbGlkZXMgYW5kIGV2ZW50IHRoYXQgaXMgaW4gdGhlIHVuZm9sZGluZyBzaWRlIHBhbmVsIG9uIHRoZSBsZWZ0XG5mdW5jdGlvbiBjcmVhdGVUcmVlSFRNTCgpOiB2b2lkIHtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVRyZWVIVE1MUmVjKGV2ZW50OiBTbGlkZUV2ZW50KSB7XG5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRDbGlja2VkKGU6IE1vdXNlRXZlbnQpIC8vd2hhdCBoYXBwZW5zIHdoZW4gYW4gZXZlbnQgaXMgY2xpY2tlZCBpbiB0aGUgY29udHJvbCBwYW5lbFxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoKGUudGFyZ2V0IGFzIEVsZW1lbnQpLm5vZGVOYW1lID09ICdJJykge1xuICAgICAgICAgICAgICAgIC8vdGhlIGljb24gd2FzIGNsaWNrZWRcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PSAnY2hpbGQnKSAvLyBmb3IgY2hpbGQgZXZlbnRzLCB3ZSBmb2xkL3VuZm9sZCB0aGUgbGlzdCBvZiBjaGlsZCBldmVudHNcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wZW4gPSAhZGl2T3Blbi5nZXQoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBkaXZPcGVuLnNldChldmVudCwgb3Blbik7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5QYW5lbFRyZWUoZXZlbnQsIG9wZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy90aGUgbmFtZSBvZiB0aGUgZXZlbnQgd2FzIGNsaWNrZWRcbiAgICAgICAgICAgICAgICBnb3RvRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRpdk9wZW4uc2V0KGV2ZW50LCBmYWxzZSk7XG4gICAgICAgIGlmIChldmVudC5wYXJlbnQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdWJ0cmVlRGl2Q2FjaGUuc2V0KGV2ZW50LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2xpZGUtc3RhY2snKSBhcyBIVE1MRGl2RWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQubWVyZ2VkICYmIGV2ZW50LnR5cGUgIT0gJ2NoaWxkJykge1xuICAgICAgICAgICAgLy9tZXJnZWQgZXZlbnRzIGdldCBubyBpdGVtcyBpbiB0aGUgdHJlZSB2aWV3XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnREaXYgPSBzdWJ0cmVlRGl2Q2FjaGUuZ2V0KGV2ZW50LnBhcmVudCk7XG4gICAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZGl2Q2FjaGUuc2V0KGV2ZW50LCBkaXYpO1xuICAgICAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoXCJ0cmVlLXZpZXctaXRlbVwiKTtcbiAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKFwidHJlZS12aWV3LWl0ZW0tbG9hZGluZ1wiKTtcblxuICAgICAgICAgICAgbGV0IGljb247XG5cblxuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gXCJzaG93XCIpXG4gICAgICAgICAgICAgICAgaWNvbiA9IFwidmlzaWJpbGl0eVwiO1xuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gXCJoaWRlXCIpXG4gICAgICAgICAgICAgICAgaWNvbiA9IFwidmlzaWJpbGl0eV9vZmZcIjtcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09IFwiY2hpbGRcIikge1xuICAgICAgICAgICAgICAgIGljb24gPSBcImNoZXZyb25fcmlnaHRcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IFwiPGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5cIiArIGljb24gKyBcIjwvaT4gXCIgKyBldmVudC5uYW1lO1xuXG4gICAgICAgICAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudENsaWNrZWQpO1xuICAgICAgICAgICAgcGFyZW50RGl2LmFwcGVuZENoaWxkKGRpdik7XG5cblxuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gJ2NoaWxkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YmRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgc3ViZGl2LmNsYXNzTGlzdC5hZGQoXCJzbGlkZS1zdGFja1wiKTtcbiAgICAgICAgICAgICAgICBzdWJkaXYuY2xhc3NMaXN0LmFkZChcInNsaWRlLXN0YWNrLWhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICBwYXJlbnREaXYuYXBwZW5kQ2hpbGQoc3ViZGl2KTtcbiAgICAgICAgICAgICAgICBzdWJ0cmVlRGl2Q2FjaGUuc2V0KGV2ZW50LCBzdWJkaXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9yZWN1cnNpdmVseSBjYWxsIGZvciBhbGwgY2hpbGRyZW5cbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gJ2NoaWxkJykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBldmVudC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICBjcmVhdGVUcmVlSFRNTFJlYyhjaGlsZClcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVUcmVlSFRNTFJlYyhtYW5pZmVzdC50cmVlKTtcblxufVxuXG5mdW5jdGlvbiB0aW1lbGluZUhUTUwoKTogdm9pZCB7XG5cbiAgICBwcm9ncmVzc0NhY2hlLmNsZWFyKCk7XG5cblxuXG5cbiAgICBjb25zdCB0aW1lbGluZURJViA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzcy1saW5lJyk7XG4gICAgdGltZWxpbmVESVYuaW5uZXJIVE1MID0gJyc7XG4gICAgZm9yIChjb25zdCBzdGVwIG9mIGFsbFN0ZXBzKCkpIHtcbiAgICAgICAgY29uc3QgYmlnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnN0IHNtYWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNtYWxsLmNsYXNzTGlzdC5hZGQoJ3Byb2dyZXNzLWZpbGxlcicpO1xuICAgICAgICBzbWFsbC5zdHlsZS53aWR0aCA9ICcwJSc7XG4gICAgICAgIGJpZy5hcHBlbmRDaGlsZChzbWFsbCk7XG4gICAgICAgIHRpbWVsaW5lRElWLmFwcGVuZENoaWxkKGJpZyk7XG4gICAgICAgIGJpZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB0aW1lbGluZUNsaWNrZWQoc3RlcCwgZSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3Qgc291bmQgPSBzb3VuZHMuZ2V0KHN0ZXApO1xuXG4gICAgICAgIGlmIChzb3VuZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJpZy5jbGFzc0xpc3QucmVtb3ZlKCdub3NvdW5kJyk7XG4gICAgICAgICAgICBiaWcuc3R5bGUuZmxleEdyb3cgPSBzb3VuZC5kdXJhdGlvbi50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYmlnLmNsYXNzTGlzdC5hZGQoJ25vc291bmQnKTtcbiAgICAgICAgICAgIGJpZy5zdHlsZS5mbGV4R3JvdyA9ICcxMCc7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9ncmVzc0NhY2hlLnNldChzdGVwLCBiaWcpO1xuICAgICAgICB0aW1lbGluZVNlZW4oc3RlcCwgdGltZWxpbmUucGFzdC5pbmNsdWRlcyhzdGVwKSk7XG4gICAgfVxufVxuXG5cbi8vdGhlIHRpbWVsaW5lIGZvciBhbiBldmVudCB3YXMgY2xpY2tlZDsgd2l0aCB0aGUgcmF0aW8gYmVpbmcgdGhlIGluZGljYXRpbmcgdGhlIGNsaWNrIHBvc2l0aW9uIGluc2lkZSB0aGUgdGltZWxpbmVcbmZ1bmN0aW9uIHRpbWVsaW5lQ2xpY2tlZChzdGVwOiBTdGVwLCBlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG5cblxuICAgIGNvbnN0IGE6IG51bWJlciA9IGUub2Zmc2V0WDtcbiAgICBjb25zdCBiOiBudW1iZXIgPSBwcm9ncmVzc0NhY2hlLmdldChzdGVwKS5vZmZzZXRXaWR0aDtcbiAgICBpZiAoc3RlcCA9PSBjdXJyZW50U3RlcCgpKSB7XG4gICAgICAgIGdvdG9BdWRpbyhhIC8gYik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ290b1N0ZXAoc3RlcClcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gdGltZWxpbmVTZWVuKHN0ZXA6IFN0ZXAsIHNlZW46IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBkaXYgPSBwcm9ncmVzc0NhY2hlLmdldChzdGVwKTtcbiAgICBpZiAoZGl2ICE9IHVuZGVmaW5lZClcbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSBkaXYuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgICAgIGZpcnN0Q2hpbGQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdzZWVuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdENoaWxkID0gZGl2LmZpcnN0Q2hpbGQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICBmaXJzdENoaWxkLnN0eWxlLndpZHRoID0gXCIwJVwiO1xuICAgICAgICAgICAgZGl2LmNsYXNzTGlzdC5yZW1vdmUoJ3NlZW4nKTtcbiAgICAgICAgfVxufVxuXG4vL3VwZGF0ZSB0aGUgaHRtbCAoYm90aCBsZWZ0IHBhbmVsIGFuZCBwcm9ncmVzcyBiYXIpIGFmdGVyIGEgc3RlcCBoYXMgYmVlbiBwcm9jZXNzZWQgaW4gZWl0aGVyIGRpcmVjdGlvblxuZnVuY3Rpb24gbWFya1NlZW4oc3RlcDogU3RlcCwgZGlyZWN0aW9uOiAtMSB8IDEpOiB2b2lkIHtcbiAgICBsZXQgZGl2OiBIVE1MRWxlbWVudDtcblxuICAgIGlmIChzdGVwIGluc3RhbmNlb2YgT3ZlcmxheVN0ZXApXG4gICAgICAgIGRpdiA9IGRpdkNhY2hlLmdldChzdGVwLm92ZXJsYXlzWzBdKTtcbiAgICBpZiAoc3RlcCBpbnN0YW5jZW9mIFpvb21TdGVwICYmIHpvb21zSW4oc3RlcCkpXG4gICAgICAgIGRpdiA9IGRpdkNhY2hlLmdldChzdGVwLnRhcmdldClcblxuICAgIGNvbnN0IHRpbWVsaW5lRElWID0gcHJvZ3Jlc3NDYWNoZS5nZXQoc3RlcCk7XG4gICAgaWYgKGRpcmVjdGlvbiA9PSAxKSB7XG5cbiAgICAgICAgaWYgKGRpdiAhPSB1bmRlZmluZWQpIC8vZmluYWwgZXZlbnRzIGhhdmUgbm8gZGl2XG4gICAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZCgndHJlZS12aWV3LWl0ZW0tc2VlbicpO1xuXG4gICAgICAgIHRpbWVsaW5lU2VlbihzdGVwLCB0cnVlKTtcblxuXG4gICAgfSBlbHNlIHtcblxuICAgICAgICBpZiAoZGl2ICE9IHVuZGVmaW5lZCkgLy9maW5hbCBldmVudHMgaGF2ZSBubyBkaXZcbiAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QucmVtb3ZlKCd0cmVlLXZpZXctaXRlbS1zZWVuJyk7XG5cbiAgICAgICAgaWYgKHRpbWVsaW5lRElWICE9IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRpbWVsaW5lU2VlbihzdGVwLCBmYWxzZSk7XG4gICAgfVxufVxuXG4vL21hcmsgYW4gZXZlbnQgYXMgZGlzYWJsZWQgaW4gdGhlIHRyZWUgdmlld1xuZnVuY3Rpb24gbWFya0Rpc2FibGVkKG5vZGU6IFNsaWRlRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBkaXYgPSBkaXZDYWNoZS5nZXQobm9kZSk7XG4gICAgaWYgKGRpdiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZC1ldmVudFwiKTtcbiAgICAgICAgZGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJ0cmVlLXZpZXctaXRlbS1sb2FkaW5nXCIpO1xuICAgIH1cbn1cblxuXG4vL29wZW5zIG9yIGNsb3NlcyB0aGUgdHJlZSB2aWV3IGNvcnJlc3BvbmRpbmcgdG8gYSBjaGlsZCBldmVudFxuZnVuY3Rpb24gb3BlblBhbmVsVHJlZShldmVudDogU2xpZGVFdmVudCwgb3BlbjogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGljb24gPSBkaXZDYWNoZS5nZXQoZXZlbnQpLmNoaWxkTm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgICAgc3VidHJlZURpdkNhY2hlLmdldChldmVudCkuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGUtc3RhY2staGlkZGVuJyk7XG4gICAgICAgIGljb24uaW5uZXJIVE1MID0gJ2V4cGFuZF9tb3JlJztcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdWJ0cmVlRGl2Q2FjaGUuZ2V0KGV2ZW50KS5jbGFzc0xpc3QuYWRkKCdzbGlkZS1zdGFjay1oaWRkZW4nKTtcbiAgICAgICAgaWNvbi5pbm5lckhUTUwgPSAnY2hldnJvbl9yaWdodCc7XG4gICAgfVxufVxuXG4vL3VuZm9sZHMgdGhlIHRyZWUgaW4gdGhlIGxlZnQgcGFuZWwgZm9yIHRoaXMgZXZlbnQgYW5kIGl0cyBwYXJlbnRzXG5mdW5jdGlvbiBvcGVuUGFuZWxUcmVlUmVjKGV2ZW50OiBTbGlkZUV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50LnBhcmVudCA9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoZXZlbnQudHlwZSA9PSAnY2hpbGQnKSB7XG4gICAgICAgIG9wZW5QYW5lbFRyZWUoZXZlbnQsIHRydWUpO1xuICAgIH1cbiAgICBvcGVuUGFuZWxUcmVlUmVjKGV2ZW50LnBhcmVudCk7XG59XG5cblxuLy9yZW1vdmUgdGhlICdsb2FkaW5nJyBjbGFzcyBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1lbnRzIGluIHRoZSBzbGlkZSBwYW5lbFxuZnVuY3Rpb24gcmVtb3ZlTG9hZGluZyhub2RlOiBab29tRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZGl2Q2FjaGUuZ2V0KG5vZGUpICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBkaXZDYWNoZS5nZXQobm9kZSkuY2xhc3NMaXN0LnJlbW92ZShcInRyZWUtdmlldy1pdGVtLWxvYWRpbmdcIik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbilcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT0gJ3Nob3cnIHx8IGNoaWxkLnR5cGUgPT0gJ2hpZGUnKSB7XG4gICAgICAgICAgICBpZiAoZGl2Q2FjaGUuZ2V0KGNoaWxkKSAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZGl2Q2FjaGUuZ2V0KGNoaWxkKS5jbGFzc0xpc3QucmVtb3ZlKFwidHJlZS12aWV3LWl0ZW0tbG9hZGluZ1wiKTtcbiAgICAgICAgfVxufVxuXG5cbi8vaW5wdXRzIG51bWJlciBvZiBzZWNvbmRzIGFuZCBmb3JtYXRzIGl0IGluIG1tOnNzIGZvcm1hdFxuZnVuY3Rpb24gZm9ybWF0VGltZSh0aW1lOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRpbWUgLyA2MCk7XG4gICAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IodGltZSkgJSA2MDtcbiAgICBpZiAoc2Vjb25kcyA8IDEwKVxuICAgICAgICByZXR1cm4gbWludXRlcyArICc6MCcgKyBzZWNvbmRzXG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gbWludXRlcyArICc6JyArIHNlY29uZHM7XG59XG5cbi8vdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgcGVyaW9kaWNhbGx5IHdoZW4gdGhlIGF1ZGlvIGlzIHBsYXlpbmcsIGFuZCBpdCB1cGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2xpZGVyXG5mdW5jdGlvbiBhdWRpb1BsYXlpbmcoYXVkaW86IEhUTUxBdWRpb0VsZW1lbnQpOiB2b2lkIHtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGN1ckF1ZGlvID0gc3RlcEF1ZGlvKGN1cnJlbnRTdGVwKCkpO1xuICAgICAgICBpZiAoYXVkaW8gPT0gY3VyQXVkaW8pIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gYXVkaW8uY3VycmVudFRpbWU7XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGF1ZGlvLmR1cmF0aW9uO1xuICAgICAgICAgICAgY29uc3QgY3VyVGltZSA9IGN1cnJlbnRUaW1lICsgc291bmRzLmdldChjdXJyZW50U3RlcCgpKS5wcmV2aW91c0R1cmF0aW9uO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWUtZWxhcHNlZCcpLmlubmVySFRNTCA9IGZvcm1hdFRpbWUoY3VyVGltZSkgKyAnLycgKyBmb3JtYXRUaW1lKHRvdGFsU291bmREdXJhdGlvbik7XG4gICAgICAgICAgICAocHJvZ3Jlc3NDYWNoZS5nZXQoY3VycmVudFN0ZXAoKSkuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudCkuc3R5bGUud2lkdGggPSAoMTAwICogY3VycmVudFRpbWUgLyBkdXJhdGlvbikgKyAnJSdcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZygndHJpZWQgdG8gcGxheSBpbGxlZ2FsbHknKVxuICAgIH1cblxufVxuXG4vLyB0aGUgdGltZWxpbmUgdXNlcyB0d28ga2luZHMgb2YgZGlzcGxheSwgZGVwZW5kaW5nIG9uIHRoZSB3aGV0aGVyIHRoZSBzb3VuZCBpcyBwbGF5aW5nLCBvciBub3RcbmZ1bmN0aW9uIHVwZGF0ZVRpbWVsaW5lRGlzcGxheSgpOiB2b2lkIHtcbiAgICBpZiAoc291bmRTdGF0ZSA9PSBTb3VuZFN0YXRlLlBsYXkpIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2dyZXNzLXBhbmVsJykuY2xhc3NMaXN0LmFkZCgncGxheWluZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzcy1wYW5lbCcpLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXlpbmcnKTtcbiAgICB9XG59XG5cbi8vY2hvb3NlIHRoZSByaWdodCBidXR0b24gZm9yIHBsYXlpbmcgc291bmRcbmZ1bmN0aW9uIHNvdW5kSWNvbigpOiB2b2lkIHtcbiAgICBjb25zdCBwbGF5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5LWJ1dHRvblwiKTtcblxuICAgIGlmIChlbmRPZlNvdW5kKCkpXG4gICAgICAgIHBsYXlCdXR0b24uc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICBlbHNlXG4gICAgICAgIHBsYXlCdXR0b24uc3R5bGUub3BhY2l0eSA9ICcxJztcblxuICAgIGlmIChzb3VuZFN0YXRlICE9IFNvdW5kU3RhdGUuTm9uZSkge1xuICAgICAgICAvL3dlIG5lZWQgdG8gbWFrZSBzcGFjZSBmb3IgdGhlIHNvdW5kIGJ1dHRvbnMsIGluIGNhc2UgdGhpcyBpcyB0aGUgZmlyc3Qgc291bmQgdGhhdCBpcyBhZGRlZFxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2hhcy1zb3VuZCcpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoc291bmRTdGF0ZSkge1xuICAgICAgICBjYXNlIFNvdW5kU3RhdGUuUGxheTpcbiAgICAgICAgICAgIHBsYXlCdXR0b24uc3R5bGUuY29sb3IgPSAnYmxhY2snXG4gICAgICAgICAgICBwbGF5QnV0dG9uLmlubmVySFRNTCA9IFwicGF1c2VcIlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU291bmRTdGF0ZS5Ob25lOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBsYXlCdXR0b24uc3R5bGUuY29sb3IgPSAnYmxhY2snXG4gICAgICAgICAgICAgICAgY29uc3Qgc291bmQgPSBzb3VuZHMuZ2V0KGN1cnJlbnRTdGVwKCkpO1xuICAgICAgICAgICAgICAgIGlmIChzb3VuZCA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHBsYXlCdXR0b24uaW5uZXJIVE1MID0gXCJwbGF5X2Rpc2FibGVkXCI7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VuZC5hdWRpbyAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5QnV0dG9uLmlubmVySFRNTCA9IFwicGxheV9hcnJvd1wiXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlCdXR0b24uaW5uZXJIVE1MID0gJ2NhY2hlZCc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdGVwIG9mIGFsbFN0ZXBzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NDYWNoZS5nZXQoc3RlcCkuY2xhc3NMaXN0LnJlbW92ZSgncmVjb3JkaW5nJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIFNvdW5kU3RhdGUuUmVjb3JkaW5nOlxuICAgICAgICAgICAgcGxheUJ1dHRvbi5zdHlsZS5jb2xvciA9ICdibGFjaydcbiAgICAgICAgICAgIHBsYXlCdXR0b24uaW5uZXJIVE1MID0gXCJtaWNcIlxuICAgICAgICAgICAgcHJvZ3Jlc3NDYWNoZS5nZXQoY3VycmVudFN0ZXAoKSkuY2xhc3NMaXN0LmFkZCgncmVjb3JkaW5nJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTb3VuZFN0YXRlLkxpdmU6XG4gICAgICAgICAgICBwbGF5QnV0dG9uLnN0eWxlLmNvbG9yID0gJ3JlZCdcbiAgICAgICAgICAgIHBsYXlCdXR0b24uaW5uZXJIVE1MID0gXCJtaWNfbm9uZVwiXG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHVwZGF0ZVRpbWVsaW5lRGlzcGxheSgpO1xufVxuXG5cbi8vdG9nZ2xlcyB0aGUgc2lkZSBwYW5lbCBvbiB0aGUgbGVmdCB3aXRoIHRoZSBsaXN0IG9mIHNsaWRlc1xuZnVuY3Rpb24gc2hvd1BhbmVsKHZpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBsZWZ0UGFuZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGVmdC1wYW5lbCcpO1xuXG4gICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgZ3NhcC50byhsZWZ0UGFuZWwsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnMzAlJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjNcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc2F2ZWRQYW5lbFdpZHRoID0gIGxlZnRQYW5lbC5jbGllbnRXaWR0aDtcbiAgICAgICAgZ3NhcC50byhsZWZ0UGFuZWwsIHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IDAuM1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZVBhbmVsKCk6IHZvaWQge1xuXG4gICAgaWYgKChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGVmdC1wYW5lbCcpIGFzIEhUTUxEaXZFbGVtZW50KS5jbGllbnRXaWR0aCA+IDApXG4gICAgICAgIHNob3dQYW5lbChmYWxzZSlcbiAgICBlbHNlXG4gICAgICAgIHNob3dQYW5lbCh0cnVlKTtcbn1cblxubGV0IG1vc3RSZWNlbnRseVByZXNzZWQgPSB1bmRlZmluZWQgYXMgc3RyaW5nO1xuY29uc3QgdXNlckRlZmluZWRLZXlzOiB7IFtrZXk6IHN0cmluZ106ICgpID0+IHZvaWQgfSA9IHt9O1xuXG4vL3N3aXRjaCBhIHRhYiBpbiB0aGUgbGVmdCBwYW5lbC4gXG5mdW5jdGlvbiBzd2l0Y2hMZWZ0UGFuZWxUYWIodGFiOiBzdHJpbmcpIHtcblxuICAgIC8vIGFjdGl2YXRlIHRoZSBjdXJyZW50IHRhYiBoZWFkXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYi1oZWFkcycpLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKS5mb3JFYWNoKGNoaWxkID0+IGNoaWxkLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWIgKyAnLXRhYi1oZWFkJykuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cbiAgICAvLyBhY3RpdmF0ZSB0aGUgY3VycmVudCB0YWIgY29udGVudHNcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFiLWNvbnRlbnRzJykucXVlcnlTZWxlY3RvckFsbCgnKicpLmZvckVhY2goY2hpbGQgPT4gY2hpbGQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYiArICctdGFiJykuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cblxufVxuXG4vL2Rpc3BsYXkgdGhlIHBkZiBsaW5rcyBpZiB0aGUgZmlsZXMgZXhpc3RcbmFzeW5jIGZ1bmN0aW9uIHBkZkxpbmtzKCkge1xuICAgIGlmIChtYW5pZmVzdC5wZGZGaWxlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB0aGVMaW5rID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmstdG8tcGRmJyk7XG4gICAgICAgIHRoZUxpbmsuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgfVxuXG59XG5cbi8vYWRkIGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIGxlZnQgcGFuZWwuIFxuZnVuY3Rpb24gaW5pdExlZnRQYW5lbCgpOiB2b2lkIHtcblxuICAgIHBkZkxpbmtzKCk7XG4gICAgZnVuY3Rpb24gbGlzdFVzZXJEZWZpbmVkS2V5cygpIHtcbiAgICAgICAgbGV0IGxpc3QgPSAnJztcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3Qtb2Yta2V5LWJpbmRpbmdzJykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB1c2VyRGVmaW5lZEtleXMpIHtcbiAgICAgICAgICAgIGlmICh1c2VyRGVmaW5lZEtleXNba2V5XSA9PSBwcmV2QnV0dG9uKVxuICAgICAgICAgICAgICAgIGxpc3QgPSBsaXN0ICsga2V5ICsgJzogcHJldmlvdXMgc2xpZGUgPGJyPic7XG4gICAgICAgICAgICBpZiAodXNlckRlZmluZWRLZXlzW2tleV0gPT0gbmV4dEJ1dHRvbilcbiAgICAgICAgICAgICAgICBsaXN0ID0gbGlzdCArIGtleSArICc6IG5leHQgc2xpZGUgPGJyPic7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3Qtb2Yta2V5LWJpbmRpbmdzJykuaW5uZXJIVE1MID0gbGlzdDtcbiAgICB9XG5cbiAgICAvL3N3aXRjaCB0YWJzIGluIHRoZSBsZWZ0IHBhbmVsXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYi1oZWFkcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGlmICh0YXJnZXQuaWQuZW5kc1dpdGgoJ3RhYi1oZWFkJykpIHtcbiAgICAgICAgICAgIHN3aXRjaExlZnRQYW5lbFRhYih0YXJnZXQuaWQuc2xpY2UoMCwgLTkpKTtcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICAvL3NrZXRjaHBhZCBjaGVja2JveCBpbiB0aGUgcHJlc2VudGVyIHRhYlxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkcmF3aW5nLXRvb2xzLWNoZWNrYm94JykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZXZlbnQgPT4ge1xuICAgICAgICB0b2dnbGVTa2V0Y2hwYWQoKTtcbiAgICB9KTtcblxuICAgIC8vc2NhbnMgbW9zdCByZWNlbnRseSBwcmVzc2VkIGtleSB0byBkaXNwbGF5IGluIHRoZSBub24tc3RhbmRhcmQgbmV4dC9wcmV2aW91cyBrZXkgc2VsZWN0aW9uIGZyb20gcHJlc2VudGVyIHRhYlxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHNldE1vc3RSZWNlbnRseVByZXNzZWQpO1xuXG5cblxuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4nKSkge1xuXG4gICAgICAgIHN3aXRjaCAoYnV0dG9uLmlkKSB7XG4gICAgICAgICAgICBjYXNlICduZXctcHJldi1rZXknOlxuICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnRseVByZXNzZWQgIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRlZmluZWRLZXlzW21vc3RSZWNlbnRseVByZXNzZWRdID0gcHJldkJ1dHRvbjtcbiAgICAgICAgICAgICAgICAgICAgbGlzdFVzZXJEZWZpbmVkS2V5cygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICduZXctbmV4dC1rZXknOlxuICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9zdFJlY2VudGx5UHJlc3NlZCAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGVmaW5lZEtleXNbbW9zdFJlY2VudGx5UHJlc3NlZF0gPSBuZXh0QnV0dG9uO1xuICAgICAgICAgICAgICAgICAgICBsaXN0VXNlckRlZmluZWRLZXlzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BkZi1wcmludC1idXR0b24nOlxuICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0UGRmKClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGluay10by1wZGYnOlxuICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4obWFuaWZlc3QucGRmRmlsZSwgJ29wZW4nKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cblxuZnVuY3Rpb24gc2V0TW9zdFJlY2VudGx5UHJlc3NlZChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5rZXktYmluZGluZycpKVxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcblxuICAgIG1vc3RSZWNlbnRseVByZXNzZWQgPSBldmVudC5rZXlcbiAgICBmb3IgKGNvbnN0IHNwYW4gb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vc3QtcmVjZW50bHktcHJlc3NlZC1rZXknKSlcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBtb3N0UmVjZW50bHlQcmVzc2VkO1xufVxuXG4vL2luaXRpYWxpemUgdGhlIGxlZnQgcGFuZWwgYW5kIHRoZSB0aW1lbGluZSwgYWRkaW5nIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgYnV0dG9ucy4gVGhlIGFjdHVhbCBjb250ZW50IG9mIHRoZXNlIHdpbGwgYmUgYWRkZWQgbGF0ZXJcbmZ1bmN0aW9uIGluaXRQYW5lbHMoKTogdm9pZCB7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3ZnJykuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRvdWNoU3RhcnQpXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wZW4tbWVudScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlUGFuZWwpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmV2LWV2ZW50JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcmV2QnV0dG9uKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV4dC1ldmVudCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmV4dEJ1dHRvbik7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXktYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwbGF5QnV0dG9uKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291bmQtc3BlZWQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXG4gICAgICAgIHBsYXliYWNrUmF0ZUNoYW5nZSk7XG5cblxuICAgIGNyZWF0ZVRyZWVIVE1MKCk7XG4gICAgLy9jcmVhdGVzIHRoZSB0aW1lbGluZSBodG1sIGF0IHRoZSBib3R0b20gb2YgdGhlIHNjcmVlblxuICAgIHRpbWVsaW5lSFRNTCgpO1xuXG4gICAgaW5pdFNlYXJjaCgpO1xuXG4gICAgLy9pZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgc291bmQsIHRoZW4gd2UgZGlzcGxheSB0aGUgc291bmQgY29udHJvbHMgKHBsYXkgYnV0dG9uLCBhbmQgc3BlZWQgYnV0dG9uKVxuICAgIGlmIChPYmplY3Qua2V5cyhtYW5pZmVzdC5zb3VuZERpY3QpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdoYXMtc291bmQnKTtcbiAgICB9XG4gICAgc291bmRJY29uKCk7XG4gICAgaW5pdExlZnRQYW5lbCgpO1xuXG59XG5cblxuXG4vL2Rpc3BsYXlzIGEgcGFuZWwgZm9yIGEgc2hvcnQgdGltZVxuZnVuY3Rpb24gc2hvcnREaXNwbGF5KHBhbmVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGNvbnN0IHRsID0gZ3NhcC50aW1lbGluZSgpO1xuICAgIHBhbmVsLnN0eWxlLmRpc3BsYXkgPSAnaW5oZXJpdCc7XG4gICAgdGwudG8ocGFuZWwsIHtcbiAgICAgICAgb3BhY2l0eTogXCIxMDAlXCIsXG4gICAgICAgIGR1cmF0aW9uOiAwLjFcbiAgICB9KS50byhwYW5lbCwge1xuICAgICAgICBkdXJhdGlvbjogMlxuICAgIH0pLnRvKHBhbmVsLCB7XG4gICAgICAgIG9wYWNpdHk6IFwiMFwiLFxuICAgICAgICBkdXJhdGlvbjogMVxuICAgIH0pO1xuICAgIHRsLmV2ZW50Q2FsbGJhY2soXCJvbkNvbXBsZXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGFuZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9KTtcbn1cblxuLy8gLy9kaXNwbGF5cyB0aGUgaGVscFxuLy8gZnVuY3Rpb24gaGVscFBhbmVsKCkgOiB2b2lkIHtcbi8vICAgICBzaG9ydERpc3BsYXkoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWxwLXBhbmVsXCIpKTtcbi8vIH1cblxuLy9kaXNwbGF5cyBhbiBhbGVydCBmb3IgdGhlIHVzZXIgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuXG5mdW5jdGlvbiB1c2VyQWxlcnQodGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0LWFsZXJ0XCIpLmlubmVySFRNTCA9IHRleHQ7XG4gICAgc2hvcnREaXNwbGF5KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dC1hbGVydC1ib3hcIikpO1xufVxuXG4vL3VwZGF0ZSB0aGUgcGFnZSBudW1iZXIgaW4gdGhlIGNvcm5lciwgYW5kIHB1dCB0aGUgc3RlcCBudW1iZXIgaW4gdGhlIHVybFxuZnVuY3Rpb24gdXBkYXRlUGFnZU51bWJlcigpOiB2b2lkIHtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVVSTCgpIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gKG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpKS5zZWFyY2hQYXJhbXM7XG4gICAgICAgIGxldCBwYXJhbVN0cmluZyA9ICc/JztcbiAgICAgICAgZm9yIChjb25zdCBwYXJhbSBvZiBzZWFyY2hQYXJhbXMua2V5cygpKVxuICAgICAgICAgICAgaWYgKHBhcmFtICE9ICdzdGVwJylcbiAgICAgICAgICAgICAgICBwYXJhbVN0cmluZyArPSBgJHtwYXJhbX09JHtzZWFyY2hQYXJhbXMuZ2V0KHBhcmFtKX0mYFxuXG4gICAgICAgIGlmIChzZWFyY2hQYXJhbXMua2V5cygpKVxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sIG51bGwsIHBhcmFtU3RyaW5nICsgJ3N0ZXA9JyArIHRpbWVsaW5lLnBhc3QubGVuZ3RoLnRvU3RyaW5nKCkpO1xuXG4gICAgfVxuXG4gICAgdXBkYXRlVVJMKCk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhZ2UtY291bnQtZW51bWVyYXRvclwiKS5pbm5lckhUTUwgPSBjdXJyZW50U3RlcCgpLnBhZ2VOdW1iZXIudG9TdHJpbmcoKTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFnZS1jb3VudC1kZW5vbWluYXRvclwiKS5pbm5lckhUTUwgPSBcIiAvIFwiICtcbiAgICAgICAgdGltZWxpbmUubGFzdFN0ZXAucGFnZU51bWJlci50b1N0cmluZygpO1xuXG5cbiAgICAvLyB0aGUgXCJwcmV2aW91c1wiIGFycm93IHNob3VsZCBiZSBpbnZpc2libGUgYXQgdGhlIGZpcnN0IGV2ZW50IG9mIHRoZSBmaXJzdCBzbGlkZVxuICAgIC8vIGFuYWxvZ291c2x5IGZvciB0aGUgXCJuZXh0XCIgYXJyb3dcbiAgICBpZiAodGltZWxpbmUucGFzdC5sZW5ndGggPT0gMClcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmV2LWV2ZW50XCIpLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgIGVsc2VcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmV2LWV2ZW50XCIpLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcblxuICAgIGlmICh0aW1lbGluZS5mdXR1cmUubGVuZ3RoID09IDApXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV4dC1ldmVudFwiKS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICBlbHNlXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV4dC1ldmVudFwiKS5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG59XG5cblxuZnVuY3Rpb24gdG91Y2hTdGFydChldmVudDogVG91Y2hFdmVudCkge1xuICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCA9PSAxICYmIGN1cnJlbnRUb29sID09ICdub25lJykge1xuICAgICAgICAvL2lmIHRoZSB1c2VyIHNpbmdsZS10b3VjaGVzIG9uIHRoZSBsZWZ0IG9yIHJpZ2h0IHBhcnQgb2YgdGhlIHNsaWRlLCB3ZSBkbyBhIHByZXZpb3VzL25leHQgc2xpZGUgdHJhbnNpdGlvblxuICAgICAgICBjb25zdCByZWN0ID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdmcnKSBhcyBIVE1MRGl2RWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIC8vdGhpcyBpcyB0aGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIHRvdWNoIGluc2lkZSB0aGUgc2xpZGUgcGFuZWwsIHJhbmdpbmcgZnJvbSAwIHRvIDEuXG4gICAgICAgIGNvbnN0IGZyYWN0aW9uID0gKGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QueCkgLyByZWN0LndpZHRoO1xuICAgICAgICBpZiAoZnJhY3Rpb24gPiAwLjkpXG4gICAgICAgICAgICBuZXh0QnV0dG9uKCk7XG4gICAgICAgIGlmIChmcmFjdGlvbiA8IDAuMSlcbiAgICAgICAgICAgIHByZXZCdXR0b24oKTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPT0gMikge1xuICAgICAgICAvL2lmIHRoZSB1c2VyIGRvdWJsZS10b3VjaGVzLCB0aGVuIHdlIGRpc3BsYXkgdGhlIGRyYXdpbmcgcGFuZWxcbiAgICAgICAgdG9nZ2xlU2tldGNocGFkKCk7XG5cbiAgICB9XG59IiwiXG5leHBvcnQgeyBhZGRUb1F1ZXVlLCBzdmdNYXAsIGxvY2FsUmVjdCwgdHJhbnNmb3JtcyB9XG5pbXBvcnQgeyBpc092ZXJsYXksIHpvb21TbGlkZSB9IGZyb20gJy4vZXZlbnQnO1xuaW1wb3J0IHsgZmlsZU5hbWUgfSBmcm9tICcuL2ZpbGVzJztcbmltcG9ydCB7IG1hcmtEaXNhYmxlZCwgcmVtb3ZlTG9hZGluZywgdXNlckFsZXJ0IH0gZnJvbSAnLi9odG1sJztcbmltcG9ydCB7IGFsbFN0ZXBzLCBmdXR1cmVTbGlkZSwgT3ZlcmxheVN0ZXAgfSBmcm9tICcuL3RpbWVsaW5lJztcbmltcG9ydCB7IGFwcGx5VHJhbnNmb3JtLCBnZXRCb3VuZFJlY3QsIGdldFRyYW5zZm9ybSwgaWRUcmFuc2Zvcm0sIFRyYW5zZm9ybSwgdHJhbnNmb3JtVG9TdHJpbmcgfSBmcm9tICcuL3RyYW5zZm9ybSc7XG5pbXBvcnQge1xuICAgIFNsaWRlRXZlbnQsIFpvb21FdmVudFxufSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgdXBkYXRlUGFnZU51bWJlciB9IGZyb20gJy4vdmlld2VyJztcblxuXG5jb25zdCBsb2FkU3RydWN0ID0ge1xuICAgIC8vdGhlIHF1ZXVlIG9mIHNsaWRlcyB3YWl0aW5nIHRvIGJlIGxvYWRlZC4gV2UgYXNzdW1lIHRoYXQgZm9yIGVhY2ggc2xpZGUgeCBpbiB0aGUgcXVldWUsIGVpdGhlciB0aGUgcGFyZW50IG9mIHggaXMgaW4gdGhlIHF1ZXVlLCBvciBhbHJlYWR5IGxvYWRlZFxuICAgIHdhaXRpbmc6IG5ldyBTZXQoKSBhcyBTZXQ8Wm9vbUV2ZW50PixcbiAgICAvL3RoZSBxdWV1ZSBvZiBzbGlkZXMgdGhhdCBoYXZlIGFscmVhZHkgc3RhcnRlZCBkb3dubG9hZGluZyB0aGVpciBzdmdcbiAgICBsb2FkaW5nOiBuZXcgU2V0KCkgYXMgU2V0PFpvb21FdmVudD4sXG4gICAgLy90aGUgZnVuY3Rpb25zIHRvIGJlIGNhbGxlZCBvbmNlIG5vIG1vcmUgc2xpZGVzIGFyZSBpbiB0aGUgd2FpdGluZyBhbmQgbG9hZGluZyBxdWV1ZXNcbiAgICBvbmNlRW1wdHk6IFtdIGFzICgoKSA9PiB2b2lkKVtdLFxuICAgIC8vdGhlIGZ1bmN0aW9ucyB0byBiZSBjYWxsZWQgaWYgdGhlcmUgaXMgYW4gZXJyb3IgaW4gbG9hZGluZyB0aGUgc2xpZGVzXG4gICAgb25FcnJvcjogW10gYXMgKCgpID0+IHZvaWQpW11cblxufVxuXG5jb25zdCB0cmFuc2Zvcm1zOiBNYXA8U2xpZGVFdmVudCwgVHJhbnNmb3JtPiA9IG5ldyBNYXAoKTtcbmNvbnN0IHN2Z01hcDogTWFwPFNsaWRlRXZlbnQsIFNWR0VsZW1lbnQ+ID0gbmV3IE1hcCgpO1xuY29uc3Qgc3ZnZGVmczogTWFwPFNsaWRlRXZlbnQsIFNWR0RlZnNFbGVtZW50PiA9IG5ldyBNYXAoKTtcblxuY29uc3QgbG9jYWxSZWN0OiBNYXA8U2xpZGVFdmVudCwgUmVjdD4gPSBuZXcgTWFwKCk7XG5cbi8vYWRkIGFsbCBzbGlkZXMgb24gdGhlIGxpc3Qgb2YgbG9hZGluZyBxdWV1ZSwgaW5jbHVkaW5nIGFsbCBhbmNlc3RvcnMgb2YgdGhlc2Ugc2xpZGVzLiBBbHNvLCBhZGQgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHRoZSBsaXN0IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlIG9uY2UgdGhlIHF1ZXVlIGlzIGVtcHR5XG5mdW5jdGlvbiBhZGRUb1F1ZXVlKHNsaWRlczogU2xpZGVFdmVudFtdKTogUHJvbWlzZTx2b2lkPiB7XG5cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGxvYWRTdHJ1Y3Qub25jZUVtcHR5LnB1c2gocmVzb2x2ZSk7XG4gICAgICAgIGxvYWRTdHJ1Y3Qub25FcnJvci5wdXNoKHJlamVjdCk7XG4gICAgICAgIGZvciAoY29uc3Qgc2xpZGUgb2Ygc2xpZGVzKSB7XG4gICAgICAgICAgICBpZiAoc2xpZGUudHlwZSA9PSAnY2hpbGQnKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFuY2VzdG9yOiBTbGlkZUV2ZW50ID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGFuY2VzdG9yICE9IHVuZGVmaW5lZCAmJiBzdmdNYXAuZ2V0KGFuY2VzdG9yKSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2FkU3RydWN0LndhaXRpbmcuaGFzKGFuY2VzdG9yKSAmJiAhbG9hZFN0cnVjdC5sb2FkaW5nLmhhcyhhbmNlc3RvcikpXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkU3RydWN0LndhaXRpbmcuYWRkKHNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgIH0pXG5cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKCkge1xuICAgIGNvbnN0IG5ld1dhaXRpbmcgPSBuZXcgU2V0KCkgYXMgU2V0PFpvb21FdmVudD5cbiAgICBmb3IgKGNvbnN0IHNsaWRlIG9mIGxvYWRTdHJ1Y3Qud2FpdGluZykge1xuICAgICAgICAvL3dlIHN0YXJ0IGxvYWRpbmcgdGhvc2Ugc2xpZGVzIHdoaWNoIGFyZSBlaXRoZXIgdGhlIHJvb3QsIG9yIGhhdmUgYSBsb2FkZWQgcGFyZW50XG4gICAgICAgIGlmIChzbGlkZS5wYXJlbnQgPT0gdW5kZWZpbmVkIHx8IHN2Z01hcC5nZXQoc2xpZGUucGFyZW50KSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vcmVhZHkgdG8gbG9hZCBzdmdcbiAgICAgICAgICAgIGNvbnN0IG9iID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9iamVjdFwiKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBmaWxlTmFtZShzbGlkZS5pZCwgJ2ltYWdlLnN2ZycpO1xuICAgICAgICAgICAgb2Iuc2V0QXR0cmlidXRlKFwiZGF0YVwiLCBmaWxlKTtcbiAgICAgICAgICAgIG9iLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJpbWFnZS9zdmcreG1sXCIpO1xuICAgICAgICAgICAgb2IuY2xhc3NMaXN0LmFkZChcImhpZGRlbi1zdmdcIik7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG9iKTtcbiAgICAgICAgICAgIG9iLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsgZmluaXNoZWRMb2FkaW5nKHNsaWRlLCBvYik7IH1cbiAgICAgICAgICAgIGxvYWRTdHJ1Y3QubG9hZGluZy5hZGQoc2xpZGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy9vdGhlcndpc2UsIHRoaXMgbm9kZSB3aWxsIHN0aWxsIGJlIHdhaXRpbmdcbiAgICAgICAgICAgIG5ld1dhaXRpbmcuYWRkKHNsaWRlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsb2FkU3RydWN0LndhaXRpbmcgPSBuZXdXYWl0aW5nO1xuXG4gICAgLy9pZiBldmVyeXRoaW5nIGlzIGNvbXBsZXRlbHkgbG9hZGVkLCB0aGVuIHdlIHVzZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb25zXG4gICAgaWYgKGxvYWRTdHJ1Y3Qud2FpdGluZy5zaXplID09IDAgJiYgbG9hZFN0cnVjdC5sb2FkaW5nLnNpemUgPT0gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IGYgb2YgbG9hZFN0cnVjdC5vbmNlRW1wdHkpXG4gICAgICAgICAgICBmKCk7XG4gICAgICAgIGxvYWRTdHJ1Y3Qub25jZUVtcHR5ID0gW107XG4gICAgICAgIGxvYWRTdHJ1Y3Qub25FcnJvciA9IFtdO1xuICAgIH1cbn1cblxuLy93aWxsIGJlIGNhbGxlZCBpZiB0aGVyZSBpcyBhbnkgZXJyb3Igd2hpbGUgbG9hZGluZyBhbnkgc3ZnXG5mdW5jdGlvbiBxdWV1ZUVycm9yKCkge1xuICAgIGNvbnNvbGUubG9nKCdlcnJvcicpO1xuICAgIGZvciAoY29uc3QgZiBvZiBsb2FkU3RydWN0Lm9uRXJyb3IpXG4gICAgICAgIGYoKTtcbiAgICBsb2FkU3RydWN0Lm9uY2VFbXB0eSA9IFtdO1xuICAgIGxvYWRTdHJ1Y3Qub25FcnJvciA9IFtdO1xufVxuXG5cblxuLy9mdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCBvbmNlIHRoZSBzdmcgZm9yIGEgc2xpZGUgZmluaXNoZXMgbG9hZGluZy4gVGhlIGZ1bmN0aW9uIGV4dHJhY3RzIHRoZSBzdmcgZnJvbSB0aGUgbG9hZGVkIG9iamVjdCwgYXR0YWNoZXMgdGhlIHN2ZyB0byB0aGUgZXZlbnQgYW5kIGl0cyBvdmVybGF5cywgYW5kIHNldHMgdGhlIGluaXRpYWwgdmlzaWJpbGl0eSBvZiBvdmVybGF5cyBhY2NvcmRpbmdseS4gRmluYWxseSwgdGhlIHN2ZyBvZiB0aGUgc2xpZGUgaXMgYXR0YWNoZWQgdG8gdGhlIG1haW4gc3ZnLCB1c2luZyBhIHNlcGFyYXRlIGZ1bmN0aW9uLlxuZnVuY3Rpb24gZmluaXNoZWRMb2FkaW5nKHNsaWRlOiBab29tRXZlbnQsIG9iamVjdDogSFRNTE9iamVjdEVsZW1lbnQpIHtcblxuICAgIHRyeSB7XG5cbiAgICAgICAgLy8gV2UgZmlyc3QgZmluZCB0aGUgYXBwcm9wcmlhdGUgc3ZnIGVsZW1lbnQuIEluIHByaW5jaXBsZSwgdGhlIHJpZ2h0IGVsZW1lbnQgc2hvdWxkIGJlIHRoZSBmaXJzdCBjaGlsZCwgYnV0IE1hcmVrIFNva2/Fgm93c2tpIG1lbnRpb25lZCB0aGF0IGV4cHJlc3NWUE4gaW5zZXJ0cyBzb21lIHdyb25nIGNoaWxkcmVuLCBoZW5jZSB0aGUgZm9sbG93aW5nIGNvZGVcbiAgICAgICAgbGV0IHN2ZztcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBvYmplY3QuY29udGVudERvY3VtZW50LmZpcnN0RWxlbWVudENoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQubm9kZU5hbWUgPT0gJ2cnKSB7XG4gICAgICAgICAgICAgICAgc3ZnID0gY2hpbGQgYXMgU1ZHRWxlbWVudDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ZnID09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhcHBwcm9wcmlhdGUgc3ZnIGVsZW1lbnQgZm91bmQuXCIpO1xuXG4gICAgICAgIC8vIFdlIHRoZW4gZmluZCB0aGUgZGVmaW5pdGlvbnMsIHdoaWNoIGNvbnRhaW4gaW1hZ2VzIGFzIHBhdHRlcm5zXG4gICAgICAgIC8vIElmIGFuIGltYWdlIGlzIHVzZWQsIHRoZW4gaXRzIGlkIG5lZWRzIHRvIGJlIGNoYW5nZWQgKHRoZSByZWFzb24gZm9yIHRoaXMgaXMgZXhwbGFpbmVkIGluIHRoZSBjb21tZW50cyBmb3IgY2xlYW5EZWZzLCBzZWUgYmVsb3cpXG4gICAgICAgIGxldCBkZWZzO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG9iamVjdC5jb250ZW50RG9jdW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlTmFtZSA9PSAnZGVmcycpIHtcbiAgICAgICAgICAgICAgICBkZWZzID0gY2hpbGQgYXMgU1ZHRGVmc0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgc3ZnZGVmcy5zZXQoc2xpZGUsIGRlZnMpO1xuICAgICAgICAgICAgICAgIGNsZWFuRGVmcyhkZWZzLCBzbGlkZSk7IC8vIHRoaXMgZnVuY3Rpb24gaXMgYSBoYWNrLCBpdCByZW1vdmVzIGNsaXAgbWFza3MgZnJvbSB0aGUgZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vd2UgYWxzbyBjaGFuZ2UgdGhlIGNvZGUgb2Ygc29tZSByZWN0YW5nbGVzLCBzdWNoIGFzIHRob3NlIHdoaWNoIHN0b3JlIHBpY3R1cmVzLCBzZWUgY29tbWVudHMgZm9yIENsZWFuUmVjdCBiZWxvdy5cbiAgICAgICAgZm9yIChjb25zdCByIG9mIHN2Zy5xdWVyeVNlbGVjdG9yQWxsKCdyZWN0JykpXG4gICAgICAgICAgICBjbGVhblJlY3Qociwgc2xpZGUsIGRlZnMpO1xuXG5cblxuICAgICAgICAvLyB3ZSBhbHNvIG5lZWQgdG8gZml4IGEgYnVnIHJlbGF0ZWQgdG8gU1ZHIDxhIGhyZWY9Li4uPiBub2RlczpcbiAgICAgICAgLy8gdGhlIGV4cG9ydCBmdW5jdGlvbiBvZiBGaWdtYSB1bmZvcnR1bmF0ZWx5IGRldGFjaGVzIHRob3NlIG5vZGVzIFxuICAgICAgICAvLyBmcm9tIHRoZWlyIGNsaWNhYmxlIGNvbnRlbnQgKHVzdWFsbHkgYSA8Zz4gbm9kZSB0aGF0IGlzIHRoZSBsZWZ0IHNpYmxpbmcgb2YgdGhlIDxhPiBub2RlLi4uKVxuICAgICAgICAvLyBUbyBhdm9pZCBtZXNzaW5nIHdpdGggdGhlIGRvY3VtZW50IHN0cnVjdHVyZSwgd2Ugc2ltcGx5IHJlcG9zaXRpb24gdGhlIGNvbnRlbnQgb2YgdGhlIDxhPiBub2RlXG4gICAgICAgIC8vIGZvbGxvd2luZyB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBjb3JyZXNwb25kaW5nIDxnPiBub2RlXG4gICAgICAgIGZvciAoY29uc3QgYSBvZiBzdmcucXVlcnlTZWxlY3RvckFsbCgnYScpKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBhLmZpcnN0RWxlbWVudENoaWxkIGFzIFNWR0dyYXBoaWNzRWxlbWVudDtcbiAgICAgICAgICAgIGxldCBwcmV2X3NpYmxpbmcgPSBhLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgYXMgU1ZHR3JhcGhpY3NFbGVtZW50O1xuICAgICAgICAgICAgaWYgKChwcmV2X3NpYmxpbmcgIT0gbnVsbCkgJiYgKGNoaWxkICE9IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJib3ggPSBwcmV2X3NpYmxpbmcuZ2V0QkJveCgpIGFzIFNWR1JlY3Q7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGJib3gueCB8fCAwIGFzIE51bWJlcjtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gYmJveC55IHx8IDAgYXMgTnVtYmVyO1xuICAgICAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZSgneCcsIHgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKCd5JywgeS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlIGNvbnRpbnVlIGJ5IGF0dGFjaGluZyB0aGUgc3ZnIHRvIHRoZSBzbGlkZVxuICAgICAgICBzdmdNYXAuc2V0KHNsaWRlLCBzdmcpO1xuICAgICAgICBjb25zdCBzdmdDaGlsZHJlbiA9IHN2Zy5jaGlsZHJlbiBhcyB1bmtub3duIGFzIFNWR0VsZW1lbnRbXTtcblxuICAgICAgICAvL2luIHRoZSBmb2xsb3dpbmcgY29kZSwgSSBsb29wIHNldmVyYWwgdGltZXMgb3ZlciBzdmdDaGlsZHJlbiwgd2hpY2ggaXMgc3ViLW9wdGltYWwgYnV0IG1ha2VzIHRoZSBjb2RlIG1vcmUgcmVhZGFibGUuXG5cbiAgICAgICAgLy9hdHRhY2ggZWFjaCBvdmVybGF5IGV2ZW50IHRvIGl0cyBjb3JyZXNwb25kaW5nIHN2ZyBlbGVtZW50IChmb3IgY2hpbGQgZXZlbnRzIHdlIHRoZSBzdmcgZWxlbWVudCBpcyB0aGUgc2xpZGUgaXRzZWxmLCBzbyB0aGUgcGxhY2Vob2xkZXIgd2lsbCBiZSByZWNvbXB1dGVkKVxuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHNsaWRlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoaXNPdmVybGF5KGV2ZW50KSlcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHN2Z0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5pZCA9PSBldmVudC5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ZnTWFwLnNldChldmVudCwgY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9oaWRlIG9iamVjdHMgdGhhdCBhcmUgIGEgcGxhY2Vob2xkZXIgcmVjdGFuZ2xlXG4gICAgICAgIGZvciAoY29uc3Qgc3ZnQ2hpbGQgb2Ygc3ZnQ2hpbGRyZW4pXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHNsaWRlLmNoaWxkcmVuKVxuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09ICdjaGlsZCcgJiYgZXZlbnQuaWQgPT0gc3ZnQ2hpbGQuaWQpXG4gICAgICAgICAgICAgICAgICAgIHN2Z0NoaWxkLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG5cblxuXG4gICAgICAgIC8vc2V0IGluaXRpYWwgdmlzaWJpbGl0eSBvZiBvdmVybGF5cywgd2hpY2ggaXMgZG9uZSBkaWZmZXJlbnRseSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgc2xpZGUgaXMgaW4gdGhlIHBhc3Qgb3IgaW4gdGhlIGZ1dHVyZVxuICAgICAgICBpZiAoIWZ1dHVyZVNsaWRlKHNsaWRlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzdGVwIG9mIGFsbFN0ZXBzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCBpbnN0YW5jZW9mIE92ZXJsYXlTdGVwICYmXG4gICAgICAgICAgICAgICAgICAgIHN0ZXAuZXZlbnQoKS5wYXJlbnQgPT0gc2xpZGUpXG4gICAgICAgICAgICAgICAgICAgIHN0ZXAucnVuKCdzaWxlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3RlcCBvZiBhbGxTdGVwcygpLnJldmVyc2UoKSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGVwIGluc3RhbmNlb2YgT3ZlcmxheVN0ZXAgJiZcbiAgICAgICAgICAgICAgICAgICAgc3RlcC5ldmVudCgpLnBhcmVudCA9PSBzbGlkZSlcbiAgICAgICAgICAgICAgICAgICAgc3RlcC5yZXZlcnNlKCkucnVuKCdzaWxlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy9yZW1vdmUgdGhlIGxvYWRpbmcgc3R5bGUgKHJlZCkgZnJvbSB0aGUgdHJlZSB2aWV3XG4gICAgICAgIHJlbW92ZUxvYWRpbmcoc2xpZGUpO1xuICAgICAgICBhdHRhY2hTVkcoc2xpZGUpO1xuXG4gICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgIHF1ZXVlRXJyb3IoKTtcbiAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHRoZSBzdmcgZmFpbGVkIHRvIGxvYWQgY29ycmVjdGx5XG4gICAgICAgIG1hcmtEaXNhYmxlZChzbGlkZSk7XG4gICAgICAgIHVzZXJBbGVydChcIkZhaWxlZCB0byBsb2FkIHN2ZyBmb3IgXCIgKyBzbGlkZS5uYW1lKTtcbiAgICAgICAgY29uc29sZS5sb2coZXhjZXB0aW9uKTtcbiAgICB9XG5cbiAgICAvL3JlbW92ZSB0aGUgc2xpZGUgZnJvbSB0aGUgbG9hZGluZyBxdWV1ZVxuICAgIGxvYWRTdHJ1Y3QubG9hZGluZy5kZWxldGUoc2xpZGUpO1xuICAgIHByb2Nlc3NRdWV1ZSgpO1xuXG5cbn1cblxuXG5cbi8vZWFjaCBzbGlkZSBoYXMgaXRzIGRlZmluaXRpb25zLCBidXQgdGhleSB1c2UgdGhlIHNhbWUgaWQncywgZS5nLiAnaW1hZ2UwJyBpcyB1c2VkIGluIGV2ZXJ5IHNsaWRlIHRoYXQgaGFzIGFuIGltYWdlLiBBcyBhIHJlc3VsdCBhbGwgaW1hZ2VzIHdvdWxkIHBvaW50IHRvIHRoZSBsYXN0IG9jY3VycmVuY2Ugb2YgaW1hZ2UwIGluIHRoZSBkb2N1bWVudC4gUHJvYmFibHkgdGhlcmUgaXMgYSBuYW1lc3BhY2Ugd2F5IHRvIGZpeCB0aGlzLCBidXQgc2luY2UgSSBkbyBub3QgdW5kZXJzdGFuZCBuYW1lc3BhY2VzLCBJIHNpbXBseSBwcmVwZW5kIHRoZSBzbGlkZSBpZCB0byBldmVyeSBpZCBpbiB0aGUgZGVmaW5pdGlvbnMuIFxuZnVuY3Rpb24gY2xlYW5EZWZzKHN2ZzogU1ZHRWxlbWVudCwgc2xpZGU6IFpvb21FdmVudCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgYyBvZiBzdmcuY2hpbGROb2Rlcykge1xuICAgICAgICBsZXQgY2hpbGQgPSBjIGFzIFNWR0VsZW1lbnQ7XG4gICAgICAgIGNoaWxkLmlkID0gc2xpZGUuaWQgKyBjaGlsZC5pZDtcblxuICAgICAgICAvL3RoZSBmb2xsb3dpbmcgdHdvIGxpbmVzIG1pZ2h0IG5vdCBtYWtlIHNlbnNlIGFueSBtb3JlLCBJIGZvcmdvdCB3aHkgdGhleSB3ZXJlIG5lZWRlZFxuICAgICAgICBpZiAoY2hpbGQubm9kZU5hbWUgPT0gJ2NsaXBQYXRoJylcbiAgICAgICAgICAgIGNoaWxkLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vQXMgZmFyIGFzIEkga25vdywgdGhlIGlkJ3MgaW4gdGhlIGRlZnMgYXJlIHJlZmVyZW5jZXMgaW4gdHdvIHBsYWNlczogaW5zaWRlIHRoZSBkZWZzIGluIGEgJ3VzZScgdGFnLCB3aGljaCBpcyBmaXhlZCBiZWxvdywgYW5kIGluc2lkZSByZWN0cyBpbiB0aGUgc2xpZGUgaXRzZWxmLCB3aGljaCBpcyB0cmVhdGVkIGVhcmxpZXIuIFxuICAgICAgICBpZiAoY2hpbGQubm9kZU5hbWUgPT0gJ3BhdHRlcm4nKSB7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgdXNlIG9mIGNoaWxkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd1c2UnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZExpbmsgPSB1c2UuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TGluayA9ICcjJyArIHNsaWRlLmlkICsgb2xkTGluay5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB1c2Uuc2V0QXR0cmlidXRlKCd4bGluazpocmVmJywgbmV3TGluayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgfVxufVxuXG5cblxuLy9UaGlzIGNvZGUgbG9va3MgYXQgcmVjdGFuZ2xlcyB0aGF0IHN0b3JlIHBpY3R1cmVzLCBvciBoYXZlIHBhdHRlcm5zLCBhbmQgbW9kaWZpZXMgdGhlaXIgY29kZSBzbyB0aGF0IGl0IGRpc3BsYXlzIGNvcnJlY3RseS4gVGhlc2UgYXJlIGhhY2tzIHRoYXQgYXJlIHVzZWQgdG8gb3ZlcmNvbWUgaW5jb21wYXRpYmlsaXRpZXMgYmV0d2VlbiBGaWdtYSdzIGV4cG9ydCBhbmQgdGhlIHdheSB0aGF0IGJyb3dzZXJzIGRpc3BsYXkgaW1hZ2VzIGluc2lkZSBzdmcncy5cblxuZnVuY3Rpb24gY2xlYW5SZWN0KHI6IFNWR1JlY3RFbGVtZW50LCBzbGlkZTogWm9vbUV2ZW50LCBkZWZzOiBTVkdEZWZzRWxlbWVudCkge1xuXG5cbiAgICAvLyBXZSByZXBsYWNlIGV2ZXJ5IHJlY3QgZmlsbGVkIHdpdGggYW4gaW1hZ2UgcGF0dGVybiBieSB0aGUgb3JpZ2luYWwgaW1hZ2UgZGVmaW5pdGlvblxuICAgIC8vIEJlc2lkZXMgc2ltcGxpZnlpbmcgdGhlIGRvY3VtZW50IHN0cnVjdHVyZSwgdGhpcyBlbmFibGVzIGFuaW1hdGVkIGltYWdlcyBcbiAgICAvLyAoZS5nLiBbQV1QTkcpIG9uIGFsbCBicm93c2Vycywgbm90IGp1c3QgRmlyZWZveCFcbiAgICAvLyBUaGlzIHBpZWNlIG9mIGNvZGUgYmFzaWNhbGx5IG92ZXJjb21lcyBhIHByb2JsZW0gd2l0aCBhbmltYXRpb25zIGVtYmVkZGVkIGluIHN2ZyBwYXR0ZXJucyxcbiAgICAvLyB3aGljaCBhcmUgY3VycmVudGx5IHBvb3JseSBzdXBwb3J0ZWQgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gICAgLy9pZiB0aGUgcmVjdGFuZ2xlIGhhcyBhIGZpbGwgd2l0aCBhbiB1cmwsIHRoZW4gdGhpcyBuZWVkcyB0byBiZSBwcmVwZW5kZWQgd2l0aCB0aGUgc2xpZGUgaWRcbiAgICBsZXQgZmlsbCA9IHIuZ2V0QXR0cmlidXRlKCdmaWxsJyk7IC8vIHNob3VsZCBzdGFydCB3aXRoIFwidXJsKCNwYXR0ZXJuLi4uXCJcbiAgICBpZiAoKGZpbGwgIT0gbnVsbCkgJiYgKGZpbGwuc3RhcnRzV2l0aCgndXJsKCMnKSkpIHtcbiAgICAgICAgZmlsbCA9ICd1cmwoIycgKyBzbGlkZS5pZCArIGZpbGwuc2xpY2UoNSk7XG4gICAgICAgIHIuc2V0QXR0cmlidXRlKCdmaWxsJywgZmlsbCk7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgZmlsbCA9IG51bGw7XG4gICAgLy9maW5kIHBhdHRlcm4gYW5kIGNvcnJlc3BvbmRpbmcgdXNlIGFuZCBpbWFnZSByZWZlcmVuY2VkIGJ5IHJlY3RhbmdsZSBmaWxsIHVybCBcbiAgICBsZXQgcGF0dGVybjogU1ZHUGF0dGVybkVsZW1lbnQ7XG4gICAgaWYgKChkZWZzICE9IG51bGwpICYmIChmaWxsICE9IG51bGwpKSB7XG4gICAgICAgIGxldCBwYXR0ZXJuSWQgPSBmaWxsLnNsaWNlKDUpLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgZm9yIChjb25zdCBwIG9mIGRlZnMuY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgaWYgKHAubm9kZU5hbWUgPT0gJ3BhdHRlcm4nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0ID0gcCBhcyBTVkdQYXR0ZXJuRWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAocGF0LmlkID09IHBhdHRlcm5JZClcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IHBhdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocGF0dGVybiAhPSBudWxsKSB7XG4gICAgICAgIGZvciAoY29uc3QgdSBvZiBwYXR0ZXJuLmNoaWxkTm9kZXMpIHtcbiAgICAgICAgICAgIGlmICh1Lm5vZGVOYW1lID09ICd1c2UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlID0gdSBhcyBTVkdVc2VFbGVtZW50O1xuICAgICAgICAgICAgICAgIGxldCB4bGluayA9IHVzZS5nZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnKTsgLy8gc2hvdWxkIHN0YXJ0IHdpdGggXCIjPHNsaWRlSWQ+aW1hZ2UuLi5cbiAgICAgICAgICAgICAgICBsZXQgaW1hZ2U7XG4gICAgICAgICAgICAgICAgaWYgKHhsaW5rICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGRlZnMuY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkubm9kZU5hbWUgPT0gJ2ltYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZyA9IGkgYXMgU1ZHSW1hZ2VFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWcuaWQgPT0geGxpbmsuc2xpY2UoMSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlID0gaW1nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbWFnZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdywgdGhlIHJlbGV2YW50IG9iamVjdHMgYXJlIG5lc3RlZCBhcyBmb2xsb3dzOlxuICAgICAgICAgICAgICAgICAgICAvLyAgICA8cmVjdCBpZD1cIi4uLlwiIHg9XCIuLi5cIiB5PVwiLi4uXCIgLi4uPlxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCIuLi5cIiB0cmFuc2Zvcm09XCIuLi5cIiAuLi4+XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgIDxpbWFnZSBpZD1cIi4uLlwiIHdpZHRoPVwiLi4uXCIgaGVpZ2h0PVwiLi4uXCIgLi4uPlxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlcGxhY2UgPHJlY3Q+IGJ5IDxnPiwgYnV0IGZvciB0aGlzIHdlIG5lZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdHVybiB4LHksd2lkdGgsaGVpZ2h0IGF0dHJpYnV0ZXMgaW50byBhIHRyYW5zZm9ybSBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3RHID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgJ2cnKSBhcyBTVkdHRWxlbWVudDtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWdXID0gcGFyc2VGbG9hdChpbWFnZS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykgfHwgJzEnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nSCA9IHBhcnNlRmxvYXQoaW1hZ2UuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSB8fCAnMScpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3ID0gcGFyc2VGbG9hdChyLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSB8fCAnMScpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoID0gcGFyc2VGbG9hdChyLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykgfHwgJzEnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxlWCA9IHcgLyBpbWdXO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGVZID0gaCAvIGltZ0g7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1NYXRyaXg6IG51bWJlcltdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vaW4gdGhlIGV4YW1wbGVzIHRoYXQgSSBoYXZlLCBlaXRoZXIgdGhlcmUgYXJlIHggYW5kIHkgYXR0cmlidXRlcywgb3Igb3RoZXJ3aXNlIChpbiAgY2FzZSBvZiBhIHJlZmxlY3Rpb24pLCB0aGVyZSBpcyBhIHRyYW5zZm9ybSB0aGF0IGhpZGVzIHRoZW0gXG4gICAgICAgICAgICAgICAgICAgIGlmIChyLmhhc0F0dHJpYnV0ZSgneCcpICYmIChyLmhhc0F0dHJpYnV0ZSgneScpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IHBhcnNlRmxvYXQoci5nZXRBdHRyaWJ1dGUoJ3gnKSB8fCAnMCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IHBhcnNlRmxvYXQoci5nZXRBdHRyaWJ1dGUoJ3knKSB8fCAnMCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtTWF0cml4ID0gW3NjYWxlWCwgMCwgMCwgc2NhbGVZLCB4LCB5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyLmhhc0F0dHJpYnV0ZSgndHJhbnNmb3JtJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaW4gdGhlIGV4YW1wbGVzIHRoYXQgSSBoYXZlLCB0aGUgdmFsdWUgb2YgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgd2lsbCBiZSBzb21ldGhpbmcgbGlrZSBtYXRyaXgoLTEgMCAwIDEgNzU3IDQxKSwgd2hlcmUgLTEgaW5kaWNhdGVzIGhvcml6b250YWwgcmVmbGVjdGlvbiwgMSBpbmRpY2F0ZXMgdmVydGljYWwgbm9uLXJlZmxlY3Rpb24sIGFuZCB4PTc1NyBhbmQgIHk9NDFcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcG9zZU1hdHJpY2VzKG0xIDogbnVtYmVyW10sIG0yIDogbnVtYmVyW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0yWzBdICogbTFbMF0gKyBtMlsyXSAqIG0xWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0yWzFdICogbTFbMF0gKyBtMlszXSAqIG0xWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0yWzBdICogbTFbMl0gKyBtMlsyXSAqIG0xWzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0yWzFdICogbTFbMl0gKyBtMlszXSAqIG0xWzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0yWzBdICogbTFbNF0gKyBtMlsyXSAqIG0xWzVdICsgbTJbNF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbTJbMV0gKiBtMVs0XSArIG0yWzNdICogbTFbNV0gKyBtMls1XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RNYXRyaXggPSBbc2NhbGVYLCAwLCAwLCBzY2FsZVksIDAgLDBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Vjb25kTWF0cml4ID0gci5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpLnNsaWNlKDcsIC0xKS5zcGxpdCgnICcpLm1hcChwYXJzZUZsb2F0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IGNvbXBvc2VNYXRyaWNlcyhmaXJzdE1hdHJpeCxzZWNvbmRNYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgKCd1bmtub3duIHR5cGUgb2YgcmVjdCB3aXRoIGltYWdlJylcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1NYXRyaXhTdHJpbmcgPSB0cmFuc2Zvcm1NYXRyaXgubWFwKFN0cmluZykuam9pbignICcpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0cmFuc2Zvcm1NYXRyaXhTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICByZWN0Ry5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICdtYXRyaXgoJyArIHRyYW5zZm9ybU1hdHJpeFN0cmluZyArICcpJyk7XG5cblxuICAgICAgICAgICAgICAgICAgICByZWN0Ry5pZCA9IHIuaWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGltYWdlQ2xvbmUgPSBpbWFnZS5jbG9uZU5vZGUodHJ1ZSkgYXMgU1ZHSW1hZ2VFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50ID0gci5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHJlY3RHLCByKTtcbiAgICAgICAgICAgICAgICAgICAgcmVjdEcuYXBwZW5kQ2hpbGQoaW1hZ2VDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChyKTtcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcCBsb29raW5nIGZvciB1c2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuLy9hdHRhY2hlcyB0aGUgc3ZnIGZvciBhIG5vZGUgdG8gdGhlIG1haW4gc3ZnIG9mIHRoZSBwcmVzZW50YXRpb24uIFRoZSBub2RlJ3Mgc3ZnIGlzIGF0dGFjaGVkIGFzIGEgZGlyZWN0IGNoaWxkIG9mIHRoZSBtYWluIHN2ZyAobm90IGFzIGEgZGVzY2VuZGFudCBpbiB0aGUgdHJlZSBzdHJ1Y3R1cmUpLCB3aXRoIGEgc3VpdGFibHkgY29tcHV0ZWQgdHJhbnNmb3JtYXRpb24uXG5mdW5jdGlvbiBhdHRhY2hTVkcobm9kZTogU2xpZGVFdmVudCkge1xuXG4gICAgY29uc3Qgc3ZnID0gc3ZnTWFwLmdldChub2RlKTtcbiAgICBsb2NhbFJlY3Quc2V0KG5vZGUsIGdldEJvdW5kUmVjdChzdmcpKTtcbiAgICAvL2NvbXB1dGUgdGhlIHRyYW5zZm9ybWF0aW9uIHdpdGggcmVzcGVjdCB0byB0aGUgbG9jYWwgY29vcmRpbmF0ZXMgb2YgdGhlIHBhcmVudFxuICAgIGlmIChub2RlLnBhcmVudCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJhbnNmb3Jtcy5zZXQobm9kZSwgaWRUcmFuc2Zvcm0oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBsYWNlaG9sZGVyOiBSZWN0O1xuICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc3ZnTWFwLmdldChub2RlLnBhcmVudCkuY2hpbGRyZW4pXG4gICAgICAgICAgICBpZiAocy5pZCA9PSBub2RlLmlkKSB7XG5cblxuXG4gICAgICAgICAgICAgICAgLy9zIGlzIHRoZSBjaGlsZCBsaW5rLiBUaGlzIGNvdWxkIGJlIGEgZ3JvdXAsIG9yIGEgcmVjdGFuZ2xlLiBXZSBmaW5kIHRoZSBkaW1lbnNpb25zIGJ5IHNlYXJjaGluZyBmb3IgYSByZWN0YW5nbGUsIHdoaWNoIGNvdWxkIGJlIHMgb3Igb25lIG9mIGl0cyBjaGlsZHJlbiAodGhlIGxhdHRlciBoYXBwZW5zIHdoZW4gcyBpcyBhIGdyb3VwIHRoYXQgY29udGFpbnMgb3RoZXIgc3R1ZmYpLlxuICAgICAgICAgICAgICAgIGxldCByZWN0OiBTVkdSZWN0RWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAocy5ub2RlTmFtZSA9PSAncmVjdCcpXG4gICAgICAgICAgICAgICAgICAgIHJlY3QgPSAocyBhcyB1bmtub3duKSBhcyBTVkdSZWN0RWxlbWVudDtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9xdWVyeVNlbGVjdG9yQWxsIGRvZXMgbm90IGNvdW50IHRoZSByb290IGVsZW1lbnQsIHNvIHRoZSBhYm92ZSBicmFuY2gsIHdoZW4gcyBpcyAncmVjdCcsIGlzIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZVJlY3RzID0gcy5xdWVyeVNlbGVjdG9yQWxsKCdyZWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NzaWJsZVJlY3RzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgKCdmb3VuZCBubyByZWN0YW5nbGVzJylcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdCA9IHBvc3NpYmxlUmVjdHNbMF07XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogKHJlY3QueCBhcyBTVkdBbmltYXRlZExlbmd0aCkuYmFzZVZhbC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgeTogKHJlY3QueSBhcyBTVkdBbmltYXRlZExlbmd0aCkuYmFzZVZhbC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IChyZWN0LndpZHRoIGFzIFNWR0FuaW1hdGVkTGVuZ3RoKS5iYXNlVmFsLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IChyZWN0LmhlaWdodCBhcyBTVkdBbmltYXRlZExlbmd0aCkuYmFzZVZhbC52YWx1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gYXBwbHlUcmFuc2Zvcm0odHJhbnNmb3Jtcy5nZXQobm9kZS5wYXJlbnQpLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGdldFRyYW5zZm9ybShsb2NhbFJlY3QuZ2V0KG5vZGUpLCB0YXJnZXQpO1xuICAgICAgICB0cmFuc2Zvcm1zLnNldChub2RlLCB0cmFuc2Zvcm0pO1xuICAgIH1cbiAgICBzdmcuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybVRvU3RyaW5nKHRyYW5zZm9ybXMuZ2V0KG5vZGUpKSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdmdcIikuYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgICBpZiAoc3ZnZGVmcy5nZXQobm9kZSkgIT0gdW5kZWZpbmVkKVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN2Z1wiKS5hcHBlbmRDaGlsZChzdmdkZWZzLmdldChub2RlKSk7XG5cbiAgICAvL2FmdGVyIGxvYWRpbmcgdGhlIHJvb3Qgb2YgdGhlIGV2ZW50IHRyZWUsIHdlIHpvb20gdG8gdGhlIHJpZ2h0IHBsYWNlIGltbWVkaWF0ZWx5LCB3aXRob3V0IGFuaW1hdGlvblxuICAgIGlmIChub2RlLnBhcmVudCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgem9vbVNsaWRlKG5vZGUsICdzaWxlbnQnKTtcbiAgICAgICAgdXBkYXRlUGFnZU51bWJlcigpXG4gICAgfVxuXG59XG4iLCJleHBvcnQge1xuICAgIGluaXRTZWFyY2hcbn1cblxuXG5cblxuXG5pbXBvcnQgRnVzZSBmcm9tICdmdXNlLmpzJ1xuaW1wb3J0IHsgZ290b0V2ZW50IH0gZnJvbSAnLi90aW1lbGluZSdcbmltcG9ydCB7IFNsaWRlRXZlbnQgfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgbWFuaWZlc3QgfSBmcm9tICcuL3ZpZXdlcidcblxuXG50eXBlIFNlYXJjaEtleXdvcmQgPSB7XG4gICAgc2xpZGU6IFNsaWRlRXZlbnQsXG4gICAgdGV4dDogc3RyaW5nXG59XG5sZXQgc2VhcmNoOiBGdXNlPFNlYXJjaEtleXdvcmQ+XG5cbmZ1bmN0aW9uIGluaXRTZWFyY2goKTogdm9pZCB7XG5cblxuICAgIGNvbnN0IGFsbFN0cmluZ3M6IFNlYXJjaEtleXdvcmRbXSA9IFtdO1xuXG4gICAgZnVuY3Rpb24gYWRkU3RyaW5ncyhzbGlkZTogU2xpZGVFdmVudCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleXdvcmQgb2Ygc2xpZGUua2V5d29yZHMpXG4gICAgICAgICAgICBhbGxTdHJpbmdzLnB1c2goeyBzbGlkZTogc2xpZGUsIHRleHQ6IGtleXdvcmQgfSk7XG4gICAgICAgIGlmIChzbGlkZS50eXBlID09ICdjaGlsZCcpXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHNsaWRlLmNoaWxkcmVuKVxuICAgICAgICAgICAgICAgIGFkZFN0cmluZ3MoY2hpbGQpO1xuICAgIH1cbiAgICBhZGRTdHJpbmdzKG1hbmlmZXN0LnRyZWUpO1xuXG4gICAgc2VhcmNoID0gbmV3IEZ1c2UoYWxsU3RyaW5ncywgeyBrZXlzOiBbJ3RleHQnXSB9KTtcblxuICAgIGNvbnN0IHNlYXJjaEJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtaW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHNlYXJjaEJveC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHNlYXJjaFR5cGUpO1xuICAgIHNlYXJjaEJveC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsXG4gICAgICAgIGUgPT4geyBpZiAoZS5rZXkgPT0gJ0VzY2FwZScpIHsgc2VhcmNoQm94LnZhbHVlID0gJyc7IHNlYXJjaFR5cGUoKSB9IH0pXG5cbn1cblxuZnVuY3Rpb24gc2VhcmNoVHlwZSgpOiB2b2lkIHtcbiAgICBjb25zdCBzZWFyY2hCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLWlucHV0JykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCB3b3JkID0gc2VhcmNoQm94LnZhbHVlO1xuICAgIGNvbnN0IGFsbFJlc3VsdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLXJlc3VsdHMnKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuXG4gICAgYWxsUmVzdWx0cy5pbm5lckhUTUwgPSAnJztcbiAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiBzZWFyY2guc2VhcmNoKHdvcmQpKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gcmVzdWx0Lml0ZW0uc2xpZGU7XG4gICAgICAgIGxldCBuYW1lOiBzdHJpbmc7XG5cblxuICAgICAgICAvL3dlIGRpc3BsYXkgdGhlIG5hbWUgb2YgdGhlIGNvbnRhaW5pbmcgc2xpZGVcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gJ2NoaWxkJylcbiAgICAgICAgICAgIG5hbWUgPSBldmVudC5uYW1lO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBuYW1lID0gZXZlbnQucGFyZW50Lm5hbWU7XG5cbiAgICAgICAgY29uc3Qgb25lUmVzdWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG9uZVJlc3VsdC5jbGFzc0xpc3QuYWRkKCdvbmUtcmVzdWx0Jyk7XG4gICAgICAgIG9uZVJlc3VsdC5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz0nc2VhcmNoLXJlc3VsdC1zbGlkZSc+ICR7bmFtZX08L2Rpdj4gPGRpdiBjbGFzcz0nc2VhcmNoLXJlc3VsdC10ZXh0Jz4ke3Jlc3VsdC5pdGVtLnRleHR9PC9kaXY+YFxuICAgICAgICBvbmVSZXN1bHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBnb3RvRXZlbnQoZXZlbnQpO1xuICAgICAgICB9KVxuICAgICAgICBhbGxSZXN1bHRzLmFwcGVuZENoaWxkKG9uZVJlc3VsdClcblxuICAgIH1cblxuXG59IiwiZXhwb3J0IHtcbiAgICB0b2dnbGVTa2V0Y2hwYWQsIGN1cnJlbnRUb29sXG59O1xuXG4vL3RoZSBwb3NzaWJsZSB0b29scyBhcmUgYSByZWQgcGVuY2lsIGFuZCBhIGJsdWUgcGVuY2lsLCBhbmQgTm9uZSBtZWFucyB0aGF0IGRyYXdpbmcgaXMgaW5hY3RpdmUsIGluIHdoaWNoIGNhc2UgYSBoaWdobGlnaHRlciBpcyB1c2VkXG5cbnR5cGUgVG9vbCA9ICdyZWQnIHwgJ2JsdWUnIHwgJ25vbmUnXG5sZXQgY3VycmVudFRvb2w6IFRvb2wgPSAnbm9uZSdcblxuY29uc3QgdW5kb1N0YWNrOiBTVkdFbGVtZW50W10gPSBbXTtcbmxldCB1bmRvSW5kZXggPSAtMTtcblxuXG5cbmNvbnN0IGRyYXdTdGF0ZSA9IHtcbiAgICBzaWdDYW52YXM6IHVuZGVmaW5lZCBhcyBTVkdTVkdFbGVtZW50LFxuICAgIG1hdHJpeDogdW5kZWZpbmVkIGFzIFNWR01hdHJpeCxcbiAgICBwb2ludDogdW5kZWZpbmVkIGFzIFNWR1BvaW50LFxuICAgIGN1clBhdGg6IHVuZGVmaW5lZCBhcyBTVkdFbGVtZW50LFxuICAgIGN1clBhdGhUZXh0OiB1bmRlZmluZWQgYXMgc3RyaW5nLFxuICAgIG9yaWdpbmFsOiB7IHg6IDAsIHk6IDAgfSxcbiAgICByZWN0OiB1bmRlZmluZWQgYXMgU1ZHUmVjdEVsZW1lbnRcbn1cblxuXG5cbmZ1bmN0aW9uIGRyYXcoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PSAncG9pbnRlcmRvd24nKSB7XG4gICAgICAgIGRyYXdTdGF0ZS5zaWdDYW52YXMgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N2ZycpIGFzIHVua25vd24pIGFzIFNWR1NWR0VsZW1lbnQ7XG4gICAgICAgIGRyYXdTdGF0ZS5wb2ludCA9IGRyYXdTdGF0ZS5zaWdDYW52YXMuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICAgICAgZHJhd1N0YXRlLm1hdHJpeCA9IGRyYXdTdGF0ZS5zaWdDYW52YXMuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpO1xuICAgICAgICBkcmF3U3RhdGUuc2lnQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgZHJhdywgZmFsc2UpO1xuICAgICAgICBkcmF3U3RhdGUuc2lnQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIGRyYXcsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBkcmF3U3RhdGUucG9pbnQueCA9IChldmVudCBhcyBQb2ludGVyRXZlbnQpLmNsaWVudFg7XG4gICAgZHJhd1N0YXRlLnBvaW50LnkgPSAoZXZlbnQgYXMgUG9pbnRlckV2ZW50KS5jbGllbnRZO1xuICAgIGRyYXdTdGF0ZS5wb2ludCA9IGRyYXdTdGF0ZS5wb2ludC5tYXRyaXhUcmFuc2Zvcm0oZHJhd1N0YXRlLm1hdHJpeCk7XG5cbiAgICAvL2lmIHRoZSBza2V0Y2hwYWQgaXMgbm90IGFjdGl2ZSwgYW5kIGhlbmNlIHdlIHVzZSB0aGUgaGlnaGxpZ2h0ZXJcbiAgICBpZiAoY3VycmVudFRvb2wgPT0gJ25vbmUnKSB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09ICdwb2ludGVyZG93bicpIHtcbiAgICAgICAgICAgIGRyYXdTdGF0ZS5vcmlnaW5hbCA9IHsgeDogZHJhd1N0YXRlLnBvaW50LngsIHk6IGRyYXdTdGF0ZS5wb2ludC55IH07XG4gICAgICAgICAgICBkcmF3U3RhdGUucmVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInJlY3RcIik7XG4gICAgICAgICAgICBkcmF3U3RhdGUucmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneCcsIGRyYXdTdGF0ZS5wb2ludC54LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgZHJhd1N0YXRlLnJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgJ3knLCBkcmF3U3RhdGUucG9pbnQueS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGRyYXdTdGF0ZS5yZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJ3llbGxvdycpO1xuICAgICAgICAgICAgZHJhd1N0YXRlLnJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgJ29wYWNpdHknLCAnMjAlJyk7XG4gICAgICAgICAgICBkcmF3U3RhdGUuc2lnQ2FudmFzLmFwcGVuZENoaWxkKGRyYXdTdGF0ZS5yZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PSAncG9pbnRlcm1vdmUnKSB7XG4gICAgICAgICAgICBsZXQgaGVpZ2h0ID0gZHJhd1N0YXRlLnBvaW50LnkgLSBkcmF3U3RhdGUub3JpZ2luYWwueTtcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IGRyYXdTdGF0ZS5wb2ludC54IC0gZHJhd1N0YXRlLm9yaWdpbmFsLng7XG4gICAgICAgICAgICBsZXQgeCwgeTogbnVtYmVyO1xuXG4gICAgICAgICAgICAvL25lZ2F0aXZlIGhlaWdodCBhbmQgd2lkdGggYXJlIG5vdCBhbGxvd2VkLCBzbyB3ZSBuZWVkIHRvIHNldCB0aGUgY29ybmVyIGFwcHJvcHJpYXRlbHlcbiAgICAgICAgICAgIGlmIChoZWlnaHQgPj0gMCkgeyB5ID0gZHJhd1N0YXRlLm9yaWdpbmFsLnk7IH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IC0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHkgPSBkcmF3U3RhdGUucG9pbnQueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3aWR0aCA+PSAwKSB7IHggPSBkcmF3U3RhdGUub3JpZ2luYWwueDsgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSAtIHdpZHRoO1xuICAgICAgICAgICAgICAgIHggPSBkcmF3U3RhdGUucG9pbnQueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRyYXdTdGF0ZS5yZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICd4JywgeC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGRyYXdTdGF0ZS5yZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICd5JywgeS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGRyYXdTdGF0ZS5yZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICdoZWlnaHQnLCBoZWlnaHQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBkcmF3U3RhdGUucmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCB3aWR0aC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC50eXBlID09ICdwb2ludGVydXAnKVxuICAgICAgICAgICAgZHJhd1N0YXRlLnJlY3QucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgLy9pZiB0aGUgcGVuIGlzIHRoZSBhY3RpdmUgdG9vbFxuICAgIGlmIChjdXJyZW50VG9vbCA9PSAnYmx1ZScgfHwgY3VycmVudFRvb2wgPT0gJ3JlZCcpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gJ3BvaW50ZXJkb3duJykge1xuICAgICAgICAgICAgZHJhd1N0YXRlLmN1clBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJwYXRoXCIpO1xuICAgICAgICAgICAgZHJhd1N0YXRlLmN1clBhdGhUZXh0ID0gJ00gJyArIGRyYXdTdGF0ZS5wb2ludC54ICsgJyAnICsgZHJhd1N0YXRlLnBvaW50Lnk7XG4gICAgICAgICAgICBkcmF3U3RhdGUuY3VyUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsIGRyYXdTdGF0ZS5jdXJQYXRoVGV4dCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gY3VycmVudFRvb2wgPT0gJ2JsdWUnID8gJ2JsdWUnIDogJ3JlZCc7XG4gICAgICAgICAgICBkcmF3U3RhdGUuY3VyUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc3Ryb2tlJywgY29sb3IpO1xuICAgICAgICAgICAgZHJhd1N0YXRlLmN1clBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZS13aWR0aCcsIGRyYXdTdGF0ZS5tYXRyaXguYS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGRyYXdTdGF0ZS5zaWdDYW52YXMuYXBwZW5kQ2hpbGQoZHJhd1N0YXRlLmN1clBhdGgpO1xuXG4gICAgICAgICAgICB1bmRvU3RhY2suc3BsaWNlKHVuZG9JbmRleCArIDEpO1xuICAgICAgICAgICAgdW5kb1N0YWNrLnB1c2goZHJhd1N0YXRlLmN1clBhdGgpO1xuICAgICAgICAgICAgdW5kb0luZGV4ICs9IDE7XG4gICAgICAgICAgICB1bmRvQnV0dG9ucygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC50eXBlID09ICdwb2ludGVybW92ZScpIHtcbiAgICAgICAgICAgIGRyYXdTdGF0ZS5jdXJQYXRoVGV4dCArPSAnIEwgJyArIGRyYXdTdGF0ZS5wb2ludC54ICsgJyAnICsgZHJhd1N0YXRlLnBvaW50Lnk7XG4gICAgICAgICAgICBkcmF3U3RhdGUuY3VyUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsIGRyYXdTdGF0ZS5jdXJQYXRoVGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PSAncG9pbnRlcnVwJyB8fCBldmVudC50eXBlID09ICdwb2ludGVyb3V0Jykge1xuICAgICAgICBkcmF3U3RhdGUuc2lnQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgZHJhdywgZmFsc2UpO1xuICAgICAgICBkcmF3U3RhdGUuc2lnQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIGRyYXcsIGZhbHNlKTtcbiAgICB9XG5cbn1cblxuXG5cblxuXG5mdW5jdGlvbiB0b2dnbGVTa2V0Y2hwYWQoKTogdm9pZCB7XG5cbiAgICBjb25zdCBza2V0Y2hQYW5lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdza2V0Y2gtcGFuZWwnKTsgXG4gICAgY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHJhd2luZy10b29scy1jaGVja2JveCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgc3dpdGNoIChjdXJyZW50VG9vbCkge1xuICAgICAgICBjYXNlICdyZWQnOlxuICAgICAgICBjYXNlICdibHVlJzpcbiAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNrZXRjaFBhbmVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBzZWxlY3RUb29sKCdub25lJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZWN0VG9vbCgncmVkJyk7XG4gICAgICAgICAgICBza2V0Y2hQYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgdW5kb0J1dHRvbnMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyAndW5zdXBwb3J0ZWQgc2tldGNocGFkIGNhc2UnXG4gICAgfVxuXG59XG5cblxuZnVuY3Rpb24gdW5kbygpOiB2b2lkIHtcbiAgICBpZiAodW5kb0luZGV4ID49IDApIHtcbiAgICAgICAgY29uc3QgdG9wID0gdW5kb1N0YWNrW3VuZG9JbmRleF07XG4gICAgICAgIHRvcC5yZW1vdmUoKTtcbiAgICAgICAgdW5kb0luZGV4IC09IDE7XG4gICAgfVxuICAgIHVuZG9CdXR0b25zKCk7XG59XG5cbmZ1bmN0aW9uIHJlZG8oKTogdm9pZCB7XG5cbiAgICBpZiAodW5kb0luZGV4IDwgdW5kb1N0YWNrLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdW5kb0luZGV4ICs9IDE7XG4gICAgICAgIGNvbnN0IHRvcCA9IHVuZG9TdGFja1t1bmRvSW5kZXhdO1xuICAgICAgICBkcmF3U3RhdGUuc2lnQ2FudmFzLmFwcGVuZENoaWxkKHRvcCk7XG4gICAgfVxuICAgIHVuZG9CdXR0b25zKCk7XG59XG5cblxuZnVuY3Rpb24gdW5kb0J1dHRvbnMoKTogdm9pZCB7XG4gICAgaWYgKHVuZG9JbmRleCA+PSAwKVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2tldGNoLXVuZG8nKS5jbGFzc0xpc3QucmVtb3ZlKCdkaXNhYmxlZCcpXG4gICAgZWxzZVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2tldGNoLXVuZG8nKS5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpXG5cblxuICAgIGlmICh1bmRvSW5kZXggPCB1bmRvU3RhY2subGVuZ3RoIC0gMSlcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NrZXRjaC1yZWRvJykuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKVxuICAgIGVsc2VcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NrZXRjaC1yZWRvJykuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKVxufVxuXG5cblxuXG4vLyB0aGUgbWFpbiBldmVudCBkaXNwYXRjaGVyXG5mdW5jdGlvbiBrZXlMaXN0ZW5lcihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC5rZXkgPT0gJ3UnKSB7XG4gICAgICAgIHVuZG8oKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LmtleSA9PSAnaScpIHtcbiAgICAgICAgcmVkbygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2VsZWN0VG9vbCh0b29sOiBUb29sKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NrZXRjaC1yZWQnKS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdza2V0Y2gtYmx1ZScpLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG5cbiAgICAvL3RoZSByZWQgb3IgYmx1ZSBwZW5jaWwgd2FzIGNob3NlblxuICAgIGlmICh0b29sID09ICdyZWQnKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdza2V0Y2gtcmVkJykuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9vbCA9PSAnYmx1ZScpIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NrZXRjaC1ibHVlJykuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICB9XG4gICAgY3VycmVudFRvb2wgPSB0b29sO1xufVxuXG5cbmZ1bmN0aW9uIGJ1dHRvbkNsaWNrZWQoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKHRhcmdldC5pZCA9PSAnc2tldGNoLXVuZG8nKSB7XG4gICAgICAgIHVuZG8oKTtcbiAgICB9XG4gICAgaWYgKHRhcmdldC5pZCA9PSAnc2tldGNoLXJlZG8nKSB7XG4gICAgICAgIHJlZG8oKTtcbiAgICB9XG4gICAgaWYgKHRhcmdldC5pZCA9PSAnc2tldGNoLXJlZCcpIHtcbiAgICAgICAgc2VsZWN0VG9vbCgncmVkJyk7XG4gICAgfVxuICAgIGlmICh0YXJnZXQuaWQgPT0gJ3NrZXRjaC1ibHVlJykge1xuICAgICAgICBzZWxlY3RUb29sKCdibHVlJyk7XG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIGluaXRTa2V0Y2hwYWQoKSB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NrZXRjaC1wYW5lbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYnV0dG9uQ2xpY2tlZCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwga2V5TGlzdGVuZXIpO1xuXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudClcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N2ZycpLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChldmVudDogRXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N2ZycpLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgZHJhdywgZmFsc2UpO1xufVxuXG5pbml0U2tldGNocGFkKCk7IiwiZXhwb3J0IHtcbiAgICBzb3VuZFN0b3AsXG4gICAgc291bmRQbGF5LFxuICAgIHNvdW5kUmVjb3JkLFxuICAgIGxvYWRTb3VuZCxcbiAgICBzb3VuZFN0YXRlLFxuICAgIHBsYXliYWNrUmF0ZUNoYW5nZSxcbiAgICBnb3RvQXVkaW8sXG4gICAgc291bmRBZHZhbmNlLFxuICAgIHNvdW5kcyxcbiAgICB0b3RhbFNvdW5kRHVyYXRpb24sXG4gICAgaW5pdFNvdW5kVGltZWxpbmUsXG4gICAgcmVzZXRTb3VuZCxcbiAgICBzb3VuZFBhdXNlZCxcbiAgICBlbmRPZlNvdW5kLFxuICAgIGNhY2hlRmx1c2gsXG4gICAgU291bmRTdGF0ZSxcbiAgICBzb3VuZExpdmUsXG4gICAgZW5kUmVjb3JkaW5nLFxuICAgIHN0ZXBBdWRpb1xufVxuXG5pbXBvcnQge1xuICAgIE1lc3NhZ2VUb1NlcnZlclNvdW5kLFxuICAgIE1lc3NhZ2VUb1NlcnZlckxpdmUsXG4gICAgTGl2ZVJlY29yZGluZ1xufSBmcm9tICcuL3R5cGVzJ1xuXG5pbXBvcnQge1xuICAgIGdldE1hbmlmZXN0LFxuICAgIG1hbmlmZXN0LFxuICAgIHVzZXJBZ2VudFxufSBmcm9tICcuL3ZpZXdlcidcblxuaW1wb3J0IHtcbiAgICBmaWxlTmFtZSxcbiAgICBzZW5kVG9TZXJ2ZXJcbn0gZnJvbSAnLi9maWxlcydcblxuaW1wb3J0IHtcbiAgICBldmVudERlc2NyaXB0aW9uXG59IGZyb20gXCIuL2V2ZW50XCJcblxuaW1wb3J0IHtcbiAgICBhdWRpb1BsYXlpbmcsXG4gICAgc291bmRJY29uLFxuICAgIHRpbWVsaW5lSFRNTCxcbiAgICB1c2VyQWxlcnRcbn0gZnJvbSBcIi4vaHRtbFwiXG5pbXBvcnQgeyBhbGxTdGVwcywgY3VycmVudFN0ZXAsIGdvdG9TdGVwLCBsb2FkTmVhcmJ5U291bmRzLCBtb3ZlSGVhZCwgU3RlcCwgdGltZWxpbmV9IGZyb20gJy4vdGltZWxpbmUnXG5cblxuXG5cblxuXG5lbnVtIFNvdW5kU3RhdGUge1xuICAgIFJlY29yZGluZyA9IFwiUmVjb3JkXCIsXG4gICAgTGl2ZSA9IFwiTGl2ZVwiLFxuICAgIFBsYXkgPSBcIlBsYXlcIixcbiAgICBOb25lID0gXCJSaWdodFwiLFxufVxuXG5cbi8vdGhlcmUgYXJlIHRocmVlIHBvc3NpYmxlIHN0YXRlcyBmb3IgdGhlIHNvdW5kXG4vL1wicmVjb3JkaW5nXCIgbWVhbnMgdGhhdCB3ZSBhcmUgcmVjb3JkaW5nIHNvdW5kXG4vL1wicGxheVwiIG1lYW5zIHRoYXQgd2UgYXJlIHBsYXlpbmcgc291bmRcbi8vXCJub25lXCIgIG1lYW5zIG5vbmUgb2YgdGhlIGFib3ZlXG5cbmxldCBzb3VuZFN0YXRlOiBTb3VuZFN0YXRlID0gU291bmRTdGF0ZS5Ob25lO1xuLy8gbGV0IGdsb2JhbEF1ZGlvOiBIVE1MQXVkaW9FbGVtZW50O1xuXG5sZXQgdG90YWxTb3VuZER1cmF0aW9uID0gMDsgLy9kdXJhdGlvbiBvZiBzb3VuZHMgc28gZmFyXG5cbnR5cGUgU291bmRJbmZvID0ge1xuICAgIGZpbGVuYW1lOiBzdHJpbmcsXG4gICAgZHVyYXRpb246IG51bWJlcixcbiAgICBwcmV2aW91c0R1cmF0aW9uOiBudW1iZXIsXG4gICAgYXVkaW86IEhUTUxBdWRpb0VsZW1lbnRcbn1cblxuY29uc3Qgc291bmRzOiBNYXA8U3RlcCwgU291bmRJbmZvPiA9IG5ldyBNYXAoKTtcblxuLy90byBnZXQgbmV3IHNvdW5kcywgd2UgdXNlIGEgdHJpY2sgd2hlcmUgdGhlIGF1ZGlvIG5hbWUgaXMgZXh0ZW5kZWQgd2l0aCBtZWFuaW5nbGVzcywgYnV0IGNoYW5naW5nLCBzdHJpbmcgcGFyYW1ldGVyc1xubGV0IGNhY2hlRmx1c2hTdHJpbmcgPSAnJ1xuZnVuY3Rpb24gY2FjaGVGbHVzaCgpOiB2b2lkIHtcbiAgICBjYWNoZUZsdXNoU3RyaW5nICs9ICc/JyArIERhdGUubm93KCk7XG59XG5cbmZ1bmN0aW9uIHNvdW5kUGF1c2VkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGF1ZGlvID0gc3RlcEF1ZGlvKGN1cnJlbnRTdGVwKCkpO1xuICAgIGlmIChhdWRpbyAhPSB1bmRlZmluZWQgJiYgYXVkaW8uY3VycmVudFRpbWUgPiAwKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbn1cblxuXG4vL3N0b3AgcGxheWluZyBvciByZWNvcmRpbmcsIHRodXMgbWFraW5nIHRoZSBzb3VuZCBzdGF0ZSBub25lXG5mdW5jdGlvbiBzb3VuZFN0b3AoKTogdm9pZCB7XG4gICAgaWYgKHNvdW5kU3RhdGUgPT0gU291bmRTdGF0ZS5QbGF5KSB7XG4gICAgICAgIGNvbnN0IGF1ZGlvID0gc3RlcEF1ZGlvKGN1cnJlbnRTdGVwKCkpO1xuICAgICAgICBpZiAoYXVkaW8gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhdWRpby5wYXVzZSgpO1xuICAgICAgICAgICAgYXVkaW9QbGF5aW5nKGF1ZGlvKTsgLy91cGRhdGVzIHRoZSB0aW1lbGluZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNvdW5kU3RhdGUgPT0gU291bmRTdGF0ZS5SZWNvcmRpbmcgfHwgc291bmRTdGF0ZSA9PSBTb3VuZFN0YXRlLkxpdmUpIHtcbiAgICAgICAgZW5kUmVjb3JkaW5nKDApO1xuICAgIH1cblxuICAgIHNvdW5kU3RhdGUgPSBTb3VuZFN0YXRlLk5vbmU7XG4gICAgc291bmRJY29uKCk7XG59XG5cbmxldCBhdWRpb0NodW5rczogQmxvYltdID0gdW5kZWZpbmVkO1xubGV0IG1lZGlhUmVjb3JkZXI6IE1lZGlhUmVjb3JkZXI7XG5cblxuZnVuY3Rpb24gZW5kUmVjb3JkaW5nKGRpcmVjdGlvbjogLTEgfCAwIHwgMSkgOiB2b2lkIHtcbiAgICBpZiAobWVkaWFSZWNvcmRlciA9PSBudWxsIHx8IG1lZGlhUmVjb3JkZXIuc3RhdGUgIT0gJ3JlY29yZGluZycpIHJldHVybjtcblxuICAgIGxldCBsaXZlOiBib29sZWFuO1xuICAgIHN3aXRjaCAoc291bmRTdGF0ZSkge1xuICAgICAgICBjYXNlIFNvdW5kU3RhdGUuUmVjb3JkaW5nOlxuICAgICAgICAgICAgbGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU291bmRTdGF0ZS5MaXZlOlxuICAgICAgICAgICAgbGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93ICdzaG91bGQgbm90IGJlIGluIHRoaXMgc3RhdGUnO1xuICAgIH1cblxuXG4gICAgY29uc3QgcmV0dmFsOiBNZXNzYWdlVG9TZXJ2ZXJTb3VuZCA9IHtcbiAgICAgICAgcHJlc2VudGF0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIHR5cGU6ICd3YXYnLFxuICAgICAgICBmb3JXaGF0OiB1bmRlZmluZWQsXG4gICAgICAgIGZpbGU6IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGlmICghbGl2ZSkge1xuICAgICAgICByZXR2YWwuZm9yV2hhdCA9IGV2ZW50RGVzY3JpcHRpb24oY3VycmVudFN0ZXAoKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR2YWwuZm9yV2hhdCA9IHsgdHlwZTogJ3N0ZXAnLCBkZXNjcmlwdGlvbjogdW5kZWZpbmVkIH07XG4gICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dmFsLmZvcldoYXQuZGVzY3JpcHRpb24gPSBjdXJyZW50U3RlcCgpLmRlc2NyaXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RlcCA9IHRpbWVsaW5lLnBhc3RbdGltZWxpbmUucGFzdC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dmFsLmZvcldoYXQuZGVzY3JpcHRpb24gPSBzdGVwLnJldmVyc2UoKS5kZXNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dmFsLmZvcldoYXQuZGVzY3JpcHRpb24gPSB7IHR5cGU6ICdsYXN0JyAsIHBhZ2UgOiBjdXJyZW50U3RlcCgpLnBhZ2VOdW1iZXJ9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbWVkaWFSZWNvcmRlci5vbnN0b3AgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGF1ZGlvQmxvYiA9IG5ldyBCbG9iKGF1ZGlvQ2h1bmtzKVxuICAgICAgICAvLyBjb25zdCBhdWRpb1VSTCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGF1ZGlvQmxvYilcbiAgICAgICAgLy8gY29uc3QgYXVkaW8gPSBuZXcgQXVkaW8oYXVkaW9VUkwpXG4gICAgICAgIGNvbnN0IGZyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgICAgICBmci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gc2VuZCgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJSZXNwb25zZSA9IGF3YWl0IHNlbmRUb1NlcnZlcihyZXR2YWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VydmVyUmVzcG9uc2Uuc3RhdHVzICE9ICdzb3VuZCByZWNvcmRlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBzZXJ2ZXJSZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VuZFN0YXRlID09IFNvdW5kU3RhdGUuTm9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBzb3VuZCByZWNvcmRpbmcgaGFzIGZpbmlzaGVkLCB0aGVuIHdlIHJlbG9hZCB0aGUgdGltZWxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy93ZSByZWxvYWQgdGhlIG1hbmlmZXN0IHRvIGdldCB0aGUgbmV3IHZlcnNpb24gb2YgdGhlIHNvdW5kIGRpY3Rpb25hcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFuID0gYXdhaXQgZ2V0TWFuaWZlc3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5pZmVzdC5zb3VuZERpY3QgPSBtYW4uc291bmREaWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCBzb21lIHNhbHQgdG8gdGhlIGF1ZGlvIHVybHMgdG8gZmx1c2ggdGhlIGNhY2hlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlRmx1c2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFNvdW5kVGltZWxpbmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZE5lYXJieVNvdW5kcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZUhUTUwoKTtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICAgICAgdXNlckFsZXJ0KFwiRmFpbGVkIHRvIHJlY29yZCBzb3VuZC4gXCIgKyBlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgRmlsZVJlYWRlclxuICAgICAgICAgICAgY29uc3QgeCA9IHRhcmdldC5yZXN1bHQgYXMgQXJyYXlCdWZmZXJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBuZXcgVWludDhBcnJheSh4KVxuICAgICAgICAgICAgcmV0dmFsLmZpbGUgPSBBcnJheS5mcm9tKHkpO1xuICAgICAgICAgICAgc2VuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGZyLnJlYWRBc0FycmF5QnVmZmVyKGF1ZGlvQmxvYilcbiAgICB9XG4gICAgbWVkaWFSZWNvcmRlci5zdG9wKCk7XG59XG5cbi8vc3RhcnQgcmVjb3JkaW5nIHNvdW5kXG5mdW5jdGlvbiBzb3VuZFJlY29yZChsaXZlOiAnbGl2ZScgfCAnZXZlbnQnKTogdm9pZCB7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBwcm9taXNlU291bmQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHtcbiAgICAgICAgICAgIGF1ZGlvOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICAgIG1lZGlhUmVjb3JkZXIgPSBuZXcgTWVkaWFSZWNvcmRlcihzdHJlYW0pXG4gICAgICAgIGF1ZGlvQ2h1bmtzID0gW107XG4gICAgICAgIG1lZGlhUmVjb3JkZXIuc3RhcnQoKVxuICAgICAgICBtZWRpYVJlY29yZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJkYXRhYXZhaWxhYmxlXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGF1ZGlvQ2h1bmtzLnB1c2goZXZlbnQuZGF0YSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBwcm9taXNlU291bmQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKGxpdmUgPT0gJ2xpdmUnKVxuICAgICAgICAgICAgc291bmRTdGF0ZSA9IFNvdW5kU3RhdGUuTGl2ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzb3VuZFN0YXRlID0gU291bmRTdGF0ZS5SZWNvcmRpbmc7XG4gICAgICAgIHNvdW5kSWNvbigpO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBzb3VuZFN0YXRlID0gU291bmRTdGF0ZS5Ob25lO1xuICAgICAgICBzb3VuZEljb24oKTtcbiAgICAgICAgaWYgKHVzZXJBZ2VudCgpID09IFwiU2FmYXJpXCIpIHtcbiAgICAgICAgICAgIHVzZXJBbGVydChcIlRvIGVuYWJsZSBNZWRpYXJlY29yZGVyICBpbiBTYWZhcmksIHVzZSBEZXZlbG9wL0V4cGVyaW1lbnRhbCBmZWF0dXJlc1wiKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICB1c2VyQWxlcnQoZXJyb3IpXG4gICAgfSlcbn1cblxuXG5cbmZ1bmN0aW9uIGFmdGVyU291bmQoKTogdm9pZCB7XG5cbiAgICBpZiAodGltZWxpbmUuZnV0dXJlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzZXRTb3VuZCgpO1xuICAgICAgICAvL3RoZXJlIGlzIHNvbWV0aGluZyB0byBzdGlsbCBwbGF5XG4gICAgICAgIG1vdmVIZWFkKDEpO1xuICAgICAgICBzb3VuZFBsYXkoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vd2UgaGF2ZSBmaW5pc2hlZCBwbGF5aW5nIHRoZSBsYXN0IHNvdW5kXG4gICAgICAgIHNvdW5kU3RvcCgpO1xuICAgIH1cbn1cblxuXG5cblxuXG5cbi8vc3RhcnRzIGEgbmV3IGxpdmUgcmVjb3JkaW5nIFxuZnVuY3Rpb24gc291bmRMaXZlKCk6IHZvaWQge1xuICAgIGNvbnN0IG1zZzogTWVzc2FnZVRvU2VydmVyTGl2ZSA9IHtcbiAgICAgICAgdHlwZTogJ3N0YXJ0TGl2ZScsXG4gICAgICAgIHByZXNlbnRhdGlvbjogbWFuaWZlc3QucHJlc2VudGF0aW9uLFxuICAgIH1cblxuICAgIC8vd2UgcmV0dXJuIHRvIHRoZSBmaXJzdCBzdGVwLCBhbmQgdGhlbiBvbmx5IHN0YXJ0IHRoZSBsaXZlIHJlY29yZGluZ1xuICAgIGdvdG9TdGVwKGFsbFN0ZXBzKClbMF0pLnRoZW4oXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHNlbmRUb1NlcnZlcihtc2cpO1xuICAgICAgICAgICAgc291bmRSZWNvcmQoJ2xpdmUnKTtcbiAgICAgICAgICAgIHNvdW5kSWNvbigpO1xuICAgICAgICB9XG4gICAgKVxuXG5cblxufVxuXG5jb25zdCBwbGF5YmFja1JhdGVzID0gWzEsIDEuNSwgMiwgMC43XTtcbmxldCBwbGF5YmFja1JhdGVJbmRleCA9IDA7XG4vL3RoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlIDEsIDEuNSwgMlxuZnVuY3Rpb24gcGxheWJhY2tSYXRlQ2hhbmdlKCk6IHZvaWQge1xuXG4gICAgcGxheWJhY2tSYXRlSW5kZXggPSAocGxheWJhY2tSYXRlSW5kZXggKyAxKSAlIHBsYXliYWNrUmF0ZXMubGVuZ3RoO1xuICAgIGNvbnN0IGF1ZGlvID0gc3RlcEF1ZGlvKGN1cnJlbnRTdGVwKCkpO1xuICAgIGlmIChhdWRpbyAhPSB1bmRlZmluZWQpXG4gICAgICAgIGF1ZGlvLnBsYXliYWNrUmF0ZSA9IHBsYXliYWNrUmF0ZXNbcGxheWJhY2tSYXRlSW5kZXhdO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VuZC1zcGVlZCcpLmlubmVySFRNTCA9ICfDlycgKyBwbGF5YmFja1JhdGVzW3BsYXliYWNrUmF0ZUluZGV4XTtcbn1cblxuXG5cbmZ1bmN0aW9uIHNvdW5kUGxheShtb2RlOiAnbm9ybWFsJyB8ICdmcm9tRW5kJyA9ICdub3JtYWwnKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYXVkaW8gPSBzdGVwQXVkaW8oY3VycmVudFN0ZXAoKSk7XG4gICAgICAgIGlmIChhdWRpbyA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aHJvdyAnbm8gYXVkaW8nO1xuICAgICAgICBhdWRpby5wbGF5YmFja1JhdGUgPSBwbGF5YmFja1JhdGVzW3BsYXliYWNrUmF0ZUluZGV4XTtcbiAgICAgICAgaWYgKG1vZGUgPT0gJ2Zyb21FbmQnKVxuICAgICAgICAgICAgYXVkaW8uY3VycmVudFRpbWUgPSBNYXRoLm1heCgwLCBhdWRpby5kdXJhdGlvbiAtIDEwKTtcbiAgICAgICAgYXVkaW8ucGxheSgpO1xuICAgICAgICBzb3VuZFN0YXRlID0gU291bmRTdGF0ZS5QbGF5O1xuICAgICAgICBzb3VuZEljb24oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vaWYgdGhlIHNvdW5kIGlzIG5vdCBpbiB0aGUgZGF0YWJhc2VcbiAgICAgICAgaWYgKHNvdW5kcy5nZXQoY3VycmVudFN0ZXAoKSkgIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdXNlckFsZXJ0KFwiTm8gc291bmRzIGZvciB0aGlzIGV2ZW50XCIpO1xuICAgICAgICBzb3VuZFN0b3AoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuXG5cblxuLy9mb3IgZWFjaCBzdGVwIGluIHRoZSB0aW1lbGluZSwgZ2V0IGl0cyBmaWxlIG5hbWUgYW5kIGR1cmF0aW9uXG5mdW5jdGlvbiBpbml0U291bmRUaW1lbGluZShyZWNvcmRpbmc6IExpdmVSZWNvcmRpbmcpOiB2b2lkIHtcblxuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IChuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkuc2VhcmNoUGFyYW1zO1xuICAgIC8vdGhpcyBtYWtlcyBzdXJlIHRoYXQgdGhlIGNhY2hlIGlzIGlnbm9yZWQgd2hlbiBkb3dubG9hZGluZyBzb3VuZHMsIGlmIGEgbm9jYWNoZSBzdHJpbmcgaXMgcHJlc2VudCBpbiB0aGUgdXJsXG4gICAgaWYgKHNlYXJjaFBhcmFtcy5nZXQoJ25vY2FjaGUnKSAhPSB1bmRlZmluZWQpXG4gICAgICAgIGNhY2hlRmx1c2goKTtcblxuXG4gICAgc291bmRzLmNsZWFyKCk7XG4gICAgdG90YWxTb3VuZER1cmF0aW9uID0gMDtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBzdGVwIG9mIGFsbFN0ZXBzKCkpIHtcbiAgICAgICAgLy90cnkgdG8gZ2V0IHRoZSBzb3VuZCBpbmZvcm1hdGlvblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmV0dmFsOiBTb3VuZEluZm8gPSB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBhdWRpbzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcHJldmlvdXNEdXJhdGlvbjogdG90YWxTb3VuZER1cmF0aW9uXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmRpbmcgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgdGltZWxpbmUgYmFzZWQgb24gdGhlIGV2ZW50IHRyZWVcbiAgICAgICAgICAgICAgICBjb25zdCB3aGVyZSA9IGV2ZW50RGVzY3JpcHRpb24oc3RlcCk7XG4gICAgICAgICAgICAgICAgcmV0dmFsLmR1cmF0aW9uID0gbWFuaWZlc3Quc291bmREaWN0W3doZXJlLnNsaWRlSWRdW3doZXJlLmV2ZW50SWRdO1xuICAgICAgICAgICAgICAgIHJldHZhbC5maWxlbmFtZSA9IGZpbGVOYW1lKHdoZXJlLnNsaWRlSWQsIHdoZXJlLmV2ZW50SWQgKyAnLm1wMycgKyBjYWNoZUZsdXNoU3RyaW5nKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgdGltZWxpbmUgZnJvbSBhIHJlY29yZGluZ1xuICAgICAgICAgICAgICAgIHJldHZhbC5kdXJhdGlvbiA9IHJlY29yZGluZy5zdGVwc1tpXS5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICByZXR2YWwuZmlsZW5hbWUgPSBgJHtyZWNvcmRpbmcuZGlyfS8ke2l9Lm1wMyR7Y2FjaGVGbHVzaFN0cmluZ31gXG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJldHZhbC5kdXJhdGlvbiA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgJ25vIGR1cmF0aW9uJ1xuXG4gICAgICAgICAgICBzb3VuZHMuc2V0KHN0ZXAsIHJldHZhbClcbiAgICAgICAgICAgIHRvdGFsU291bmREdXJhdGlvbiArPSByZXR2YWwuZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIHNvdW5kIGZpbGVcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9hZFNvdW5kKHN0ZXA6IFN0ZXApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBzb3VuZCA9IHNvdW5kcy5nZXQoc3RlcCk7XG5cbiAgICAgICAgaWYgKHNvdW5kID09IHVuZGVmaW5lZCB8fCBzb3VuZC5hdWRpbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAvL2lmIHRoZXJlIGlzIG5vIHNvdW5kIHRvIGxvYWQsIG9yIGl0IGhhcyBhbHJlYWR5IGJlZW4gbG9hZGVkLCB0aGVuIHRoZSBsb2FkaW5nIGlzIGFzc3VtZWQgc3VjY2Vzc2Z1bFxuICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHNvdW5kLmZpbGVuYW1lO1xuICAgICAgICAgICAgY29uc3QgYXVkaW8gPSBuZXcgQXVkaW8oZmlsZW5hbWUpO1xuICAgICAgICAgICAgLy8gYXVkaW8uYXV0b3BsYXk9dHJ1ZTtcbiAgICAgICAgICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgYWZ0ZXJTb3VuZCk7XG5cbiAgICAgICAgICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNvdW5kLmF1ZGlvID0gYXVkaW87XG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT0gY3VycmVudFN0ZXAoKSkge1xuICAgICAgICAgICAgICAgICAgICBzb3VuZEljb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc291bmRzLmRlbGV0ZShzdGVwKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA9PSBjdXJyZW50U3RlcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdW5kSWNvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLFxuICAgICAgICAgICAgICAgIGUgPT4geyBhdWRpb1BsYXlpbmcoZS50YXJnZXQgYXMgSFRNTEF1ZGlvRWxlbWVudCkgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGdvdG9BdWRpbyhyYXRpbzogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgYXVkaW8gPSBzdGVwQXVkaW8oY3VycmVudFN0ZXAoKSk7XG4gICAgaWYgKGF1ZGlvICE9IG51bGwpIHtcbiAgICAgICAgYXVkaW8uY3VycmVudFRpbWUgPSBhdWRpby5kdXJhdGlvbiAqIHJhdGlvO1xuICAgIH1cbn1cblxuY29uc3Qgc291bmRJbmNyZW1lbnQgPSAxMDtcbi8vYWR2YW5jZSB0aGUgc291bmQgYnkgMTAgc2Vjb25kIGlmIHQ9MSBhbmQgYnkgLTEwIHNlY29uZHMgb3RoZXJ3aXNlXG5mdW5jdGlvbiBzb3VuZEFkdmFuY2UodDogMSB8IC0xKTogdm9pZCB7XG4gICAgY29uc3QgYXVkaW8gPSBzdGVwQXVkaW8oY3VycmVudFN0ZXAoKSk7XG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICAgIGlmIChhdWRpby5jdXJyZW50VGltZSA8IDEpIHsvL2lmIHdlIGFyZSBjbG9zZSB0byB0aGUgYmVnaW5uaW5nIHRoZW4gd2UgbW92ZSB0byB0aGUgcHJldmlvdXMgZXZlbnRcbiAgICAgICAgICAgIHJlc2V0U291bmQoKTtcbiAgICAgICAgICAgIG1vdmVIZWFkKC0xKTtcbiAgICAgICAgICAgIHNvdW5kUGxheSgnZnJvbUVuZCcpXG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF1ZGlvLmN1cnJlbnRUaW1lID0gTWF0aC5tYXgoMCwgYXVkaW8uY3VycmVudFRpbWUgLSBzb3VuZEluY3JlbWVudCk7XG4gICAgICAgICAgICBzb3VuZEljb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXVkaW8uY3VycmVudFRpbWUgPSBNYXRoLm1pbihhdWRpby5kdXJhdGlvbiAtIDAuMDEsIGF1ZGlvLmN1cnJlbnRUaW1lICsgc291bmRJbmNyZW1lbnQpO1xuICAgIH1cbn1cblxuLy9yZXR1cm5zIHRoZSBhdWRpbyBmb3IgdGhpcyBzdGVwXG5mdW5jdGlvbiBzdGVwQXVkaW8oc3RlcDogU3RlcCk6IEhUTUxBdWRpb0VsZW1lbnQge1xuICAgIGNvbnN0IHNvdW5kID0gc291bmRzLmdldChzdGVwKTtcbiAgICBpZiAoc291bmQgIT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gc291bmQuYXVkaW87XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vL3Jlc2V0cyB0aGUgY3VycmVudCBzb3VuZCB0byB6ZXJvXG5mdW5jdGlvbiByZXNldFNvdW5kKCk6IHZvaWQge1xuICAgIGNvbnN0IGF1ZGlvID0gc3RlcEF1ZGlvKGN1cnJlbnRTdGVwKCkpO1xuICAgIGlmIChhdWRpbyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXVkaW8ucGF1c2UoKTtcbiAgICAgICAgYXVkaW8uY3VycmVudFRpbWUgPSAwO1xuICAgICAgICBhdWRpb1BsYXlpbmcoYXVkaW8pO1xuICAgICAgICBzb3VuZEljb24oKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZE9mU291bmQoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgYXVkaW8gPSBzdGVwQXVkaW8oY3VycmVudFN0ZXAoKSk7XG5cbiAgICBpZiAodGltZWxpbmUuZnV0dXJlLmxlbmd0aCA9PSAwICYmIGF1ZGlvICE9IHVuZGVmaW5lZCAmJiBhdWRpby5jdXJyZW50VGltZSA9PSBhdWRpby5kdXJhdGlvbilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbn1cblxuIiwiZXhwb3J0IHsgY3JlYXRlVGltZWxpbmUsIG1vdmVIZWFkLCB0aW1lbGluZSwgU3RlcCwgT3ZlcmxheVN0ZXAsIFpvb21TdGVwLCB6b29tc0luLCBjdXJyZW50U3RlcCwgZ290b0V2ZW50LCBnb3RvU3RlcCwgZnV0dXJlU2xpZGUsIGFsbFN0ZXBzLCBsb2FkTmVhcmJ5U291bmRzIH1cblxuaW1wb3J0IHsgZmluZFpvb21FdmVudCwgaXNPdmVybGF5LCBydW5PdmVybGF5LCB6b29tU2xpZGUsIH0gZnJvbSBcIi4vZXZlbnRcIjtcbmltcG9ydCB7IExpdmVSZWNvcmRpbmcsIE92ZXJsYXlFdmVudCwgU2xpZGVFdmVudCwgU3RlcERlc2NyaXB0aW9uLCBab29tRXZlbnQgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5pbXBvcnQgeyBtYXJrU2Vlbiwgb3BlblBhbmVsVHJlZSwgb3BlblBhbmVsVHJlZVJlYywgc291bmRJY29uLCB0aW1lbGluZVNlZW4gfSBmcm9tIFwiLi9odG1sXCI7XG5pbXBvcnQgeyBtYW5pZmVzdCwgdXBkYXRlUGFnZU51bWJlciB9IGZyb20gXCIuL3ZpZXdlclwiO1xuaW1wb3J0IHsgZW5kUmVjb3JkaW5nLCBsb2FkU291bmQgfSBmcm9tIFwiLi9zb3VuZFwiO1xuaW1wb3J0IHsgYWRkVG9RdWV1ZSB9IGZyb20gXCIuL2xvYWRTVkdcIjtcblxuXG5cblxuXG5cbi8vdGhlIHByZXNlbnRhdGlvbiBpcyBhIHNlcXVlbmNlIG9mIHRpbWVsaW5lIGV2ZW50cy4gRWFjaCBzdWNoIGV2ZW50IGlzIGVpdGhlciBhIHpvb20gdHJhbnNpdGlvbiBmcm9tIGEgc291cmNlIHNsaWRlIHRvIGEgdGFyZ2V0IHNsaWRlLCBvciBhbiBvdmVybGF5XG5jbGFzcyBTdGVwIHtcbiAgICAvLyBzdWJ0eXBlOiBTdGVwU3VidHlwZSxcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy9cbiAgICB9XG4gICAgZXZlbnQoKTogU2xpZGVFdmVudCB7IHJldHVybiBtYW5pZmVzdC50cmVlIH1cbiAgICBkZXNjcmlwdGlvbigpOiBTdGVwRGVzY3JpcHRpb24geyByZXR1cm4geyB0eXBlOiAnbGFzdCcsIHBhZ2U6IHRoaXMucGFnZU51bWJlciB9IH1cbiAgICByZXZlcnNlKCk6IFN0ZXAgeyByZXR1cm4gbmV3IFN0ZXAoKSB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIHJ1bihtb2RlOiAnc2lsZW50JyB8ICdhbmltYXRlZCcpOiB2b2lkIHtcbiAgICAgICAgLy9cbiAgICB9XG4gICAgcGFnZU51bWJlcjogbnVtYmVyXG59XG5cbmZ1bmN0aW9uIHJldmVyc2VEaXIoZGlyOiAtMSB8IDEpOiAtMSB8IDEge1xuICAgIGlmIChkaXIgPT0gMSkgeyByZXR1cm4gLTEgfSBlbHNlIHsgcmV0dXJuIDEgfVxufVxuXG5jbGFzcyBPdmVybGF5U3RlcCBleHRlbmRzIFN0ZXAge1xuICAgIG92ZXJsYXlzOiBPdmVybGF5RXZlbnRbXTtcbiAgICBkaXJlY3Rpb246IC0xIHwgMTtcbiAgICBjb25zdHJ1Y3RvcihvdmVybGF5czogT3ZlcmxheUV2ZW50W10sIGRpcmVjdGlvbjogLTEgfCAxKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICB0aGlzLm92ZXJsYXlzID0gb3ZlcmxheXM7XG4gICAgfVxuICAgIGV2ZW50KCk6IE92ZXJsYXlFdmVudCB7IHJldHVybiB0aGlzLm92ZXJsYXlzWzBdOyB9XG4gICAgZGVzY3JpcHRpb24oKTogU3RlcERlc2NyaXB0aW9uIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ292ZXJsYXlzJywgcGFnZTogdGhpcy5wYWdlTnVtYmVyLCBzbGlkZTogdGhpcy5vdmVybGF5c1swXS5wYXJlbnQuaWQsIGRpcmVjdGlvbjogdGhpcy5kaXJlY3Rpb24sIG92ZXJsYXlzOiB0aGlzLm92ZXJsYXlzLm1hcCgobyA9PiBvLmV2ZW50SWQpKSB9XG4gICAgfVxuICAgIHJldmVyc2UoKTogU3RlcCB7XG4gICAgICAgIHJldHVybiBuZXcgT3ZlcmxheVN0ZXAodGhpcy5vdmVybGF5cywgcmV2ZXJzZURpcih0aGlzLmRpcmVjdGlvbikpO1xuICAgIH1cbiAgICBydW4obW9kZTogJ3NpbGVudCcgfCAnYW5pbWF0ZWQnKTogdm9pZCB7XG4gICAgICAgIC8vcGVyZm9ybSBhbiBvdmVybGF5IGV2ZW50XG4gICAgICAgIGZvciAoY29uc3Qgb3ZlcmxheSBvZiB0aGlzLm92ZXJsYXlzKSB7XG4gICAgICAgICAgICBydW5PdmVybGF5KG92ZXJsYXksIHRoaXMuZGlyZWN0aW9uLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5jbGFzcyBab29tU3RlcCBleHRlbmRzIFN0ZXAge1xuICAgIHNvdXJjZTogWm9vbUV2ZW50O1xuICAgIHRhcmdldDogWm9vbUV2ZW50O1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogWm9vbUV2ZW50LCB0YXJnZXQ6IFpvb21FdmVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgfVxuICAgIHJldmVyc2UoKTogU3RlcCB7XG4gICAgICAgIHJldHVybiBuZXcgWm9vbVN0ZXAodGhpcy50YXJnZXQsIHRoaXMuc291cmNlKVxuICAgIH1cbiAgICBldmVudCgpOiBTbGlkZUV2ZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlO1xuICAgIH1cbiAgICBkZXNjcmlwdGlvbigpOiBTdGVwRGVzY3JpcHRpb24ge1xuICAgICAgICByZXR1cm4geyB0eXBlOiAnem9vbScsIHBhZ2U6IHRoaXMucGFnZU51bWJlciwgc291cmNlOiB0aGlzLnNvdXJjZS5pZCwgdGFyZ2V0OiB0aGlzLnRhcmdldC5pZCB9XG4gICAgfVxuICAgIHJ1bihtb2RlOiAnc2lsZW50JyB8ICdhbmltYXRlZCcpOiB2b2lkIHtcbiAgICAgICAgYWRkVG9RdWV1ZSh0aGlzLnRhcmdldC5jaGlsZHJlbik7XG4gICAgICAgIHpvb21TbGlkZSh0aGlzLnRhcmdldCwgbW9kZSk7XG5cbiAgICAgICAgLy93ZSBvcGVuIG9yIGNsb3NlIHRoZSBzdWl0YWJsZSBzdWJ0cmVlIGluIHRoZSBsZWZ0IHBhbmVsLCBcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0LnBhcmVudCAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICBvcGVuUGFuZWxUcmVlKHRoaXMudGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMuc291cmNlICE9IHRoaXMudGFyZ2V0LnBhcmVudClcbiAgICAgICAgICAgIG9wZW5QYW5lbFRyZWUodGhpcy5zb3VyY2UsIGZhbHNlKTtcbiAgICB9XG59XG5cblxuXG5cblxuaW50ZXJmYWNlIFRpbWVsaW5lIHtcbiAgICB0eXBlOiAncmVjb3JkZWQnIHwgJ2RlZmF1bHQnLFxuICAgIHBhc3Q6IFN0ZXBbXSxcbiAgICBmdXR1cmU6IFN0ZXBbXSxcbiAgICBsYXN0U3RlcDogU3RlcCAvL3NvdW5kIHBsYXllZCBhZnRlciBsYXN0IHN0ZXBcbn1cblxuY29uc3QgdGltZWxpbmU6IFRpbWVsaW5lID0ge1xuICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICBwYXN0OiBbXSBhcyBTdGVwW10sXG4gICAgZnV0dXJlOiBbXSBhcyBTdGVwW10sXG4gICAgbGFzdFN0ZXA6IG5ldyBTdGVwKClcbn1cblxuLy90aGUgc3RlcCB0aGF0IGlzIGFib3V0IHRvIGJlIGV4ZWN1dGVkLCBpLmUuIHRoZSBvZmZzZXQtdGggaW4gdGhlIGZ1dHVyZVxuZnVuY3Rpb24gY3VycmVudFN0ZXAob2Zmc2V0ID0gMCk6IFN0ZXAge1xuICAgIGlmICh0aW1lbGluZS5mdXR1cmUubGVuZ3RoID4gb2Zmc2V0KVxuICAgICAgICByZXR1cm4gdGltZWxpbmUuZnV0dXJlW3RpbWVsaW5lLmZ1dHVyZS5sZW5ndGggLSAxIC0gb2Zmc2V0XVxuICAgIGVsc2UgaWYgKHRpbWVsaW5lLmZ1dHVyZS5sZW5ndGggPT0gb2Zmc2V0KVxuICAgICAgICByZXR1cm4gdGltZWxpbmUubGFzdFN0ZXBcbiAgICBlbHNlIHRocm93ICd0cmllZCB0byBhY2Nlc3Mgc3RlcCB0aGF0IGRvZXMgbm90IGV4aXN0J1xufVxuXG5cblxuXG5cbi8vY3JlYXRlcyB0aGUgc2VxdWVuY2Ugb2YgZXZlbnRzIHRvIGJlIHBsYXllZCBpbiB0aGUgcHJlc2VudGF0aW9uLCBiYXNlZCBvbiBhIHJlY29yZGVkIHNlcXVlbmNlIG9mIHN0ZXBzLiBJZiB3ZSBhcmUgbm90IGdpdmVuIGEgcmVjb3JkZWQgc2VxdWVuY2Ugb2Ygc3RlcHMsIHRoZW4gd2UgZGVmYXVsdCB0byBhIHRyYXZlcnNhbCBvZiB0aGUgZXZlbnQgdHJlZS4gXG5mdW5jdGlvbiBjcmVhdGVUaW1lbGluZShyZWNvcmRlZDogTGl2ZVJlY29yZGluZyk6IHZvaWQge1xuXG5cblxuXG4gICAgLy9jcmVhdGVzIHRoZSB0aW1lbGluZSBiYXNlZCBvbiB0aGUgcmVjb3JkZWQgc2VxdWVuY2Ugb2Ygc3RlcHNcbiAgICBmdW5jdGlvbiBjcmVhdGVUaW1lbGluZUZyb21SZWNvcmRpbmcoKSB7XG4gICAgICAgIHRpbWVsaW5lLnR5cGUgPSAncmVjb3JkZWQnO1xuICAgICAgICBmb3IgKGNvbnN0IGRlc2NyaXB0aW9uIG9mIHJlY29yZGVkLnN0ZXBzKSB7XG4gICAgICAgICAgICBsZXQgc3RlcDogU3RlcDtcbiAgICAgICAgICAgIHN3aXRjaCAoZGVzY3JpcHRpb24uc3RlcC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnem9vbSc6XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBuZXcgWm9vbVN0ZXAoZmluZFpvb21FdmVudChkZXNjcmlwdGlvbi5zdGVwLnNvdXJjZSksIGZpbmRab29tRXZlbnQoZGVzY3JpcHRpb24uc3RlcC50YXJnZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnb3ZlcmxheXMnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvdmVybGF5czogT3ZlcmxheUV2ZW50W10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gZmluZFpvb21FdmVudChkZXNjcmlwdGlvbi5zdGVwLnNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3ZlcmxheSBvZiBkZXNjcmlwdGlvbi5zdGVwLm92ZXJsYXlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBldmVudC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgIT0gJ2NoaWxkJyAmJiBjaGlsZC5ldmVudElkID09IG92ZXJsYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVybGF5cy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBuZXcgT3ZlcmxheVN0ZXAob3ZlcmxheXMsIGRlc2NyaXB0aW9uLnN0ZXAuZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnbGFzdCc6XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBuZXcgU3RlcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RlcC5wYWdlTnVtYmVyID0gZGVzY3JpcHRpb24uc3RlcC5wYWdlO1xuICAgICAgICAgICAgdGltZWxpbmUucGFzdC5wdXNoKHN0ZXApO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVsaW5lLmxhc3RTdGVwID0gdGltZWxpbmUucGFzdC5wb3AoKTtcbiAgICB9XG5cbiAgICAvL2NyZWF0ZXMgYSB0aW1lbGluZSB1c2luZyBhIHRyYXZlcnNhbCBvZiB0aGUgZXZlbnQgdHJlZS4gVGhlIGxvZ2ljIGlzIGNvbXBsaWNhdGVkIGEgYml0IGJ5IHRoZSBwcmVzZW5jZSBvZiBtZXJnZXMuXG4gICAgZnVuY3Rpb24gY3JlYXRlVGltZWxpbmVGcm9tRXZlbnRzKGV2ZW50OiBab29tRXZlbnQpIHtcblxuICAgICAgICB0aW1lbGluZS50eXBlID0gJ2RlZmF1bHQnO1xuICAgICAgICAvL3dlIGdyb3VwIHRoZSBjaGlsZCBldmVudHMgaW50byBibG9ja3MgYWNjb3JkaW5nIHRvIHRoZSBtZXJnZWQgYml0XG4gICAgICAgIGNvbnN0IG1lcmdlZEJsb2NrcyA9IFtdIGFzIFNsaWRlRXZlbnRbXVtdO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGV2ZW50LmNoaWxkcmVuKSB7XG5cbiAgICAgICAgICAgIGlmIChjaGlsZC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QmxvY2sgPSBtZXJnZWRCbG9ja3MucG9wKCk7XG4gICAgICAgICAgICAgICAgY3VycmVudEJsb2NrLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgIG1lcmdlZEJsb2Nrcy5wdXNoKGN1cnJlbnRCbG9jayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRCbG9ja3MucHVzaChbY2hpbGRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy93ZSBjcmVhdGUgdGhlIHRpbWVsaW5lIGV2ZW50cyBmb3IgdGhlIGJsb2Nrc1xuICAgICAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIG1lcmdlZEJsb2Nrcykge1xuXG4gICAgICAgICAgICAvL2FsbCBldmVudHMgaW4gYSBibG9jayBzaG91bGQgaGF2ZSBzYW1lIG92ZXJsYXkvbm9uLW92ZXJsYXkgdHlwZSwgaGVuY2UgaXQgaXMgZW5vdWdoIHRvIHRlc3QgdGhlIGZpcnN0IG9uZVxuICAgICAgICAgICAgaWYgKGlzT3ZlcmxheShibG9ja1swXSkpIHtcbiAgICAgICAgICAgICAgICAvL2EgYmxvY2sgb2Ygb3ZlcmxheSBldmVudHNcbiAgICAgICAgICAgICAgICB0aW1lbGluZS5wYXN0LnB1c2gobmV3IE92ZXJsYXlTdGVwKGJsb2NrIGFzIE92ZXJsYXlFdmVudFtdLCAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL2EgYmxvY2sgb2Ygem9vbSBldmVudHMsIHNvIHdlIGNhbiB0eXBlIGl0IGJldHRlclxuICAgICAgICAgICAgICAgIGNvbnN0IHpvb21CbG9jayA9IGJsb2NrIGFzIFpvb21FdmVudFtdO1xuXG4gICAgICAgICAgICAgICAgLy93ZSBmaXJzdCB6b29tIGZyb20gdGhlIGN1cnJlbnQgdG8gdGhlIGZpcnN0IGluIHRoZSBibG9ja1xuICAgICAgICAgICAgICAgIHRpbWVsaW5lLnBhc3QucHVzaChuZXcgWm9vbVN0ZXAoZXZlbnQsIHpvb21CbG9ja1swXSkpO1xuXG4gICAgICAgICAgICAgICAgLy9uZXh0LCB3ZSByZWN1cnNpdmVseSBjYWxsIGZvciBhbGwgY2hpbGRyZW4sIGFuZCBiZXR3ZWVuIGVhY2ggb2YgdGhlbSB3ZSBkbyBhIGRpcmVjdCB6b29tIGZyb20gaS0xIHRvIGlcbiAgICAgICAgICAgICAgICBjcmVhdGVUaW1lbGluZUZyb21FdmVudHMoem9vbUJsb2NrWzBdKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHpvb21CbG9jay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5wYXN0LnB1c2gobmV3IFpvb21TdGVwKHpvb21CbG9ja1tpIC0gMV0sIHpvb21CbG9ja1tpXSkpO1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVUaW1lbGluZUZyb21FdmVudHMoem9vbUJsb2NrW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9maW5hbGx5LCB3ZSB6b29tIG91dCBmcm9tIHRoZSBsYXN0IGV2ZW50IGluIHRoZSBibG9jayB0byB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIHRpbWVsaW5lLnBhc3QucHVzaChuZXcgWm9vbVN0ZXAoem9vbUJsb2NrW3pvb21CbG9jay5sZW5ndGggLSAxXSwgZXZlbnQpKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBpZiAocmVjb3JkZWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyZWF0ZVRpbWVsaW5lRnJvbUV2ZW50cyhtYW5pZmVzdC50cmVlKTtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBjcmVhdGVUaW1lbGluZUZyb21SZWNvcmRpbmcoKVxuXG4gICAgLy9pdCB3YXMgbW9yZSBjb252ZW5pZW50IHRvIGNyZWF0ZSB0aGUgcGFzdCBvZiB0aGUgdGltZWxpbmUsIGJlY2F1c2Ugd2UgY291bGQgYXBwZW5kIGJ5IGRvaW5nIHB1c2goKS4gSG93ZXZlciwgdGhlIHRpbWVsaW5lIHNob3VsZCBiZWdpbiB3aXRoIGFsbCBzdGVwcyBpbiB0aGUgZnV0dXJlLlxuICAgIHJlc2V0VGltZWxpbmUoKTtcblxuICAgIGlmIChyZWNvcmRlZCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy9pZiB3ZSBoYWQgYSBsaXZlIHJlY29yZGluZywgdGhlbiB0aGUgcGFnZSBudW1iZXJzIGhhdmUgYmVlbiBsb2FkZWQgZnJvbSB0aGUgZmlsZS4gT3RoZXJ3aXNlLCB3ZSBuZWVkIHRvICBjb21wdXRlIHRoZSBwYWdlIG51bWJlcnMuIFRoZSBwYWdlIG51bWJlciBpcyAxICsgdGhlIG51bWJlciBvZiBkaXN0aW5jdCB0YXJnZXRzIG9mIHByZWNlZGluZyB6b29tIGV2ZW50cywgbm90IGNvdW50aW5nIHpvb21zIGJhY2sgdG8gdGhlIHJvb3RcblxuICAgICAgICBjb25zdCBzZWVuOiBTZXQ8Wm9vbUV2ZW50PiA9IG5ldyBTZXQoKTtcbiAgICAgICAgbGV0IHBhZ2VDb3VudCA9IDE7XG4gICAgICAgIGZvciAoY29uc3Qgc3RlcCBvZiBhbGxTdGVwcygpKSB7XG4gICAgICAgICAgICBzdGVwLnBhZ2VOdW1iZXIgPSBwYWdlQ291bnQ7XG4gICAgICAgICAgICBpZiAoc3RlcCBpbnN0YW5jZW9mIFpvb21TdGVwICYmICFzZWVuLmhhcyhzdGVwLnRhcmdldCkgJiYgKHN0ZXAudGFyZ2V0LnBhcmVudCAhPSBudWxsKSkge1xuICAgICAgICAgICAgICAgIHBhZ2VDb3VudCsrO1xuICAgICAgICAgICAgICAgIHNlZW4uYWRkKHN0ZXAudGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aW1lbGluZS5sYXN0U3RlcC5wYWdlTnVtYmVyID0gcGFnZUNvdW50O1xuICAgIH1cbn1cblxuLy9pcyB0aGlzIGEgZnV0dXJlIHNsaWRlXG5mdW5jdGlvbiBmdXR1cmVTbGlkZShldmVudDogU2xpZGVFdmVudCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHN0ZXAgPSBldmVudFRvU3RlcChldmVudCk7XG4gICAgcmV0dXJuIHRpbWVsaW5lLmZ1dHVyZS5pbmNsdWRlcyhzdGVwKTtcbn1cblxuXG4vL3RoZSAgZmlyc3Qgc3RlcCB3aGVyZSB0aGlzIGV2ZW50IGlzIHVzZWRcbmZ1bmN0aW9uIGV2ZW50VG9TdGVwKGV2ZW50OiBTbGlkZUV2ZW50KTogU3RlcCB7XG5cbiAgICBpZiAoZXZlbnQgPT0gbWFuaWZlc3QudHJlZSlcbiAgICAgICAgcmV0dXJuIHRpbWVsaW5lLmxhc3RTdGVwO1xuXG4gICAgY29uc3QgYWxsU3RlcHMgPSB0aW1lbGluZS5wYXN0LmNvbmNhdCh0aW1lbGluZS5mdXR1cmUpO1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT0gJ2NoaWxkJylcbiAgICAgICAgZm9yIChjb25zdCBzdGVwIG9mIGFsbFN0ZXBzKVxuICAgICAgICAgICAgaWYgKHN0ZXAgaW5zdGFuY2VvZiBab29tU3RlcCkge1xuICAgICAgICAgICAgICAgIGlmIChzdGVwLnRhcmdldCA9PSBldmVudClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PSAnc2hvdycgfHwgZXZlbnQudHlwZSA9PSAnaGlkZScpXG4gICAgICAgIGZvciAoY29uc3Qgc3RlcCBvZiBhbGxTdGVwcykge1xuICAgICAgICAgICAgaWYgKHN0ZXAgaW5zdGFuY2VvZiBPdmVybGF5U3RlcCkge1xuICAgICAgICAgICAgICAgIGlmIChzdGVwLm92ZXJsYXlzLmluY2x1ZGVzKGV2ZW50KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8vc2F5cyBpZiB0aGUgc3RlcCBpcyBhbiBvdmVybGF5IHRoYXQgaXMgem9vbWluZyBpblxuZnVuY3Rpb24gem9vbXNJbihzdGVwOiBTdGVwKTogYm9vbGVhbiB7XG4gICAgaWYgKHN0ZXAgaW5zdGFuY2VvZiBab29tU3RlcCkge1xuICAgICAgICByZXR1cm4gc3RlcC5zb3VyY2UgPT0gc3RlcC50YXJnZXQucGFyZW50O1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbn1cblxuXG5cblxuXG5cbi8vbW92ZSB0byB0aGUgbmV4dCBvciBwcmV2aW91cyBldmVudCBpbiB0aGUgdGltZWxpbmVcbmZ1bmN0aW9uIG1vdmVIZWFkKGRpcmVjdGlvbjogLTEgfCAxKTogdm9pZCB7XG4gICAgbGV0IHNvdXJjZSwgdGFyZ2V0OiBTdGVwW107XG5cblxuXG4gICAgLy9kZXBlbmRpbmcgb24gdGhlIGRpcmVjdGlvbiwgd2Ugd2lsbCBzaGlmdCBhbiBldmVudCBmcm9tIGZ1dHVyZSB0byBwYXN0IG9yIGluIHRoZSBvdGhlciBkaXJlY3Rpb25cbiAgICBpZiAoZGlyZWN0aW9uID09IDEpIHtcbiAgICAgICAgc291cmNlID0gdGltZWxpbmUuZnV0dXJlO1xuICAgICAgICB0YXJnZXQgPSB0aW1lbGluZS5wYXN0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc291cmNlID0gdGltZWxpbmUucGFzdDtcbiAgICAgICAgdGFyZ2V0ID0gdGltZWxpbmUuZnV0dXJlO1xuICAgIH1cbiAgICBpZiAoc291cmNlLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjYW5ub3QgZmFsbCBvZmYgdGhlIHRhcGUnKVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9pZiB0aGVyZSBpcyBhIHJlY29yZGluZyBnb2luZyBvbiwgaXQgc2hvdWxkIGJlIHN0b3BwZWRcbiAgICBlbmRSZWNvcmRpbmcoZGlyZWN0aW9uKTtcblxuICAgIC8vbW92ZSB0aGUgc3RlcCBmcm9tIHRoZSBzb3VyY2UgdG8gdGFyZ2V0XG4gICAgbGV0IHN0ZXAgPSBzb3VyY2UucG9wKCk7XG4gICAgdGFyZ2V0LnB1c2goc3RlcCk7XG5cbiAgICBtYXJrU2VlbihzdGVwLCBkaXJlY3Rpb24pO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PSAtMSlcbiAgICAgICAgc3RlcCA9IHN0ZXAucmV2ZXJzZSgpO1xuXG4gICAgc3RlcC5ydW4oJ2FuaW1hdGVkJyk7XG5cbiAgICBsb2FkTmVhcmJ5U291bmRzKCk7XG4gICAgc291bmRJY29uKCk7XG4gICAgdXBkYXRlUGFnZU51bWJlcigpO1xufVxuXG5cbi8vbW92ZXMgYWxsIHRoZSB0aW1lbGluZSB0byB0aGUgZnV0dXJlLCBpLmUuIHdlIGdvIHRvIHRoZSBmaXJzdCBzdGVwXG5mdW5jdGlvbiByZXNldFRpbWVsaW5lKCkge1xuICAgIHdoaWxlICh0aW1lbGluZS5wYXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgc3RlcCA9IHRpbWVsaW5lLnBhc3QucG9wKCk7XG4gICAgICAgIHRpbWVsaW5lLmZ1dHVyZS5wdXNoKHN0ZXApO1xuICAgIH1cbn1cblxuXG4vL2dvZXMgdG8gYSBnaXZlbiBzdGVwIChpLmUuIGJlZm9yZSB0aGUgc3RlcCBpcyBleGVjdXRlZCksIGFmdGVyIGxvYWRpbmcgZW5vdWdoIHN2ZyBmaWxlcyB0byBtYWtlIHRoaXMgcG9zc2libGVcbmFzeW5jIGZ1bmN0aW9uIGdvdG9TdGVwKHRhcmdldFN0ZXA6IFN0ZXAsIG1vZGU6ICdzaWxlbnQnIHwgJ2FuaW1hdGVkJyA9ICdhbmltYXRlZCcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsZXQgc2xpZGU6IFNsaWRlRXZlbnQ7XG4gICAgaWYgKHRhcmdldFN0ZXAgaW5zdGFuY2VvZiBPdmVybGF5U3RlcCkgeyBzbGlkZSA9IHRhcmdldFN0ZXAub3ZlcmxheXNbMF07IH1cbiAgICBlbHNlIGlmICh0YXJnZXRTdGVwIGluc3RhbmNlb2YgWm9vbVN0ZXApIHsgc2xpZGUgPSB0YXJnZXRTdGVwLnNvdXJjZTsgfVxuICAgIGVsc2UgaWYgKHRhcmdldFN0ZXAgPT0gdGltZWxpbmUubGFzdFN0ZXApIHsgc2xpZGUgPSBtYW5pZmVzdC50cmVlIH1cbiAgICBlbHNlXG4gICAgICAgIHRocm93ICdXYW50ZWQgdG8gZ28gdG8gYSBzdGVwIHRoYXQgZG9lcyBub3QgZXhpc3QnXG5cblxuXG4gICAgLy93ZSBsb2FkIHRoZSBzbGlkZSBvZiB0aGUgc3RlcCwgcGx1cyBpdHMgYW5jZXN0b3JzLCBhbmQgdGhlaXIgY2hpbGRyZW5cbiAgICBjb25zdCBzbGlkZXNUb0xvYWQ6IFpvb21FdmVudFtdID0gW107XG4gICAgbGV0IGFuY2VzdG9yOiBab29tRXZlbnQ7XG4gICAgaWYgKHNsaWRlLnR5cGUgPT0gJ2NoaWxkJylcbiAgICAgICAgYW5jZXN0b3IgPSBzbGlkZTtcbiAgICBlbHNlXG4gICAgICAgIGFuY2VzdG9yID0gc2xpZGUucGFyZW50O1xuICAgIHdoaWxlIChhbmNlc3RvciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2xpZGVzVG9Mb2FkLnB1c2goYW5jZXN0b3IpO1xuICAgICAgICBmb3IgKGNvbnN0IGNvdXNpbiBvZiBhbmNlc3Rvci5jaGlsZHJlbilcbiAgICAgICAgICAgIGlmIChjb3VzaW4udHlwZSA9PSAnY2hpbGQnKVxuICAgICAgICAgICAgICAgIHNsaWRlc1RvTG9hZC5wdXNoKGNvdXNpbik7XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgIH1cblxuICAgIGF3YWl0IGFkZFRvUXVldWUoc2xpZGVzVG9Mb2FkKTtcbiAgICBvcGVuUGFuZWxUcmVlUmVjKHNsaWRlKTtcbiAgICByZXNldFRpbWVsaW5lKCk7XG4gICAgLy90aGUgZXZlbnRzIGJlZm9yZSB0aGUgc3RlcCBuZWVkIHRvIGJlIGV4ZWN1dGVkIGFuZCBtYXJrZWQgYXMgc2VlblxuICAgIHdoaWxlIChjdXJyZW50U3RlcCgpICE9IHRhcmdldFN0ZXApIHtcbiAgICAgICAgY29uc3Qgc3RlcCA9IHRpbWVsaW5lLmZ1dHVyZS5wb3AoKTtcbiAgICAgICAgaWYgKHN0ZXAgaW5zdGFuY2VvZiBPdmVybGF5U3RlcClcbiAgICAgICAgICAgIHN0ZXAucnVuKCdzaWxlbnQnKTtcbiAgICAgICAgbWFya1NlZW4oc3RlcCwgMSk7XG4gICAgICAgIHRpbWVsaW5lLnBhc3QucHVzaChzdGVwKTtcbiAgICB9XG4gICAgLy90aGUgb3Bwb3NpdGUgbmVlZHMgdG8gYmUgZG9uZSBmb3IgdGhlIHJlbWFpbmluZyBldmVudHNcbiAgICBmb3IgKGNvbnN0IGZ1dHVyZVN0ZXAgb2YgdGltZWxpbmUuZnV0dXJlKSB7XG4gICAgICAgIG1hcmtTZWVuKGZ1dHVyZVN0ZXAsIC0xKTtcbiAgICAgICAgaWYgKGZ1dHVyZVN0ZXAgaW5zdGFuY2VvZiBPdmVybGF5U3RlcClcbiAgICAgICAgICAgIGZ1dHVyZVN0ZXAucmV2ZXJzZSgpLnJ1bignc2lsZW50Jyk7XG4gICAgfVxuICAgIGlmICh0aW1lbGluZS5sYXN0U3RlcCAhPSB1bmRlZmluZWQpXG4gICAgICAgIHRpbWVsaW5lU2Vlbih0aW1lbGluZS5sYXN0U3RlcCwgZmFsc2UpO1xuXG4gICAgbGV0IHpvb20gPSBzbGlkZTtcbiAgICBpZiAoc2xpZGUudHlwZSAhPSAnY2hpbGQnKVxuICAgICAgICB6b29tID0gc2xpZGUucGFyZW50O1xuXG4gICAgaWYgKG1vZGUgPT0gJ3NpbGVudCcpXG4gICAgICAgIHpvb21TbGlkZSh6b29tLCAnc2lsZW50JylcbiAgICBlbHNlXG4gICAgICAgIHpvb21TbGlkZSh6b29tKTtcblxuICAgIGxvYWROZWFyYnlTb3VuZHMoKTtcbiAgICBzb3VuZEljb24oKTtcbiAgICB1cGRhdGVQYWdlTnVtYmVyKCk7XG59XG5cbi8vZ29lcyB0byB0aGUgZmlyc3Qgc3RlcCBhZnRlciB0aGUgZXZlbnQgYmVjb21lcyB2aXNpYmxlXG5mdW5jdGlvbiBnb3RvRXZlbnQoZXZlbnQ6IFNsaWRlRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBzdGVwID0gZXZlbnRUb1N0ZXAoZXZlbnQpO1xuICAgIGlmIChzdGVwICE9IHVuZGVmaW5lZClcbiAgICAgICAgLy9nb3RvIHN0ZXAgZ29lcyB0byBiZWZvcmUgdGhlIGV2ZW50LCBzbyB3ZSBuZWVkIHRvIGdvIG9uZSBmdXJ0aGVyXG4gICAgICAgIGdvdG9TdGVwKHN0ZXApLnRoZW4oKCkgPT4gbW92ZUhlYWQoMSkpO1xuICAgIGVsc2VcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgZXZlbnQgaGFzIG5vIGFzc29jaWF0ZWQgc3RlcCcsIGV2ZW50KVxufVxuXG5cblxuXG5cblxuZnVuY3Rpb24gbG9hZE5lYXJieVNvdW5kcygpOiB2b2lkIHtcbiAgICBsb2FkU291bmQoY3VycmVudFN0ZXAoKSk7XG4gICAgLy9sb2FkIHNvdW5kIGZvciBwcmV2aW91cyBzdGVwLCB3aGljaCBjb3VsZCBiZSB1c2VmdWwgd2hlbiBtb3ZpbmcgdG8gdGhlIGxlZnQgb24gdGhlIHRpbWVsaW5lc1xuICAgIGlmICh0aW1lbGluZS5wYXN0Lmxlbmd0aCA+IDApXG4gICAgICAgIGxvYWRTb3VuZCh0aW1lbGluZS5wYXN0W3RpbWVsaW5lLnBhc3QubGVuZ3RoIC0gMV0pO1xuXG4gICAgLy9sb2FkIHNvdW5kIGZvciB0aGUgbmV4dCBzdGVwLCB3aGljaCBtaWdodCBiZSB0aGUgc3BlY2lhbCBsYXN0IHN0ZXBcbiAgICBpZiAodGltZWxpbmUuZnV0dXJlLmxlbmd0aCA+IDEpXG4gICAgICAgIGxvYWRTb3VuZCh0aW1lbGluZS5mdXR1cmVbdGltZWxpbmUuZnV0dXJlLmxlbmd0aCAtIDJdKTtcbiAgICBpZiAodGltZWxpbmUuZnV0dXJlLmxlbmd0aCA9PSAxKVxuICAgICAgICBsb2FkU291bmQodGltZWxpbmUubGFzdFN0ZXApO1xufVxuXG5mdW5jdGlvbiBhbGxTdGVwcygpOiBTdGVwW10ge1xuICAgIGNvbnN0IHJldHZhbCA9IHRpbWVsaW5lLnBhc3Quc2xpY2UoKS5jb25jYXQodGltZWxpbmUuZnV0dXJlLnNsaWNlKCkucmV2ZXJzZSgpKTtcblxuICAgIC8vaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIHNvdW5kLCB0aGVuIHRoZXJlIGlzIGFsc28gYW4gaXRlbSBmb3IgdGhlIGxhc3QgZXZlbnQsIHdoaWNoIGlzIG9ubHkgZm9yIGl0cyBzb3VuZFxuICAgIGlmIChPYmplY3Qua2V5cyhtYW5pZmVzdC5zb3VuZERpY3QpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dmFsLnB1c2godGltZWxpbmUubGFzdFN0ZXApO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dmFsO1xufVxuIiwiXG5cblxuZXhwb3J0IHtcbiAgICBhcHBseVRyYW5zZm9ybSxcbiAgICBnZXRUcmFuc2Zvcm0sXG4gICAgdHJhbnNmb3JtVG9TdHJpbmcsXG4gICAgaWRUcmFuc2Zvcm0sXG4gICAgZ2V0Qm91bmRSZWN0LFxuICAgIFRyYW5zZm9ybSxcbiAgICBSZWN0XG59XG5cbnR5cGUgUmVjdCA9IHtcbiAgICB4IDogbnVtYmVyLFxuICAgIHkgOiBudW1iZXIsXG4gICAgd2lkdGggOiBudW1iZXIsXG4gICAgaGVpZ2h0IDogbnVtYmVyXG59XG5cbnR5cGUgVHJhbnNmb3JtID0ge1xuICAgIHNjYWxleCA6IG51bWJlcixcbiAgICBzY2FsZXkgOiBudW1iZXIsXG4gICAgZGVsdGF4IDogbnVtYmVyLFxuICAgIGRlbHRheSA6IG51bWJlclxufVxuXG4vL2FwcGx5IHRyYW5zZm9ybSB0IHRvIHJlY3RhbmdsZSByZWN0IChmaXJzdCBzY2FsZSwgdGhlbiBzaGlmdClcbmZ1bmN0aW9uIGFwcGx5VHJhbnNmb3JtKHQgOiBUcmFuc2Zvcm0sIHJlY3QgOiBSZWN0KSA6IFJlY3Qge1xuICAgIHJldHVybiB7XG4gICAgeCA6IHJlY3QueCAqIHQuc2NhbGV4ICsgdC5kZWx0YXgsXG4gICAgeSA6IHJlY3QueSAqIHQuc2NhbGV5ICsgdC5kZWx0YXksXG4gICAgd2lkdGggOiByZWN0LndpZHRoICogdC5zY2FsZXgsXG4gICAgaGVpZ2h0IDogcmVjdC5oZWlnaHQgKiB0LnNjYWxleX1cbn1cblxuLy8gdGhlIGlucHV0IGlzIHR3byByZWN0YW5nbGVzLCB3aXRoIGVxdWFsIHByb3BvcnRpb25zXG4vLyB0aGUgb3V0cHV0IGlzIGEgdHJhbnNmb3JtIHRoYXQgbWFwcyBzb3VyY2UgdG8gdGFyZ2V0ICAgIFxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtKHNvdXJjZSA6IFJlY3QsIHRhcmdldCA6IFJlY3QpIDogVHJhbnNmb3JtIHtcbiAgICBcbiAgICBjb25zdCBzY2FsZXggPSB0YXJnZXQud2lkdGggLyBzb3VyY2Uud2lkdGg7XG4gICAgY29uc3Qgc2NhbGV5ID0gdGFyZ2V0LmhlaWdodCAvIHNvdXJjZS5oZWlnaHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NhbGV4IDogc2NhbGV4LFxuICAgICAgICBzY2FsZXkgOiBzY2FsZXksXG4gICAgICAgIGRlbHRheCA6IHRhcmdldC54IC0gc291cmNlLnggKiBzY2FsZXgsXG4gICAgICAgIGRlbHRheSA6IHRhcmdldC55IC0gc291cmNlLnkgKiBzY2FsZXlcbiAgICB9XG59XG5cbi8vY3JlYXRlcyBhIHN0cmluZyBmb3IgYSB0cmFuc2Zvcm1hdGlvbiwgdG8gYmUgdXNlZCBieSBnc2FwXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ub1N0cmluZyh0IDogVHJhbnNmb3JtKSA6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdC5kZWx0YXggKyBcIiBcIiArIHQuZGVsdGF5ICsgXCIpIHNjYWxlKFwiICsgdC5zY2FsZXggKyBcIiBcIiArIHQuc2NhbGV5ICsgXCIpXCI7XG59XG5cblxuLy90aGUgaWRlbnRpdHkgdHJhbnNmb3JtYXRpb25cbmZ1bmN0aW9uIGlkVHJhbnNmb3JtKCkgOiBUcmFuc2Zvcm0ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjYWxleDogMSxcbiAgICAgICAgc2NhbGV5OiAxLFxuICAgICAgICBkZWx0YXg6IDAsXG4gICAgICAgIGRlbHRheTogMFxuICAgIH07XG59XG5cbi8vZ2V0IHRoZSBib3VuZGluZyByZWN0IGZvciBhIHNsaWRlXG4vL2RlbGV0ZXMgdGhlIGJhY2tncm91bmQgcmVjdGFuZ2xlIGFzIGEgc2lkZSBlZmZlY3RcbmZ1bmN0aW9uIGdldEJvdW5kUmVjdChzdmcgOiBTVkdFbGVtZW50KSA6IFJlY3Qge1xuICAgIGNvbnN0IGZpcnN0UmVjdCA9IHN2Zy5maXJzdEVsZW1lbnRDaGlsZCBhcyBTVkdSZWN0RWxlbWVudDsgICAgXG4gICAgY29uc3QgYm91bmRzID0ge1xuICAgICAgICB3aWR0aCA6IChmaXJzdFJlY3Qud2lkdGggYXMgU1ZHQW5pbWF0ZWRMZW5ndGgpLmJhc2VWYWwudmFsdWUsXG4gICAgICAgIGhlaWdodCA6IChmaXJzdFJlY3QuaGVpZ2h0IGFzIFNWR0FuaW1hdGVkTGVuZ3RoKS5iYXNlVmFsLnZhbHVlLFxuICAgICAgICB4IDogMCxcbiAgICAgICAgeSA6IDBcbiAgICB9O1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGZpcnN0UmVjdC50cmFuc2Zvcm0uYmFzZVZhbCBhcyB1bmtub3duIGFzICBTVkdUcmFuc2Zvcm1bXTtcbiAgICBpZiAodHJhbnNmb3JtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYm91bmRzLnggPSB0cmFuc2Zvcm1bMF0ubWF0cml4LmU7XG4gICAgICAgIGJvdW5kcy55ID0gdHJhbnNmb3JtWzBdLm1hdHJpeC5mO1xuICAgIH1cbiAgICBmaXJzdFJlY3QucmVtb3ZlKCk7XG4gICAgcmV0dXJuIGJvdW5kcztcbn1cblxuIiwiZXhwb3J0IHtcbiAgICBtYW5pZmVzdCxcbiAgICBnZXRNYW5pZmVzdCxcbiAgICB1cGRhdGVQYWdlTnVtYmVyLFxuICAgIHVzZXJBZ2VudCxcbiAgICBuZXh0QnV0dG9uLFxuICAgIHByZXZCdXR0b24sXG4gICAgcGxheUJ1dHRvblxufVxuXG5pbXBvcnQgJy4vY3NzL3ZpZXdlci5jc3MnXG5pbXBvcnQgJy4vY3NzL2xlZnQtcGFuZWwuY3NzJ1xuaW1wb3J0ICcuL2Nzcy9wcm9ncmVzcy5jc3MnXG5pbXBvcnQgJy4vY3NzL3NrZXRjaC5jc3MnXG5cbmltcG9ydCB7XG4gICAgY3JlYXRlRXZlbnRUcmVlXG59IGZyb20gXCIuL2V2ZW50XCJcblxuXG5pbXBvcnQge1xuICAgIGluaXRQYW5lbHMsXG4gICAgdXBkYXRlUGFnZU51bWJlcixcbiAgICB1c2VyQWxlcnQsXG4gICAgdXNlckRlZmluZWRLZXlzXG59IGZyb20gXCIuL2h0bWxcIjtcblxuaW1wb3J0IHtcbiAgICBzb3VuZFN0b3AsXG4gICAgc291bmRTdGF0ZSxcbiAgICBzb3VuZFBsYXksXG4gICAgc291bmRSZWNvcmQsXG4gICAgc291bmRBZHZhbmNlLFxuICAgIHJlc2V0U291bmQsXG4gICAgc291bmRQYXVzZWQsXG4gICAgZW5kT2ZTb3VuZCxcbiAgICBTb3VuZFN0YXRlLFxuICAgIHNvdW5kTGl2ZSxcbiAgICBpbml0U291bmRUaW1lbGluZVxufSBmcm9tIFwiLi9zb3VuZFwiXG5cbmltcG9ydCB7XG4gICAgZmV0Y2hKU09OLFxuICAgIHByZXNlbnRhdGlvbkRpcixcbiAgICBwcm9iZVNlcnZlcixcbiAgICBzZW5kVG9TZXJ2ZXJcbn0gZnJvbSAnLi9maWxlcydcblxuaW1wb3J0IHtcbiAgICBMaXZlUmVjb3JkaW5nLFxuICAgIE1hbmlmZXN0XG59IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQge1xuICAgIHRvZ2dsZVNrZXRjaHBhZFxufSBmcm9tIFwiLi9za2V0Y2hwYWRcIjtcbmltcG9ydCB7IGNyZWF0ZVRpbWVsaW5lLCBjdXJyZW50U3RlcCwgZ290b1N0ZXAsIG1vdmVIZWFkLCBTdGVwLCB0aW1lbGluZSB9IGZyb20gJy4vdGltZWxpbmUnXG5cbmltcG9ydCB7IGV4cG9ydFBkZiB9IGZyb20gJy4vY2xpZW50LXByaW50J1xuXG5cbmxldCBtYW5pZmVzdDogTWFuaWZlc3Q7XG5cbi8vY2hlY2sgdGhlIHVzZXIgYWdlbnQgZm9yIGNocm9tZVxuLy9hdCB0aGUgbW9tZW50LCB0aGlzIGlzIG5vdCB1c2VkXG5mdW5jdGlvbiB1c2VyQWdlbnQoKTogc3RyaW5nIHtcbiAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiQ2hyb21lXCIpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gXCJDaHJvbWVcIjtcbiAgICB9XG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkZpcmVmb3hcIikgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBcIkZpcmVmb3hcIjtcbiAgICB9XG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIlNhZmFyaVwiKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIFwiU2FmYXJpXCI7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vL3doYXQgaGFwcGVucyB3aGVuIHRoZSBzb3VuZCBwbGF5IGJ1dHRvbiBvciB0aGUgc3BhY2UgYmFyIGFyZSBwcmVzc2VkXG5mdW5jdGlvbiBwbGF5QnV0dG9uKCk6IHZvaWQge1xuICAgIHN3aXRjaCAoc291bmRTdGF0ZSkge1xuICAgICAgICBjYXNlIFNvdW5kU3RhdGUuUGxheTpcbiAgICAgICAgICAgIHNvdW5kU3RvcCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU291bmRTdGF0ZS5SZWNvcmRpbmc6XG4gICAgICAgIGNhc2UgU291bmRTdGF0ZS5MaXZlOlxuICAgICAgICAgICAgc291bmRTdG9wKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTb3VuZFN0YXRlLk5vbmU6XG4gICAgICAgICAgICBpZiAoIWVuZE9mU291bmQoKSlcbiAgICAgICAgICAgICAgICBzb3VuZFBsYXkoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxuLy93aGF0IGhhcHBlbnMgd2hlbiB0aGUgbmV4dCBidXR0b24gb3IgcmlnaHQgYXJyb3cgYXJlIHByZXNzZWRcbmZ1bmN0aW9uIG5leHRCdXR0b24oKTogdm9pZCB7XG4gICAgaWYgKHRpbWVsaW5lLmZ1dHVyZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHN3aXRjaCAoc291bmRTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBTb3VuZFN0YXRlLlBsYXk6XG4gICAgICAgICAgICAgICAgc291bmRBZHZhbmNlKDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTb3VuZFN0YXRlLlJlY29yZGluZzpcbiAgICAgICAgICAgIGNhc2UgU291bmRTdGF0ZS5MaXZlOlxuICAgICAgICAgICAgICAgIG1vdmVIZWFkKDEpO1xuICAgICAgICAgICAgICAgIGlmIChzb3VuZFN0YXRlID09IFNvdW5kU3RhdGUuTGl2ZSlcbiAgICAgICAgICAgICAgICAgICAgc291bmRSZWNvcmQoJ2xpdmUnKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHNvdW5kUmVjb3JkKCdldmVudCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTb3VuZFN0YXRlLk5vbmU6XG4gICAgICAgICAgICAgICAgcmVzZXRTb3VuZCgpO1xuICAgICAgICAgICAgICAgIG1vdmVIZWFkKDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vL3doYXQgaGFwcGVucyB3aGVuIHRoZSBwcmV2IGJ1dHRvbiBvciBsZWZ0IGFycm93IGFyZSBwcmVzc2VkXG5mdW5jdGlvbiBwcmV2QnV0dG9uKCk6IHZvaWQge1xuICAgIGlmICh0aW1lbGluZS5wYXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3dpdGNoIChzb3VuZFN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFNvdW5kU3RhdGUuUGxheTpcbiAgICAgICAgICAgICAgICBzb3VuZEFkdmFuY2UoLTEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFNvdW5kU3RhdGUuUmVjb3JkaW5nOlxuICAgICAgICAgICAgICAgIHNvdW5kU3RvcCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTb3VuZFN0YXRlLkxpdmU6XG4gICAgICAgICAgICAgICAgbW92ZUhlYWQoLTEpO1xuICAgICAgICAgICAgICAgIHNvdW5kUmVjb3JkKCdsaXZlJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgU291bmRTdGF0ZS5Ob25lOlxuICAgICAgICAgICAgICAgIGlmIChzb3VuZFBhdXNlZCgpKVxuICAgICAgICAgICAgICAgICAgICByZXNldFNvdW5kKCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBtb3ZlSGVhZCgtMSk7XG5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy9zdGFydCBvciBzdG9wIGEgbGl2ZSByZWNvcmRpbmdcbmZ1bmN0aW9uIGxpdmVCdXR0b24oKSB7XG4gICAgaWYgKHRpbWVsaW5lLnR5cGUgPT0gJ2RlZmF1bHQnICYmIHNlcnZlckNvbm5lY3RlZCgpKSB7XG4gICAgICAgIC8vdGhlIHJlY29yZGVkIHRpbWVsaW5lcyBhcmUgcmVhZC1vbmx5XG4gICAgICAgIGlmIChzb3VuZFN0YXRlID09IFNvdW5kU3RhdGUuTGl2ZSlcbiAgICAgICAgICAgIHNvdW5kU3RvcCgpXG4gICAgICAgIGVsc2UgaWYgKHNvdW5kU3RhdGUgPT0gU291bmRTdGF0ZS5Ob25lKVxuICAgICAgICAgICAgc291bmRMaXZlKClcbiAgICB9XG59XG5cbi8vc3RhcnQgb3Igc3RvcCB0aGUgdXN1YWwgdHlwZSBvZiByZWNvcmRpbmdcbmZ1bmN0aW9uIHJlY29yZEJ1dHRvbigpIHtcbiAgICBpZiAodGltZWxpbmUudHlwZSA9PSAnZGVmYXVsdCcgJiYgc2VydmVyQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgLy90aGUgcmVjb3JkZWQgdGltZWxpbmVzIGFyZSByZWFkLW9ubHlcbiAgICAgICAgaWYgKHNvdW5kU3RhdGUgPT0gU291bmRTdGF0ZS5SZWNvcmRpbmcpIHtcbiAgICAgICAgICAgIHNvdW5kU3RvcCgpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzb3VuZFN0b3AoKVxuICAgICAgICAgICAgc291bmRSZWNvcmQoJ2V2ZW50JylcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbi8vIHRoZSBtYWluIGV2ZW50IGRpc3BhdGNoZXJcbmZ1bmN0aW9uIGtleUxpc3RlbmVyKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtaW5wdXQnKSkge1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgIGNhc2UgJ1BhZ2VEb3duJzogLy90aGlzIGlzIGZvciBzb21lIGNsaWNrZXJzXG4gICAgICAgICAgICAgICAgbmV4dEJ1dHRvbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgY2FzZSAnUGFnZVVwJzogLy90aGlzIGlzIGZvciBzb21lIGNsaWNrZXJzXG4gICAgICAgICAgICAgICAgcHJldkJ1dHRvbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICAgICAgICBwbGF5QnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHRvZ2dsZVNrZXRjaHBhZCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdyJzpcbiAgICAgICAgICAgICAgICByZWNvcmRCdXR0b24oKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgICAgICBsaXZlQnV0dG9uKClcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5IGluIHVzZXJEZWZpbmVkS2V5cylcbiAgICAgICAgICAgICAgICAgICAgdXNlckRlZmluZWRLZXlzW2V2ZW50LmtleV0oKTtcblxuXG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG4vL3RoZSBwYXRoIGlzIGFuIGFycmF5IG9mIG51bWJlcnMsIHdoaWNoIGluZGljYXRlcyB0aGUgcGF0aCBpbiB0aGUgZXZlbnQgdHJlZSB0byB0aGUgY3VycmVudCBldmVudCBcbmZ1bmN0aW9uIGdldFN0ZXBGcm9tVVJMKCk6IFN0ZXAge1xuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IChuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkuc2VhcmNoUGFyYW1zO1xuICAgIC8vd2UgdHJ5IHRvIHJldHVybiB0aGUgc3RlcCwgYnV0IHNldmVyYWwgdGhpbmdzIGNvdWxkIGdvIHdyb25nOiAoYSkgdGhlIHN0ZXAgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZCBvciBub3QgYSBudW1iZXI7IChiKSB0aGUgbnVtYmVyIGlzIG91dCBvZiBib3VuZHNcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gY3VycmVudFN0ZXAocGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgnc3RlcCcpKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvL290aGVyd2lzZSByZXR1cm4gdGhlIGZpcnN0IHN0ZXBcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGVwKCk7XG4gICAgfVxufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGdldE1hbmlmZXN0KCk6IFByb21pc2U8TWFuaWZlc3Q+IHtcbiAgICBjb25zdCBqID0gYXdhaXQgZmV0Y2hKU09OKHByZXNlbnRhdGlvbkRpcigpICsgJy9tYW5pZmVzdC5qc29uJylcbiAgICBpZiAoaiA9PSBudWxsKVxuICAgICAgICB0aHJvdyBcIlRoZSBtYW5pZmVzdCBpcyBtaXNzaW5nIGZvciB0aGUgcHJlc2VudGF0aW9uXCJcbiAgICByZXR1cm4gaiBhcyBNYW5pZmVzdFxufVxuXG5cbmxldCBzZXJ2ZXJDb25uZWN0ZWRWYXIgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2VydmVyQ29ubmVjdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzZXJ2ZXJDb25uZWN0ZWRWYXI7XG59XG5cbi8vYWRhcHQgdGhlIHZpZXcgZGVwZW5kaW5nIG9uIHdoZXRoZXIgb3Igbm90IHdlIGFyZSBhIHRhYmxldCwgb3IgY29ubmVjdGVkIHRvIHRoZSBzZXJ2ZXJcbmZ1bmN0aW9uIGNoZWNrRmVhdHVyZXMoKSB7XG4gICAgYXN5bmMgZnVuY3Rpb24gaWZTZXJ2ZXJDb25uZWN0ZWQoKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2VuZFRvU2VydmVyKHsgdHlwZTogJ3Byb2JlJyB9KTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAnc2VydmVyIHdvcmtpbmcnKSB7XG4gICAgICAgICAgICBzZXJ2ZXJDb25uZWN0ZWRWYXIgPSB0cnVlO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2F1dGhvci10YWInKS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdXRob3ItdGFiLWhlYWQnKS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZlNlcnZlckNvbm5lY3RlZCgpO1xuXG4gICAgLy9pZiBhIHRhYmxldCBpcyB1c2VkLCB0aGVuIHdlIGVuYWJsZSB0aGUgdGFibGV0IHN0eWxlLCB3aGljaCBtYWtlcyB0aGUgcGxheSBidXR0b25zIGJpZ2dlclxuICAgIGlmICgoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fFxuICAgICAgICAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCkpIC8vIG9ic29sZXRlPzogIHx8IChuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDApKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3RhYmxldCcpO1xufVxuXG5cblxuLy90aGlzIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgaWYgdGhlIHZpZXdlciBpcyBvcGVuZWQgZnJvbSB0aGUgQXBwXG4vL2N1cnJlbnRseSwgdGhlcmUgaXMgbm8gbmVlZCBmb3IgdGhhdFxuZnVuY3Rpb24gcnVuRnJvbUFwcCgpIDogdm9pZCB7XG5cbiAgICAvL3dlIGRvbid0IHVzZSBzdWNoIGNvZGUgZm9yIHRoZSBtb21lbnQsIHNpbmNlIHdlIHRyeSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzZXJ2ZXIgYXMgbXVjaCBhcyBwb3NzaWJsZS5cblxufVxuKHdpbmRvdyBhcyBhbnkpLnJ1bkZyb21BcHAgPSBydW5Gcm9tQXBwO1xuXG5cblxuXG5cbmZ1bmN0aW9uIGdldFJlY29yZGVkU3RlcHMoKTogTGl2ZVJlY29yZGluZyB7XG4gICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gKG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpKS5zZWFyY2hQYXJhbXM7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaSA9IHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ2xpdmUnKSk7XG4gICAgICAgIHJldHVybiBtYW5pZmVzdC5saXZlW2ldO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5cbi8vc3RhcnR1cCBjb2RlXG4vL2l0IHJlYWRzIHRoZSBtYW5pZmVzdCwgd2hpY2ggY29udGFpbnMgdGhlIHJvb3Qgc2xpZGUsIHRoZSBudW1iZXIgb2Ygc2xpZGVzLCB0aGUgc291bmRzLCBhbmQgdGhlbiBpdCBsb2FkcyB0aGUgZmlyc3Qgc2xpZGVcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKTogdm9pZCB7XG5cblxuICAgIC8vdGhlIG9wYWNpdHkgaXMgc2V0IHRvIDAgZm9yIGVsZW1lbnRzIG9mIHRoZSBwYWdlLCBzbyB0aGF0IGl0IGlzIG5vdCBkaXNwbGF5IHdoaWxlIHRoZSBzdHlsZXMgYXJlIGxvYWRpbmcuIE9uY2UgdGhlIGRvY3VtZW50IGhhcyBsb2FkZWQsIHdlIGNhbiBzZXQgdGhlIG9wYWNpdHkgdG8gbm9ybWFsLlxuICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGVyLXRleHQnKSBhcyBIVE1MRGl2RWxlbWVudCkucmVtb3ZlKCk7XG4gICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cHBlci1wYW5lbCcpIGFzIEhUTUxEaXZFbGVtZW50KS5zdHlsZS5vcGFjaXR5ID0gJyc7XG4gICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9ncmVzcy1wYW5lbCcpIGFzIEhUTUxEaXZFbGVtZW50KS5zdHlsZS5vcGFjaXR5ID0gJyc7XG5cbiAgICBjaGVja0ZlYXR1cmVzKCk7XG5cbiAgICBnZXRNYW5pZmVzdCgpLnRoZW4obSA9PiB7XG4gICAgICAgIG1hbmlmZXN0ID0gbTtcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBtYW5pZmVzdC5wcmVzZW50YXRpb247XG5cbiAgICAgICAgLy9zZXRzIHVwIHRoZSBldmVudCB0cmVlLCBjdXJyZW50bHkgdGhpcyBqdXN0IG1lYW5zIGRlZmluaW5nIHRoZSBwYXJlbnQgcHJvcGVydGllc1xuICAgICAgICBjcmVhdGVFdmVudFRyZWUoKTtcblxuICAgICAgICAvL2lmIHRoZSB1cmwgaGFkIGEgbGl2ZSB0aW1lbGluZSwgdGhlbiBnZXQgaXRcbiAgICAgICAgY29uc3QgcmVjb3JkZWQgPSBnZXRSZWNvcmRlZFN0ZXBzKCk7XG4gICAgICAgIC8vaW5pdGlhbGl6ZSB0aGUgc3RlcHMgaW4gdGhlIHRpbWVsaW5lXG4gICAgICAgIGNyZWF0ZVRpbWVsaW5lKHJlY29yZGVkKTtcbiAgICAgICAgLy9hZGQgdGhlIHNvdW5kIGRhdGEsIGVzcGVjaWFsbHkgZHVyYXRpb25zXG4gICAgICAgIGluaXRTb3VuZFRpbWVsaW5lKHJlY29yZGVkKTtcblxuICAgICAgICAvL3NldCB1cCB0aGUgbGVmdCBhbmQgYm90dG9tIGh0bWwgcGFuZWxzXG4gICAgICAgIGluaXRQYW5lbHMoKTtcbiAgICAgICAgLy9ldmVudCBsaXN0ZW5lciBmb3Iga2V5c1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlMaXN0ZW5lcik7XG5cbiAgICAgICAgLy9zdGFydCB0aGUgcHJlc2VudGF0aW9uLCB1c2luZyB0aGUgc3RlcCBmcm9tIHRoZSB1cmwsIG9yIHRoZSBmaXJzdCBzdGVwIGJ5IGRlZmF1bHQgXG4gICAgICAgIGNvbnN0IHN0ZXAgPSBnZXRTdGVwRnJvbVVSTCgpO1xuICAgICAgICBnb3RvU3RlcChzdGVwKS50aGVuKCgpID0+IHsgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdmcnKSBhcyBIVE1MRGl2RWxlbWVudCkuc3R5bGUub3BhY2l0eSA9ICcxJyB9KTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdXNlckFsZXJ0KGUpKVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxOSk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwiaXNBcnJheSIsInZhbHVlIiwiQXJyYXkiLCJnZXRUYWciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc0RlZmluZWQiLCJpc0JsYW5rIiwidHJpbSIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJNSVNTSU5HX0tFWV9QUk9QRVJUWSIsIm5hbWUiLCJJTlZBTElEX0tFWV9XRUlHSFRfVkFMVUUiLCJrZXkiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsIktleVN0b3JlIiwiY29uc3RydWN0b3IiLCJrZXlzIiwiX2tleXMiLCJfa2V5TWFwIiwidG90YWxXZWlnaHQiLCJmb3JFYWNoIiwib2JqIiwiY3JlYXRlS2V5Iiwid2VpZ2h0IiwiZ2V0Iiwia2V5SWQiLCJ0b0pTT04iLCJwYXRoIiwic3JjIiwiZ2V0Rm4iLCJjcmVhdGVLZXlQYXRoIiwiY3JlYXRlS2V5SWQiLCJFcnJvciIsInNwbGl0IiwiQ29uZmlnIiwiaXNDYXNlU2Vuc2l0aXZlIiwiaW5jbHVkZVNjb3JlIiwic2hvdWxkU29ydCIsInNvcnRGbiIsImEiLCJiIiwic2NvcmUiLCJpZHgiLCJpbmNsdWRlTWF0Y2hlcyIsImZpbmRBbGxNYXRjaGVzIiwibWluTWF0Y2hDaGFyTGVuZ3RoIiwibG9jYXRpb24iLCJ0aHJlc2hvbGQiLCJkaXN0YW5jZSIsInVzZUV4dGVuZGVkU2VhcmNoIiwiYXJyIiwiZGVlcEdldCIsImluZGV4IiwiaXNPYmplY3RMaWtlIiwiaXNCb29sZWFuIiwicmVzdWx0IiwiYmFzZVRvU3RyaW5nIiwibGVuIiwiaWdub3JlTG9jYXRpb24iLCJpZ25vcmVGaWVsZE5vcm0iLCJmaWVsZE5vcm1XZWlnaHQiLCJTUEFDRSIsIkZ1c2VJbmRleCIsIm5vcm0iLCJtYW50aXNzYSIsImNhY2hlIiwiTWFwIiwibSIsIk1hdGgiLCJwb3ciLCJudW1Ub2tlbnMiLCJtYXRjaCIsImhhcyIsIm4iLCJwYXJzZUZsb2F0Iiwicm91bmQiLCJzZXQiLCJjbGVhciIsImlzQ3JlYXRlZCIsInNldEluZGV4UmVjb3JkcyIsInNldFNvdXJjZXMiLCJkb2NzIiwicmVjb3JkcyIsInNldEtleXMiLCJfa2V5c01hcCIsImNyZWF0ZSIsImRvYyIsImRvY0luZGV4IiwiX2FkZFN0cmluZyIsIl9hZGRPYmplY3QiLCJhZGQiLCJzaXplIiwicmVtb3ZlQXQiLCJzcGxpY2UiLCJnZXRWYWx1ZUZvckl0ZW1BdEtleUlkIiwicmVjb3JkIiwidiIsIiQiLCJrZXlJbmRleCIsInN1YlJlY29yZHMiLCJzdGFjayIsIm5lc3RlZEFyckluZGV4IiwicG9wIiwic3ViUmVjb3JkIiwiY3JlYXRlSW5kZXgiLCJteUluZGV4IiwiY29tcHV0ZVNjb3JlJDEiLCJwYXR0ZXJuIiwiZXJyb3JzIiwiY3VycmVudExvY2F0aW9uIiwiZXhwZWN0ZWRMb2NhdGlvbiIsImFjY3VyYWN5IiwicHJveGltaXR5IiwiYWJzIiwiTUFYX0JJVFMiLCJjcmVhdGVQYXR0ZXJuQWxwaGFiZXQiLCJtYXNrIiwiY2hhciIsImNoYXJBdCIsIkJpdGFwU2VhcmNoIiwib3B0aW9ucyIsInRvTG93ZXJDYXNlIiwiY2h1bmtzIiwiYWRkQ2h1bmsiLCJzdGFydEluZGV4IiwiYWxwaGFiZXQiLCJyZW1haW5kZXIiLCJlbmQiLCJzdWJzdHIiLCJzZWFyY2hJbiIsInRleHQiLCJpc01hdGNoIiwiaW5kaWNlcyIsImFsbEluZGljZXMiLCJ0b3RhbFNjb3JlIiwiaGFzTWF0Y2hlcyIsInBhdHRlcm5BbHBoYWJldCIsInBhdHRlcm5MZW4iLCJ0ZXh0TGVuIiwibWF4IiwibWluIiwiY3VycmVudFRocmVzaG9sZCIsImJlc3RMb2NhdGlvbiIsImNvbXB1dGVNYXRjaGVzIiwibWF0Y2hNYXNrIiwiaW5kZXhPZiIsImxhc3RCaXRBcnIiLCJmaW5hbFNjb3JlIiwiYmluTWF4IiwiYmluTWluIiwiYmluTWlkIiwiZmxvb3IiLCJzdGFydCIsImZpbmlzaCIsImJpdEFyciIsImoiLCJjaGFyTWF0Y2giLCJtYXRjaG1hc2siLCJjb252ZXJ0TWFza1RvSW5kaWNlcyIsInNlYXJjaCIsIkJhc2VNYXRjaCIsImlzTXVsdGlNYXRjaCIsImdldE1hdGNoIiwibXVsdGlSZWdleCIsImlzU2luZ2xlTWF0Y2giLCJzaW5nbGVSZWdleCIsImV4cCIsIm1hdGNoZXMiLCJGdXp6eU1hdGNoIiwic3VwZXIiLCJfYml0YXBTZWFyY2giLCJ0eXBlIiwiSW5jbHVkZU1hdGNoIiwic2VhcmNoZXJzIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwic2VhcmNoZXJzTGVuIiwiU1BBQ0VfUkUiLCJNdWx0aU1hdGNoU2V0IiwiU2V0IiwicmVnaXN0ZXJlZFNlYXJjaGVycyIsImNyZWF0ZVNlYXJjaGVyIiwic2VhcmNoZXJDbGFzcyIsImNvbmRpdGlvbiIsIkxvZ2ljYWxPcGVyYXRvciIsIktleVR5cGUiLCJpc0V4cHJlc3Npb24iLCJxdWVyeSIsImNvbnZlcnRUb0V4cGxpY2l0IiwicGFyc2UiLCJhdXRvIiwibmV4dCIsImlzUXVlcnlQYXRoIiwiaXNQYXRoIiwiaXNMZWFmIiwiTE9HSUNBTF9TRUFSQ0hfSU5WQUxJRF9RVUVSWV9GT1JfS0VZIiwic2VhcmNoZXIiLCJub2RlIiwiY2hpbGRyZW4iLCJvcGVyYXRvciIsInRyYW5zZm9ybU1hdGNoZXMiLCJyZWZJbmRleCIsInRyYW5zZm9ybVNjb3JlIiwiRnVzZSIsIl9rZXlTdG9yZSIsInNldENvbGxlY3Rpb24iLCJfZG9jcyIsIl9teUluZGV4IiwicmVtb3ZlIiwicHJlZGljYXRlIiwicmVzdWx0cyIsImdldEluZGV4IiwibGltaXQiLCJfc2VhcmNoU3RyaW5nTGlzdCIsIl9zZWFyY2hPYmplY3RMaXN0IiwiX3NlYXJjaExvZ2ljYWwiLCJOdW1iZXIiLCJFUFNJTE9OIiwiY29tcHV0ZVNjb3JlIiwic29ydCIsInNsaWNlIiwidHJhbnNmb3JtZXJzIiwidHJhbnNmb3JtZXIiLCJmb3JtYXQiLCJleHByZXNzaW9uIiwiZXZhbHVhdGUiLCJfZmluZE1hdGNoZXMiLCJyZXMiLCJjaGlsZCIsInJlc3VsdE1hcCIsImV4cFJlc3VsdHMiLCJ2ZXJzaW9uIiwicGFyc2VJbmRleCIsImNvbmZpZyIsInBhcnNlUXVlcnkiLCJhcmdzIiwicmVnaXN0ZXIiLCJmaWx0ZXIiLCJxdWVyeUl0ZW0iLCJmb3VuZCIsInRva2VuIiwiXyIsIm51bU1hdGNoZXMiLCJxTGVuIiwicExlbiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIl9zdXBwcmVzc092ZXJ3cml0ZXMiLCJfcmV2ZXJ0aW5nIiwiX2NvbnRleHQiLCJfZ2xvYmFsVGltZWxpbmUiLCJfd2luIiwiX2NvcmVJbml0dGVkIiwiX2RvYyIsIl9jb3JlUmVhZHkiLCJfbGFzdFJlbmRlcmVkRnJhbWUiLCJfcXVpY2tUd2VlbiIsIl90aWNrZXJBY3RpdmUiLCJjIiwibjEiLCJlYXNlT3V0IiwiX2NvbmZpZyIsImF1dG9TbGVlcCIsImZvcmNlM0QiLCJudWxsVGFyZ2V0V2FybiIsInVuaXRzIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsImR1cmF0aW9uIiwib3ZlcndyaXRlIiwiZGVsYXkiLCJfYmlnTnVtIiwiX3RpbnlOdW0iLCJfMlBJIiwiUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJzcXJ0IiwiX2NvcyIsImNvcyIsIl9zaW4iLCJzaW4iLCJfaXNTdHJpbmciLCJfaXNGdW5jdGlvbiIsIl9pc051bWJlciIsIl9pc1VuZGVmaW5lZCIsIl9pc09iamVjdCIsIl9pc05vdEZhbHNlIiwiX3dpbmRvd0V4aXN0cyIsIndpbmRvdyIsIl9pc0Z1bmNPclN0cmluZyIsIl9pc1R5cGVkQXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIl9pc0FycmF5IiwiX3N0cmljdE51bUV4cCIsIl9udW1FeHAiLCJfbnVtV2l0aFVuaXRFeHAiLCJfY29tcGxleFN0cmluZ051bUV4cCIsIl9yZWxFeHAiLCJfZGVsaW1pdGVkVmFsdWVFeHAiLCJfdW5pdEV4cCIsIl9nbG9iYWxzIiwiX2luc3RhbGxTY29wZSIsIl9pbnN0YWxsIiwic2NvcGUiLCJfbWVyZ2UiLCJnc2FwIiwiX21pc3NpbmdQbHVnaW4iLCJwcm9wZXJ0eSIsImNvbnNvbGUiLCJ3YXJuIiwiX3dhcm4iLCJtZXNzYWdlIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwiX2VtcHR5RnVuYyIsIl9zdGFydEF0UmV2ZXJ0Q29uZmlnIiwic3VwcHJlc3NFdmVudHMiLCJpc1N0YXJ0Iiwia2lsbCIsIl9yZXZlcnRDb25maWdOb0tpbGwiLCJfcmV2ZXJ0Q29uZmlnIiwiX3Jlc2VydmVkUHJvcHMiLCJfbGF6eVR3ZWVucyIsIl9sYXp5TG9va3VwIiwiX3BsdWdpbnMiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJ0YXJnZXRzIiwiaGFybmVzc1BsdWdpbiIsInRhcmdldCIsIl9nc2FwIiwiaGFybmVzcyIsInRhcmdldFRlc3QiLCJHU0NhY2hlIiwiX2dldENhY2hlIiwidG9BcnJheSIsIl9nZXRQcm9wZXJ0eSIsImdldEF0dHJpYnV0ZSIsIl9mb3JFYWNoTmFtZSIsIm5hbWVzIiwiZnVuYyIsIl9yb3VuZCIsIl9yb3VuZFByZWNpc2UiLCJfcGFyc2VSZWxhdGl2ZSIsIl9hcnJheUNvbnRhaW5zQW55IiwidG9TZWFyY2giLCJ0b0ZpbmQiLCJsIiwiX2xhenlSZW5kZXIiLCJ0d2VlbiIsIl9sYXp5IiwicmVuZGVyIiwiX2xhenlTYWZlUmVuZGVyIiwiYW5pbWF0aW9uIiwidGltZSIsImZvcmNlIiwiX2luaXR0ZWQiLCJfc3RhcnRBdCIsIl9udW1lcmljSWZQb3NzaWJsZSIsIl9wYXNzVGhyb3VnaCIsInAiLCJfc2V0RGVmYXVsdHMiLCJkZWZhdWx0cyIsImJhc2UiLCJ0b01lcmdlIiwiX21lcmdlRGVlcCIsIl9jb3B5RXhjbHVkaW5nIiwiZXhjbHVkaW5nIiwiY29weSIsIl9pbmhlcml0RGVmYXVsdHMiLCJ2YXJzIiwiZXhjbHVkZUR1cmF0aW9uIiwicGFyZW50Iiwia2V5ZnJhbWVzIiwiaW5oZXJpdCIsIl9kcCIsIl9hZGRMaW5rZWRMaXN0SXRlbSIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwidCIsInByZXYiLCJfcHJldiIsIl9uZXh0IiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwiX3JlbW92ZUZyb21QYXJlbnQiLCJvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIiwiYXV0b1JlbW92ZUNoaWxkcmVuIiwiX2FjdCIsIl91bmNhY2hlIiwiX2VuZCIsIl9kdXIiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsInJldmVydCIsImltbWVkaWF0ZVJlbmRlciIsImF1dG9SZXZlcnQiLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwidG90YWxEdXJhdGlvbiIsIl90RHVyIiwiX3NldEVuZCIsIl9ydHMiLCJfYWxpZ25QbGF5aGVhZCIsInNtb290aENoaWxkVGltaW5nIiwiX3RpbWUiLCJfcG9zdEFkZENoZWNrcyIsInRpbWVsaW5lIiwicmF3VGltZSIsIl9jbGFtcCIsIl96VGltZSIsIl9hZGRUb1RpbWVsaW5lIiwicG9zaXRpb24iLCJza2lwQ2hlY2tzIiwiX3BhcnNlUG9zaXRpb24iLCJfZGVsYXkiLCJ0aW1lU2NhbGUiLCJfc29ydCIsIl9pc0Zyb21PckZyb21TdGFydCIsIl9yZWNlbnQiLCJfc2Nyb2xsVHJpZ2dlciIsInRyaWdnZXIiLCJTY3JvbGxUcmlnZ2VyIiwiX2F0dGVtcHRJbml0VHdlZW4iLCJfaW5pdFR3ZWVuIiwiX3B0IiwibGF6eSIsIl90aWNrZXIiLCJmcmFtZSIsIl9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQiLCJfcmVmIiwiX2xvY2siLCJfcmVmMiIsIl9zZXREdXJhdGlvbiIsInNraXBVbmNhY2hlIiwibGVhdmVQbGF5aGVhZCIsInJlcGVhdCIsImR1ciIsInRvdGFsUHJvZ3Jlc3MiLCJfb25VcGRhdGVUb3RhbER1cmF0aW9uIiwiVGltZWxpbmUiLCJfemVyb1Bvc2l0aW9uIiwiZW5kVGltZSIsInBlcmNlbnRBbmltYXRpb24iLCJvZmZzZXQiLCJpc1BlcmNlbnQiLCJsYWJlbHMiLCJyZWNlbnQiLCJjbGlwcGVkRHVyYXRpb24iLCJpc05hTiIsInJlcGxhY2UiLCJfY3JlYXRlVHdlZW5UeXBlIiwicGFyYW1zIiwiaXJWYXJzIiwiaXNMZWdhY3kiLCJ2YXJzSW5kZXgiLCJydW5CYWNrd2FyZHMiLCJzdGFydEF0IiwiVHdlZW4iLCJfY29uZGl0aW9uYWxSZXR1cm4iLCJnZXRVbml0IiwiZXhlYyIsIl9zbGljZSIsIl9pc0FycmF5TGlrZSIsIm5vbkVtcHR5Iiwibm9kZVR5cGUiLCJsZWF2ZVN0cmluZ3MiLCJzZWxlY3RvciIsIl93YWtlIiwiYXIiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsImFwcGx5IiwiX2ZsYXR0ZW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJjdXJyZW50IiwibmF0aXZlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzaHVmZmxlIiwicmFuZG9tIiwiZGlzdHJpYnV0ZSIsImVhY2giLCJlYXNlIiwiX3BhcnNlRWFzZSIsImZyb20iLCJpc0RlY2ltYWwiLCJyYXRpb3MiLCJheGlzIiwicmF0aW9YIiwicmF0aW9ZIiwiY2VudGVyIiwiZWRnZXMiLCJvcmlnaW5YIiwib3JpZ2luWSIsIngiLCJ5IiwiZCIsIndyYXBBdCIsImRpc3RhbmNlcyIsImdyaWQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwiYW1vdW50IiwidSIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJyYXciLCJzbmFwIiwic25hcFRvIiwicmFkaXVzIiwiaXMyRCIsInZhbHVlcyIsImluY3JlbWVudCIsImR4IiwiZHkiLCJjbG9zZXN0Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsIl93cmFwQXJyYXkiLCJ3cmFwcGVyIiwiX3JlcGxhY2VSYW5kb20iLCJudW1zIiwicyIsIm1hcFJhbmdlIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImluUmFuZ2UiLCJvdXRSYW5nZSIsIl9nZXRMYWJlbEluRGlyZWN0aW9uIiwiZnJvbVRpbWUiLCJiYWNrd2FyZCIsImxhYmVsIiwiX2NhbGxiYWNrIiwiZXhlY3V0ZUxhenlGaXJzdCIsImNhbGxiYWNrIiwicHJldkNvbnRleHQiLCJjb250ZXh0IiwiX2N0eCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsInByb2dyZXNzIiwiX3JlZ2lzdGVyUGx1Z2luUXVldWUiLCJfY3JlYXRlUGx1Z2luIiwiaXNGdW5jIiwiUGx1Z2luIiwiaW5pdCIsIl9wcm9wcyIsImluc3RhbmNlRGVmYXVsdHMiLCJfcmVuZGVyUHJvcFR3ZWVucyIsIl9hZGRQcm9wVHdlZW4iLCJfa2lsbFByb3BUd2VlbnNPZiIsIm1vZGlmaWVyIiwiX2FkZFBsdWdpbk1vZGlmaWVyIiwicmF3VmFycyIsInN0YXRpY3MiLCJnZXRTZXR0ZXIiLCJfZ2V0U2V0dGVyIiwiYWxpYXNlcyIsInByb3AiLCJ0b1VwcGVyQ2FzZSIsIlByb3BUd2VlbiIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsInllbGxvdyIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJncmVlbiIsInJlZCIsInBpbmsiLCJjeWFuIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwiaCIsIm0xIiwibTIiLCJzcGxpdENvbG9yIiwidG9IU0wiLCJmb3JjZUFscGhhIiwiciIsImciLCJ3YXNIU0wiLCJwYXJzZUludCIsIl9jb2xvck9yZGVyRGF0YSIsIl9jb2xvckV4cCIsIl9mb3JtYXRDb2xvcnMiLCJvcmRlck1hdGNoRGF0YSIsInNoZWxsIiwiY29sb3JzIiwiY29sb3IiLCJzaGlmdCIsIlJlZ0V4cCIsIl9oc2xFeHAiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJjb21iaW5lZCIsImxhc3RJbmRleCIsInRlc3QiLCJfaWQiLCJfcmVxIiwiX3JhZiIsIl9zZWxmIiwiX2RlbHRhIiwiX2kiLCJfZ2V0VGltZSIsIkRhdGUiLCJub3ciLCJfbGFnVGhyZXNob2xkIiwiX2FkanVzdGVkTGFnIiwiX3N0YXJ0VGltZSIsIl9sYXN0VXBkYXRlIiwiX2dhcCIsIl9uZXh0VGltZSIsIl9saXN0ZW5lcnMiLCJfdGljayIsIm92ZXJsYXAiLCJkaXNwYXRjaCIsImVsYXBzZWQiLCJtYW51YWwiLCJ0aWNrIiwiZGVsdGFSYXRpbyIsImZwcyIsIndha2UiLCJkb2N1bWVudCIsImdzYXBWZXJzaW9ucyIsIkdyZWVuU29ja0dsb2JhbHMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzbGVlcCIsImYiLCJzZXRUaW1lb3V0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJsYWdTbW9vdGhpbmciLCJhZGp1c3RlZExhZyIsIkluZmluaXR5IiwiX2ZwcyIsIm9uY2UiLCJwcmlvcml0aXplIiwiX2Vhc2VNYXAiLCJfY3VzdG9tRWFzZUV4cCIsIl9xdW90ZXNFeHAiLCJfcGFyc2VPYmplY3RJblN0cmluZyIsInZhbCIsInBhcnNlZFZhbCIsImxhc3RJbmRleE9mIiwiX3Byb3BhZ2F0ZVlveW9FYXNlIiwiaXNZb3lvIiwiX2ZpcnN0IiwieW95b0Vhc2UiLCJfeW95byIsIl9lYXNlIiwiX3lFYXNlIiwiZGVmYXVsdEVhc2UiLCJvcGVuIiwiY2xvc2UiLCJuZXN0ZWQiLCJzdWJzdHJpbmciLCJfQ0UiLCJfY29uZmlnRWFzZUZyb21TdHJpbmciLCJfaW5zZXJ0RWFzZSIsImVhc2VJbiIsImVhc2VJbk91dCIsImxvd2VyY2FzZU5hbWUiLCJfZWFzZUluT3V0RnJvbU91dCIsIl9jb25maWdFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwicDEiLCJwMiIsInAzIiwiYXNpbiIsIl9jb25maWdCYWNrIiwib3ZlcnNob290IiwicG93ZXIiLCJMaW5lYXIiLCJlYXNlTm9uZSIsIm5vbmUiLCJTdGVwcGVkRWFzZSIsInN0ZXBzIiwiaW1tZWRpYXRlU3RhcnQiLCJBbmltYXRpb24iLCJyZXBlYXREZWxheSIsInlveW8iLCJfcHJvdG8iLCJzdGFydFRpbWUiLCJhcmd1bWVudHMiLCJfdG90YWxUaW1lIiwiX3B0TG9va3VwIiwiX3BUaW1lIiwicmF0aW8iLCJpdGVyYXRpb24iLCJfcHMiLCJfcmVjYWNoZUFuY2VzdG9ycyIsInBhdXNlZCIsImluY2x1ZGVSZXBlYXRzIiwid3JhcFJlcGVhdHMiLCJwcmV2SXNSZXZlcnRpbmciLCJnbG9iYWxUaW1lIiwiX3NhdCIsInNlZWsiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicGxheSIsInJldmVyc2VkIiwicmV2ZXJzZSIsInBhdXNlIiwiYXRUaW1lIiwicmVzdW1lIiwiaW52YWxpZGF0ZSIsImlzQWN0aXZlIiwiZXZlbnRDYWxsYmFjayIsIl9vblVwZGF0ZSIsInRoZW4iLCJvbkZ1bGZpbGxlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiX3Jlc29sdmUiLCJfdGhlbiIsIl9wcm9tIiwiX0FuaW1hdGlvbiIsIl90aGlzIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsInRvIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGUiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwicHJldlBhdXNlZCIsInBhdXNlVHdlZW4iLCJwcmV2U3RhcnQiLCJwcmV2SXRlcmF0aW9uIiwicHJldlRpbWUiLCJ0RHVyIiwiY3Jvc3NpbmdTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwicmVwZWF0UmVmcmVzaCIsIm9uUmVwZWF0IiwiX2hhc1BhdXNlIiwiX2ZvcmNpbmciLCJfbGFzdCIsIl9maW5kTmV4dFBhdXNlVHdlZW4iLCJvblVwZGF0ZSIsImFkanVzdGVkVGltZSIsIl90aGlzMiIsImFkZExhYmVsIiwiZ2V0Q2hpbGRyZW4iLCJ0d2VlbnMiLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwiZ2V0QnlJZCIsImFuaW1hdGlvbnMiLCJyZW1vdmVMYWJlbCIsImtpbGxUd2VlbnNPZiIsIl90b3RhbFRpbWUyIiwiYWRkUGF1c2UiLCJyZW1vdmVQYXVzZSIsInByb3BzIiwib25seUFjdGl2ZSIsImdldFR3ZWVuc09mIiwiX292ZXJ3cml0aW5nVHdlZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwiaW5pdHRlZCIsInRsIiwiX3ZhcnMiLCJfb25TdGFydCIsIm9uU3RhcnQiLCJvblN0YXJ0UGFyYW1zIiwidHdlZW5Gcm9tVG8iLCJmcm9tUG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwibmV4dExhYmVsIiwiYWZ0ZXJUaW1lIiwicHJldmlvdXNMYWJlbCIsImJlZm9yZVRpbWUiLCJjdXJyZW50TGFiZWwiLCJzaGlmdENoaWxkcmVuIiwiYWRqdXN0TGFiZWxzIiwic29mdCIsImluY2x1ZGVMYWJlbHMiLCJ1cGRhdGVSb290IiwiX2ZvcmNlQWxsUHJvcFR3ZWVucyIsIl9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuIiwic2V0dGVyIiwic3RyaW5nRmlsdGVyIiwiZnVuY1BhcmFtIiwic3RhcnROdW1zIiwiZW5kTnVtIiwiY2h1bmsiLCJzdGFydE51bSIsImhhc1JhbmRvbSIsInB0IiwiX3JlbmRlckNvbXBsZXhTdHJpbmciLCJtYXRjaEluZGV4IiwiZSIsImZwIiwib3B0aW9uYWwiLCJjdXJyZW50VmFsdWUiLCJwYXJzZWRTdGFydCIsIl9zZXR0ZXJGdW5jV2l0aFBhcmFtIiwiX3NldHRlckZ1bmMiLCJfc2V0dGVyUGxhaW4iLCJfcmVuZGVyQm9vbGVhbiIsIl9yZW5kZXJQbGFpbiIsIl9jaGVja1BsdWdpbiIsInBsdWdpbiIsInB0TG9va3VwIiwiX3BhcnNlRnVuY09yU3RyaW5nIiwic3R5bGUiLCJfcHJvY2Vzc1ZhcnMiLCJwcmlvcml0eSIsImNsZWFuVmFycyIsImhhc1ByaW9yaXR5IiwiZ3NEYXRhIiwiaGFybmVzc1ZhcnMiLCJvdmVyd3JpdHRlbiIsInByZXZTdGFydEF0IiwiZnVsbFRhcmdldHMiLCJhdXRvT3ZlcndyaXRlIiwiX292ZXJ3cml0ZSIsIl9mcm9tIiwiX3B0Q2FjaGUiLCJfb3AiLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiX29uSW5pdCIsIl9wYXJzZUtleWZyYW1lIiwiYWxsUHJvcHMiLCJlYXNlRWFjaCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJfdGhpczMkdmFycyIsImtmIiwiX3Byb3RvMyIsImlzTmVnYXRpdmUiLCJwcmV2UmF0aW8iLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJyZXNldFRvIiwic3RhcnRJc1JlbGF0aXZlIiwic2tpcFJlY3Vyc2lvbiIsInJvb3RQVCIsImxvb2t1cCIsInB0Q2FjaGUiLCJfdXBkYXRlUHJvcFR3ZWVucyIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsImExIiwiYTIiLCJfYXJyYXlzTWF0Y2giLCJwcm9wZXJ0eUFsaWFzZXMiLCJfYWRkQWxpYXNlc1RvVmFycyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwib3AiLCJkZXAiLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwiZmlyc3QiLCJsYXN0IiwicHIiLCJjaGFuZ2UiLCJyZW5kZXJlciIsIlR3ZWVuTWF4IiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJfbWVkaWEiLCJfZW1wdHlBcnJheSIsIl9sYXN0TWVkaWFUaW1lIiwiX2NvbnRleHRJRCIsIl9kaXNwYXRjaCIsIl9vbk1lZGlhQ2hhbmdlIiwiYW55TWF0Y2giLCJ0b2dnbGVkIiwicXVlcmllcyIsImNvbmRpdGlvbnMiLCJtYXRjaE1lZGlhIiwib25NYXRjaCIsIkNvbnRleHQiLCJfciIsImlzUmV2ZXJ0ZWQiLCJfcHJvdG81IiwicHJldlNlbGVjdG9yIiwiaWdub3JlIiwiZ2V0VHdlZW5zIiwiX3RoaXM0IiwibyIsIk1hdGNoTWVkaWEiLCJjb250ZXh0cyIsIl9wcm90bzYiLCJtcSIsImFjdGl2ZSIsImNvbmQiLCJhZGRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWdpc3RlclBsdWdpbiIsIl9sZW4yIiwiX2tleTIiLCJnZXRQcm9wZXJ0eSIsInVuaXQiLCJ1bmNhY2hlIiwiZ2V0dGVyIiwicXVpY2tTZXR0ZXIiLCJzZXR0ZXJzIiwicXVpY2tUbyIsIl9tZXJnZTIiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsImVmZmVjdCIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInV0aWxzIiwid3JhcCIsInJhbmdlIiwid3JhcFlveW8iLCJ0b3RhbCIsIm5vcm1hbGl6ZSIsImNsYW1wIiwicGlwZSIsIl9sZW4iLCJmdW5jdGlvbnMiLCJfa2V5IiwicmVkdWNlIiwidW5pdGl6ZSIsImludGVycG9sYXRlIiwibXV0YXRlIiwiaW50ZXJwb2xhdG9ycyIsImlsIiwibWFzdGVyIiwiaW5zdGFsbCIsImVmZmVjdHMiLCJ0aWNrZXIiLCJnbG9iYWxUaW1lbGluZSIsImNvcmUiLCJnbG9iYWxzIiwiZ2V0Q2FjaGUiLCJyZXZlcnRpbmciLCJ0b0FkZCIsInN1cHByZXNzT3ZlcndyaXRlcyIsIl9nZXRQbHVnaW5Qcm9wVHdlZW4iLCJfYnVpbGRNb2RpZmllclBsdWdpbiIsInRlbXAiLCJtb2RpZmllcnMiLCJfYWRkTW9kaWZpZXJzIiwiX2RvY0VsZW1lbnQiLCJfcGx1Z2luSW5pdHRlZCIsIl90ZW1wRGl2IiwiX3JlY2VudFNldHRlclBsdWdpbiIsIl9zdXBwb3J0czNEIiwiUG93ZXIwIiwiUG93ZXIxIiwiUG93ZXIyIiwiUG93ZXIzIiwiUG93ZXI0IiwiUXVhZCIsIkN1YmljIiwiUXVhcnQiLCJRdWludCIsIlN0cm9uZyIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiX3RyYW5zZm9ybVByb3BzIiwiX1JBRDJERUciLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2NhcHNFeHAiLCJfaG9yaXpvbnRhbEV4cCIsIl9jb21wbGV4RXhwIiwiX3Byb3BlcnR5QWxpYXNlcyIsImF1dG9BbHBoYSIsInNjYWxlIiwiYWxwaGEiLCJfcmVuZGVyQ1NTUHJvcCIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsIl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQiLCJfc2V0dGVyQ1NTU3R5bGUiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9zZXR0ZXJTY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsIl9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIiLCJyZW5kZXJUcmFuc2Zvcm0iLCJfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciIsIl90cmFuc2Zvcm1Qcm9wIiwiX3RyYW5zZm9ybU9yaWdpblByb3AiLCJfc2F2ZVN0eWxlIiwiaXNOb3RDU1MiLCJ0Zm0iLCJ0cmFuc2Zvcm0iLCJfZ2V0Iiwiek9yaWdpbiIsInN2ZyIsInN2Z28iLCJfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlIiwicmVtb3ZlUHJvcGVydHkiLCJfcmV2ZXJ0U3R5bGUiLCJfZ2V0U3R5bGVTYXZlciIsInByb3BlcnRpZXMiLCJzYXZlciIsInNhdmUiLCJfY3JlYXRlRWxlbWVudCIsIm5zIiwiY3JlYXRlRWxlbWVudE5TIiwiX2dldENvbXB1dGVkUHJvcGVydHkiLCJza2lwUHJlZml4RmFsbGJhY2siLCJjcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX2NoZWNrUHJvcFByZWZpeCIsIl9wcmVmaXhlcyIsImVsZW1lbnQiLCJwcmVmZXJQcmVmaXgiLCJfaW5pdENvcmUiLCJkb2N1bWVudEVsZW1lbnQiLCJjc3NUZXh0IiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJiYm94Iiwib3duZXJTVkdFbGVtZW50Iiwib2xkUGFyZW50IiwicGFyZW50Tm9kZSIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImFwcGVuZENoaWxkIiwiZGlzcGxheSIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsIl9nZXRBdHRyaWJ1dGVGYWxsYmFja3MiLCJhdHRyaWJ1dGVzQXJyYXkiLCJoYXNBdHRyaWJ1dGUiLCJfZ2V0QkJveCIsImJvdW5kcyIsImVycm9yIiwid2lkdGgiLCJoZWlnaHQiLCJfaXNTVkciLCJnZXRDVE0iLCJfcmVtb3ZlUHJvcGVydHkiLCJmaXJzdDJDaGFycyIsInJlbW92ZUF0dHJpYnV0ZSIsIl9hZGROb25Ud2VlbmluZ1BUIiwiYmVnaW5uaW5nIiwib25seVNldEF0RW5kIiwiX25vbkNvbnZlcnRpYmxlVW5pdHMiLCJkZWciLCJyYWQiLCJ0dXJuIiwiX25vblN0YW5kYXJkTGF5b3V0cyIsImZsZXgiLCJfY29udmVydFRvVW5pdCIsInB4IiwiaXNTVkciLCJjdXJWYWx1ZSIsImN1clVuaXQiLCJob3Jpem9udGFsIiwiaXNSb290U1ZHIiwidGFnTmFtZSIsIm1lYXN1cmVQcm9wZXJ0eSIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwiYm9keSIsIl9wYXJzZVRyYW5zZm9ybSIsIm9yaWdpbiIsIl9maXJzdFR3b09ubHkiLCJfc3BlY2lhbFByb3BzIiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInN0YXJ0VmFsdWVzIiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiZW5kVW5pdCIsInN0YXJ0VW5pdCIsIl9rZXl3b3JkVG9QZXJjZW50IiwidG9wIiwiYm90dG9tIiwicmlnaHQiLCJfcmVuZGVyQ2xlYXJQcm9wcyIsImNsZWFyVHJhbnNmb3JtcyIsImNsZWFyUHJvcHMiLCJfaWRlbnRpdHkyRE1hdHJpeCIsIl9yb3RhdGlvbmFsUHJvcGVydGllcyIsIl9pc051bGxUcmFuc2Zvcm0iLCJfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5IiwibWF0cml4U3RyaW5nIiwiX2dldE1hdHJpeCIsImZvcmNlMkQiLCJhZGRlZFRvRE9NIiwibWF0cml4IiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsInNtb290aCIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJkZXRlcm1pbmFudCIsInhPcmlnaW5PbGQiLCJ4T3JpZ2luIiwieU9yaWdpbk9sZCIsInlPcmlnaW4iLCJ4T2Zmc2V0T2xkIiwieE9mZnNldCIsInlPZmZzZXRPbGQiLCJ5T2Zmc2V0IiwidHgiLCJ0eSIsIm9yaWdpblNwbGl0IiwieiIsInJvdGF0aW9uIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwic2tld1giLCJza2V3WSIsInBlcnNwZWN0aXZlIiwiYW5nbGUiLCJhMTIiLCJhMjIiLCJ0MSIsInQyIiwidDMiLCJhMTMiLCJhMjMiLCJhMzMiLCJhNDIiLCJhNDMiLCJhMzIiLCJpbnZlcnRlZFNjYWxlWCIsInJvdGF0ZSIsImZvcmNlQ1NTIiwieFBlcmNlbnQiLCJvZmZzZXRXaWR0aCIsInlQZXJjZW50Iiwib2Zmc2V0SGVpZ2h0IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJfcmVuZGVyU1ZHVHJhbnNmb3JtcyIsIl9yZW5kZXJDU1NUcmFuc2Zvcm1zIiwiX3JlbmRlck5vbjNEVHJhbnNmb3JtcyIsIl9hZGRQeFRyYW5zbGF0ZSIsIl96ZXJvRGVnIiwiX3plcm9QeCIsIl9lbmRQYXJlbnRoZXNpcyIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsImExMSIsImEyMSIsInRhbiIsIl9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuIiwiZGlyZWN0aW9uIiwiY2FwIiwiZmluYWxWYWx1ZSIsIl9hc3NpZ24iLCJzb3VyY2UiLCJfYWRkUmF3VHJhbnNmb3JtUFRzIiwiZW5kQ2FjaGUiLCJzdGFydENhY2hlIiwic2lkZSIsImFsbCIsIkNTU1BsdWdpbiIsInNwZWNpYWxQcm9wIiwicmVsYXRpdmUiLCJpc1RyYW5zZm9ybVJlbGF0ZWQiLCJ0cmFuc2Zvcm1Qcm9wVHdlZW4iLCJpbmxpbmVQcm9wcyIsInN0eWxlcyIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImF1dG9Sb3VuZCIsImNoZWNrUHJlZml4IiwiZ2V0U3R5bGVTYXZlciIsInBvc2l0aW9uQW5kU2NhbGUiLCJnc2FwV2l0aENTUyIsIlR3ZWVuTWF4V2l0aENTUyIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsImxvY2FscyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsInVwZGF0ZSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJtZW1vIiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsInJlZHVjZVN2ZyIsInZpZXdCb3giLCJleHBvcnRQZGYiLCJzdmdFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzYXZlZFN0ZXAiLCJjdXJyZW50U3RlcCIsImFsbFN0ZXBzIiwicmV0dmFsIiwicHJlc2VudGF0aW9uIiwibWFuaWZlc3QiLCJtYXhpbmRleCIsInN0ZXAiLCJzdGF0dXMiLCJnb3RvU3RlcCIsImNsb25lZFNWRyIsImNsb25lTm9kZSIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsInJlc3BvbnNlIiwic2VuZFRvU2VydmVyIiwiaW5uZXJIVE1MIiwiaWNvbiIsImNsYXNzTGlzdCIsImxvZyIsImlzT3ZlcmxheSIsImV2ZW50Iiwiem9vbVNsaWRlIiwibW9kZSIsInRleHRSZWN0IiwicmVjdCIsInN2Z0RvbSIsImFwcGx5VHJhbnNmb3JtIiwibG9jYWxSZWN0IiwiYXR0ciIsInJ1bk92ZXJsYXkiLCJvdmVybGF5Iiwic2lsZW50Iiwib3BhY2l0eSIsInN2Z01hcCIsImNyZWF0ZUV2ZW50VHJlZSIsIm1ha2VQYXJlbnRzIiwidHJlZSIsImV2ZW50RGVzY3JpcHRpb24iLCJzbGlkZUlkIiwiZXZlbnRJZCIsIk92ZXJsYXlTdGVwIiwib3ZlcmxheXMiLCJab29tU3RlcCIsInpvb21zSW4iLCJmaW5kWm9vbUV2ZW50IiwicmVjIiwicHJlc2VudGF0aW9uRGlyIiwiZmlsZU5hbWUiLCJzbGlkZSIsImZpbGUiLCJzbGlkZURpY3QiLCJtc2ciLCJqc29uIiwiZmV0Y2giLCJtZXRob2QiLCJvayIsImV4cGxhbmF0aW9uIiwiZmV0Y2hKU09OIiwiZmlsZW5hbWUiLCJ1c2VyQWxlcnQiLCJwcm9iZVNlcnZlciIsImRpdkNhY2hlIiwic3VidHJlZURpdkNhY2hlIiwicHJvZ3Jlc3NDYWNoZSIsImRpdk9wZW4iLCJ0aW1lbGluZUhUTUwiLCJ0aW1lbGluZURJViIsImJpZyIsInNtYWxsIiwidGltZWxpbmVDbGlja2VkIiwic291bmQiLCJzb3VuZHMiLCJmbGV4R3JvdyIsInRpbWVsaW5lU2VlbiIsInBhc3QiLCJpbmNsdWRlcyIsIm9mZnNldFgiLCJnb3RvQXVkaW8iLCJzZWVuIiwiZGl2Iiwib3BlblBhbmVsVHJlZSIsImNoaWxkTm9kZXMiLCJmb3JtYXRUaW1lIiwibWludXRlcyIsInNlY29uZHMiLCJ1cGRhdGVUaW1lbGluZURpc3BsYXkiLCJzb3VuZFN0YXRlIiwiU291bmRTdGF0ZSIsIlBsYXkiLCJzb3VuZEljb24iLCJwbGF5QnV0dG9uIiwiZW5kT2ZTb3VuZCIsIk5vbmUiLCJhdWRpbyIsIlJlY29yZGluZyIsIkxpdmUiLCJzaG93UGFuZWwiLCJ2aXNpYmxlIiwibGVmdFBhbmVsIiwidG9nZ2xlUGFuZWwiLCJjbGllbnRXaWR0aCIsIm1vc3RSZWNlbnRseVByZXNzZWQiLCJtYXJrU2VlbiIsIm1hcmtEaXNhYmxlZCIsIm9wZW5QYW5lbFRyZWVSZWMiLCJyZW1vdmVMb2FkaW5nIiwiYXVkaW9QbGF5aW5nIiwic3RlcEF1ZGlvIiwiY3VycmVudFRpbWUiLCJjdXJUaW1lIiwicHJldmlvdXNEdXJhdGlvbiIsInRvdGFsU291bmREdXJhdGlvbiIsInVzZXJEZWZpbmVkS2V5cyIsInNldE1vc3RSZWNlbnRseVByZXNzZWQiLCJidXR0b24iLCJzcGFuIiwidG91Y2hTdGFydCIsInRvdWNoZXMiLCJjdXJyZW50VG9vbCIsImZyYWN0aW9uIiwiY2xpZW50WCIsIm5leHRCdXR0b24iLCJwcmV2QnV0dG9uIiwidG9nZ2xlU2tldGNocGFkIiwiaW5pdFBhbmVscyIsInBsYXliYWNrUmF0ZUNoYW5nZSIsImNyZWF0ZVRyZWVIVE1MUmVjIiwibWVyZ2VkIiwicGFyZW50RGl2Iiwibm9kZU5hbWUiLCJnb3RvRXZlbnQiLCJzdWJkaXYiLCJpbml0U2VhcmNoIiwic291bmREaWN0IiwibGlzdFVzZXJEZWZpbmVkS2V5cyIsInBkZkZpbGUiLCJwZGZMaW5rcyIsInRhYiIsImluaXRMZWZ0UGFuZWwiLCJwYW5lbCIsInNob3J0RGlzcGxheSIsInVwZGF0ZVBhZ2VOdW1iZXIiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJocmVmIiwicGFyYW1TdHJpbmciLCJwYXJhbSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJ1cGRhdGVVUkwiLCJwYWdlTnVtYmVyIiwibGFzdFN0ZXAiLCJmdXR1cmUiLCJsb2FkU3RydWN0Iiwid2FpdGluZyIsImxvYWRpbmciLCJvbmNlRW1wdHkiLCJvbkVycm9yIiwic3ZnZGVmcyIsInByb2Nlc3NRdWV1ZSIsIm5ld1dhaXRpbmciLCJvYiIsIm9ubG9hZCIsImZpbmlzaGVkTG9hZGluZyIsIm9iamVjdCIsImRlZnMiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNsZWFuRGVmcyIsImNsZWFuUmVjdCIsInByZXZfc2libGluZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJzdmdDaGlsZHJlbiIsInN2Z0NoaWxkIiwiZnV0dXJlU2xpZGUiLCJydW4iLCJnZXRCb3VuZFJlY3QiLCJpZFRyYW5zZm9ybSIsInBsYWNlaG9sZGVyIiwicG9zc2libGVSZWN0cyIsImdldFRyYW5zZm9ybSIsInRyYW5zZm9ybVRvU3RyaW5nIiwiYXR0YWNoU1ZHIiwiZXhjZXB0aW9uIiwicXVldWVFcnJvciIsImRlbGV0ZSIsInVzZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwib2xkTGluayIsIm5ld0xpbmsiLCJmaWxsIiwicGF0dGVybklkIiwicGF0IiwiaW1hZ2UiLCJ4bGluayIsImltZyIsInJlY3RHIiwiaW1nVyIsImltZ0giLCJ0cmFuc2Zvcm1NYXRyaXgiLCJ0cmFuc2Zvcm1NYXRyaXhTdHJpbmciLCJTdHJpbmciLCJpbWFnZUNsb25lIiwiYWRkVG9RdWV1ZSIsInNsaWRlcyIsInJlamVjdCIsImFuY2VzdG9yIiwic2VhcmNoVHlwZSIsIndvcmQiLCJhbGxSZXN1bHRzIiwib25lUmVzdWx0IiwiYWxsU3RyaW5ncyIsImFkZFN0cmluZ3MiLCJrZXl3b3JkIiwia2V5d29yZHMiLCJzZWFyY2hCb3giLCJ1bmRvU3RhY2siLCJ1bmRvSW5kZXgiLCJkcmF3U3RhdGUiLCJzaWdDYW52YXMiLCJwb2ludCIsImN1clBhdGgiLCJjdXJQYXRoVGV4dCIsIm9yaWdpbmFsIiwidW5kbyIsInVuZG9CdXR0b25zIiwicmVkbyIsInNlbGVjdFRvb2wiLCJ0b29sIiwic2tldGNoUGFuZWwiLCJjaGVja2JveCIsImNoZWNrZWQiLCJwcmV2ZW50RGVmYXVsdCIsImRyYXciLCJjcmVhdGVTVkdQb2ludCIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwic2V0QXR0cmlidXRlTlMiLCJhdWRpb0NodW5rcyIsIm1lZGlhUmVjb3JkZXIiLCJjYWNoZUZsdXNoU3RyaW5nIiwiY2FjaGVGbHVzaCIsInNvdW5kU3RvcCIsImVuZFJlY29yZGluZyIsInN0YXRlIiwibGl2ZSIsImZvcldoYXQiLCJkZXNjcmlwdGlvbiIsInBhZ2UiLCJvbnN0b3AiLCJhdWRpb0Jsb2IiLCJCbG9iIiwiZnIiLCJGaWxlUmVhZGVyIiwiVWludDhBcnJheSIsInNlcnZlclJlc3BvbnNlIiwibWFuIiwiZ2V0TWFuaWZlc3QiLCJpbml0U291bmRUaW1lbGluZSIsImxvYWROZWFyYnlTb3VuZHMiLCJzZW5kIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJzdG9wIiwic291bmRSZWNvcmQiLCJzdHJlYW0iLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJNZWRpYVJlY29yZGVyIiwicHJvbWlzZVNvdW5kIiwiY2F0Y2giLCJ1c2VyQWdlbnQiLCJhZnRlclNvdW5kIiwicmVzZXRTb3VuZCIsIm1vdmVIZWFkIiwic291bmRQbGF5Iiwic291bmRQYXVzZWQiLCJzb3VuZExpdmUiLCJwbGF5YmFja1JhdGVzIiwicGxheWJhY2tSYXRlSW5kZXgiLCJwbGF5YmFja1JhdGUiLCJyZWNvcmRpbmciLCJ3aGVyZSIsImRpciIsImxvYWRTb3VuZCIsIkF1ZGlvIiwic291bmRBZHZhbmNlIiwiU3RlcCIsImV2ZW50VG9TdGVwIiwicmVzZXRUaW1lbGluZSIsInRhcmdldFN0ZXAiLCJzbGlkZXNUb0xvYWQiLCJjb3VzaW4iLCJmdXR1cmVTdGVwIiwiem9vbSIsImNyZWF0ZVRpbWVsaW5lIiwicmVjb3JkZWQiLCJjcmVhdGVUaW1lbGluZUZyb21FdmVudHMiLCJtZXJnZWRCbG9ja3MiLCJjdXJyZW50QmxvY2siLCJibG9jayIsInpvb21CbG9jayIsImNyZWF0ZVRpbWVsaW5lRnJvbVJlY29yZGluZyIsInBhZ2VDb3VudCIsInNjYWxleCIsImRlbHRheCIsInNjYWxleSIsImRlbHRheSIsImZpcnN0UmVjdCIsImtleUxpc3RlbmVyIiwic2VydmVyQ29ubmVjdGVkIiwic2VydmVyQ29ubmVjdGVkVmFyIiwicnVuRnJvbUFwcCIsImlmU2VydmVyQ29ubmVjdGVkIiwibWF4VG91Y2hQb2ludHMiLCJ0aXRsZSIsImdldFJlY29yZGVkU3RlcHMiLCJnZXRTdGVwRnJvbVVSTCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibmMiXSwic291cmNlUm9vdCI6IiJ9