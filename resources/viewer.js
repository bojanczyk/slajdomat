/*! For license information please see viewer.js.LICENSE.txt */
(()=>{"use strict";var t={114:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"/* style sheet for the panel on the left, which contains the tree view of the slides */\n\n\n\n#left-panel {\n    position: relative;\n    color: black;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--light-blue);\n    width: 0;\n    vertical-align: top;\n    cursor: default;\n    white-space: nowrap;\n    overflow: hidden;\n    resize: horizontal;\n    font-size: 12px;\n}\n\n\n\n.tree-view-item {\n    overflow: hidden;\n    white-space: nowrap;\n    display: block;\n    color: gray;\n    margin-bottom: 5px;\n    cursor: pointer;\n}\n\n.tree-view-item-seen {\n    color: black;\n}\n\n.tree-view-item-loading {\n    color: red;\n}\n\n.tree-view-item i {\n    margin-right: 5px;\n    cursor: pointer;\n    font-size: 10px;\n}\n\n.slide-stack {\n    font-size: 10px;\n    margin-top: 5px;\n    margin-left: 1.5em;\n    overflow: scroll;\n}\n\n.slide-stack-hidden {\n    display: none;\n}\n\n#slide-stack-container {\n    overflow: scroll;\n    margin-top: 10px\n}\n\n.disabled-event {\n    text-decoration: line-through;\n}\n\n\n#made-using-slajdomat {\n    margin: 10px;\n    padding-left: 7px;\n    /* display: flex;\n    flex-direction: row;\n    align-items: center; */\n}\n\n#made-using-slajdomat img {\n    width: 100px;\n}\n\n/* this is the pdf button */\n#link-to-pdf {\n    float: right;\n    cursor: pointer;\n    color: var(--blue);\n}\n\n\n#logo-line {\n    font-size: 20px;\n    margin-top: 5px;\n    margin-bottom: 5px;\n}\n\n#logo-second-line {\n    margin: 0px;\n}\n\n#search-panel {\n    display: flex;\n    flex-direction: column;\n}\n\n#search-box {\n    display: flex;\n    margin-top: 5px;\n}\n\n#search-box i {\n    margin: 3px;\n    font-size: 18px;\n}\n\n#search-box input {\n    width: 100%;\n}\n\n#search-results {\n    margin-left: 5px;\n    margin-top: 5px;\n}\n\n.one-result {\n    padding: 5px;\n}\n\n.one-result:hover {\n    background-color: white;\n    cursor: pointer;\n}\n\n.search-result-text {\n    color: grey;\n\n}\n\n/* the container with the tab heads */\n#tab-heads {\n    display: flex;\n    flex-direction: row;\n}\n\n/* the tab heads them selves */\n#tab-heads>div {\n    margin-left: 10px;\n    padding: 5px;\n    border: 1px solid var(--blue);\n    border-bottom: none;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    cursor: pointer;\n}\n\n/* if the tab head is active, then it has a different colour */\n#tab-heads>.active {\n    background-color: var(--very-light-blue);\n}\n\n#tab-contents {\n    background-color: var(--very-light-blue);\n    flex-grow: 1;\n}\n\n#tab-contents>div {\n    display: none;\n}\n\n#tab-contents>div.active {\n    display: flex;\n    flex-direction: column;\n    overflow-y: scroll;\n}\n\n\n\n#tab-contents>div>div {\n    padding: 10px;\n    border-bottom: 1px solid var(--light-blue);\n}\n\np {\n    white-space: initial;\n}\n\n.checkbox-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.hidden {\n    display: none;\n}\n\n\n/*  a div with a button and caption in the left panel */\n.button-line {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.button-line>span.material-icons {\n    cursor: pointer;\n    color: var(--blue);\n    margin-left: 7px;\n    margin-right: 7px;\n}\n\n.button-line.disabled>span.material-icons {\n    cursor: default;\n    color: gray;\n}\n\n/* disabled class for button lines */\n\n.button-line.disabled {\n    color: gray;\n    cursor: default;\n}\n\n\n\n.growAndShrink {\n    transition: transform 0.3s ease-in-out;\n    /* Transition property for smooth scaling */\n    animation: growAndShrinkFrames 1s infinite ease-in-out;\n    /* Duration and easing */\n}\n\n/* Define the animation */\n@keyframes growAndShrinkFrames {\n\n    0%,\n    100% {\n        transform: scale(1);\n        /* Start and end state: normal size */\n    }\n\n    50% {\n        transform: scale(1.2);\n        color: red;\n        /* Middle state: slightly larger */\n    }\n}\n\n","",{version:3,sources:["webpack://./src/viewer/css/left-panel.css"],names:[],mappings:"AAAA,sFAAsF;;;;AAItF;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mCAAmC;IACnC,QAAQ;IACR,mBAAmB;IACnB,eAAe;IACf,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;IAClB,eAAe;AACnB;;;;AAIA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB;AACJ;;AAEA;IACI,6BAA6B;AACjC;;;AAGA;IACI,YAAY;IACZ,iBAAiB;IACjB;;0BAEsB;AAC1B;;AAEA;IACI,YAAY;AAChB;;AAEA,2BAA2B;AAC3B;IACI,YAAY;IACZ,eAAe;IACf,kBAAkB;AACtB;;;AAGA;IACI,eAAe;IACf,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,WAAW;;AAEf;;AAEA,qCAAqC;AACrC;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA,8BAA8B;AAC9B;IACI,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;IAC7B,mBAAmB;IACnB,2BAA2B;IAC3B,4BAA4B;IAC5B,eAAe;AACnB;;AAEA,8DAA8D;AAC9D;IACI,wCAAwC;AAC5C;;AAEA;IACI,wCAAwC;IACxC,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;AACtB;;;;AAIA;IACI,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;;AAGA;IACI,aAAa;AACjB;;;AAGA,uDAAuD;AACvD;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;;AAGA;IACI,eAAe;IACf,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,WAAW;AACf;;AAEA,oCAAoC;;AAEpC;IACI,WAAW;IACX,eAAe;AACnB;;;;AAIA;IACI,sCAAsC;IACtC,2CAA2C;IAC3C,sDAAsD;IACtD,wBAAwB;AAC5B;;AAEA,yBAAyB;AACzB;;IAEI;;QAEI,mBAAmB;QACnB,qCAAqC;IACzC;;IAEA;QACI,qBAAqB;QACrB,UAAU;QACV,kCAAkC;IACtC;AACJ",sourcesContent:["/* style sheet for the panel on the left, which contains the tree view of the slides */\n\n\n\n#left-panel {\n    position: relative;\n    color: black;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--light-blue);\n    width: 0;\n    vertical-align: top;\n    cursor: default;\n    white-space: nowrap;\n    overflow: hidden;\n    resize: horizontal;\n    font-size: 12px;\n}\n\n\n\n.tree-view-item {\n    overflow: hidden;\n    white-space: nowrap;\n    display: block;\n    color: gray;\n    margin-bottom: 5px;\n    cursor: pointer;\n}\n\n.tree-view-item-seen {\n    color: black;\n}\n\n.tree-view-item-loading {\n    color: red;\n}\n\n.tree-view-item i {\n    margin-right: 5px;\n    cursor: pointer;\n    font-size: 10px;\n}\n\n.slide-stack {\n    font-size: 10px;\n    margin-top: 5px;\n    margin-left: 1.5em;\n    overflow: scroll;\n}\n\n.slide-stack-hidden {\n    display: none;\n}\n\n#slide-stack-container {\n    overflow: scroll;\n    margin-top: 10px\n}\n\n.disabled-event {\n    text-decoration: line-through;\n}\n\n\n#made-using-slajdomat {\n    margin: 10px;\n    padding-left: 7px;\n    /* display: flex;\n    flex-direction: row;\n    align-items: center; */\n}\n\n#made-using-slajdomat img {\n    width: 100px;\n}\n\n/* this is the pdf button */\n#link-to-pdf {\n    float: right;\n    cursor: pointer;\n    color: var(--blue);\n}\n\n\n#logo-line {\n    font-size: 20px;\n    margin-top: 5px;\n    margin-bottom: 5px;\n}\n\n#logo-second-line {\n    margin: 0px;\n}\n\n#search-panel {\n    display: flex;\n    flex-direction: column;\n}\n\n#search-box {\n    display: flex;\n    margin-top: 5px;\n}\n\n#search-box i {\n    margin: 3px;\n    font-size: 18px;\n}\n\n#search-box input {\n    width: 100%;\n}\n\n#search-results {\n    margin-left: 5px;\n    margin-top: 5px;\n}\n\n.one-result {\n    padding: 5px;\n}\n\n.one-result:hover {\n    background-color: white;\n    cursor: pointer;\n}\n\n.search-result-text {\n    color: grey;\n\n}\n\n/* the container with the tab heads */\n#tab-heads {\n    display: flex;\n    flex-direction: row;\n}\n\n/* the tab heads them selves */\n#tab-heads>div {\n    margin-left: 10px;\n    padding: 5px;\n    border: 1px solid var(--blue);\n    border-bottom: none;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    cursor: pointer;\n}\n\n/* if the tab head is active, then it has a different colour */\n#tab-heads>.active {\n    background-color: var(--very-light-blue);\n}\n\n#tab-contents {\n    background-color: var(--very-light-blue);\n    flex-grow: 1;\n}\n\n#tab-contents>div {\n    display: none;\n}\n\n#tab-contents>div.active {\n    display: flex;\n    flex-direction: column;\n    overflow-y: scroll;\n}\n\n\n\n#tab-contents>div>div {\n    padding: 10px;\n    border-bottom: 1px solid var(--light-blue);\n}\n\np {\n    white-space: initial;\n}\n\n.checkbox-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.hidden {\n    display: none;\n}\n\n\n/*  a div with a button and caption in the left panel */\n.button-line {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.button-line>span.material-icons {\n    cursor: pointer;\n    color: var(--blue);\n    margin-left: 7px;\n    margin-right: 7px;\n}\n\n.button-line.disabled>span.material-icons {\n    cursor: default;\n    color: gray;\n}\n\n/* disabled class for button lines */\n\n.button-line.disabled {\n    color: gray;\n    cursor: default;\n}\n\n\n\n.growAndShrink {\n    transition: transform 0.3s ease-in-out;\n    /* Transition property for smooth scaling */\n    animation: growAndShrinkFrames 1s infinite ease-in-out;\n    /* Duration and easing */\n}\n\n/* Define the animation */\n@keyframes growAndShrinkFrames {\n\n    0%,\n    100% {\n        transform: scale(1);\n        /* Start and end state: normal size */\n    }\n\n    50% {\n        transform: scale(1.2);\n        color: red;\n        /* Middle state: slightly larger */\n    }\n}\n\n"],sourceRoot:""}]);const a=s},439:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"/* ***** progress panel ***/\n#progress-panel {\n    width : 100%;\n    position : absolute;\n    bottom : 0;\n    height : 20px;\n    display : flex;\n    align-items: flex-end;\n    font-size : 12px;\n    cursor: default;\n    padding : 0;\n}\n\n.tablet #progress-panel .material-icons {\n    font-size: 40px;\n}\n\n#progress-line {\n    height: 100%;\n    flex-grow: 1;\n    display : flex;\n    align-items: center;\n    justify-content: center;\n    cursor : pointer;\n}\n#progress-line > div {\n    height : 100%;\n    background-color: var(--very-light-blue);\n    border-left : 1px solid white;\n    display:  flex;\n}\n\n\n/* #progress-line .seen {\n    background-color: var(--very-light-blue);\n   } */\n\nbody.has-sound #progress-line .nosound {\n    background-color: lightgray;\n}\n\n#progress-line .recording {\n    background-color:  red;\n}\n\nbody.has-sound #progress-line .nosound.recording {\n    background-color:  red;\n}\n\n.progress-filler {\n    height: 100%;\n    background-color: var(--light-blue);\n}\n\nbody.has-sound #progress-line .nosound .progress-filler {\n    background-color: grey;\n}\n\n\n#progress-controls {\n    /* width : 110px; */\n    z-index: 5;\n    display : flex; \n    align-items: center;\n    padding-left: 5px;\n    padding-right:5px;\n}\n\n#progress-controls i {\n    cursor: pointer;\n}\n\n#progress-controls div {\n  flex-grow: 1;\n}\n\n\n#progress-controls div {\n    display : flex; \n    align-items: center;\n}\n\n#page-count {\n    width : 80px;\n    display : flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#page-count-enumerator {\n    font-size: 15px;\n}\n\n.playing #page-count-enumerator {\n    display : none;\n}\n\n.playing #page-count-denominator {\n    display : none;\n}\n\n#progress-panel:not(.playing) #time-elapsed {\n    display : none;\n}\n\n#progress-panel:not(.playing) #sound-speed {\n    opacity : 0;\n}\n\nbody:not(.has-sound) #play-button {\n    display: none;\n}\n\nbody:not(.has-sound) #sound-speed {\n    display : none;\n}\n\n#sound-speed {\n    cursor : pointer;\n}\n\n#page-count-denominator {\n    color :darkgray;\n}\n#next-event {\n    right: 0%;\n}","",{version:3,sources:["webpack://./src/viewer/css/progress.css"],names:[],mappings:"AAAA,2BAA2B;AAC3B;IACI,YAAY;IACZ,mBAAmB;IACnB,UAAU;IACV,aAAa;IACb,cAAc;IACd,qBAAqB;IACrB,gBAAgB;IAChB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,cAAc;IACd,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,wCAAwC;IACxC,6BAA6B;IAC7B,cAAc;AAClB;;;AAGA;;MAEM;;AAEN;IACI,2BAA2B;AAC/B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,mCAAmC;AACvC;;AAEA;IACI,sBAAsB;AAC1B;;;AAGA;IACI,mBAAmB;IACnB,UAAU;IACV,cAAc;IACd,mBAAmB;IACnB,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;EACE,YAAY;AACd;;;AAGA;IACI,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;AACA;IACI,SAAS;AACb",sourcesContent:["/* ***** progress panel ***/\n#progress-panel {\n    width : 100%;\n    position : absolute;\n    bottom : 0;\n    height : 20px;\n    display : flex;\n    align-items: flex-end;\n    font-size : 12px;\n    cursor: default;\n    padding : 0;\n}\n\n.tablet #progress-panel .material-icons {\n    font-size: 40px;\n}\n\n#progress-line {\n    height: 100%;\n    flex-grow: 1;\n    display : flex;\n    align-items: center;\n    justify-content: center;\n    cursor : pointer;\n}\n#progress-line > div {\n    height : 100%;\n    background-color: var(--very-light-blue);\n    border-left : 1px solid white;\n    display:  flex;\n}\n\n\n/* #progress-line .seen {\n    background-color: var(--very-light-blue);\n   } */\n\nbody.has-sound #progress-line .nosound {\n    background-color: lightgray;\n}\n\n#progress-line .recording {\n    background-color:  red;\n}\n\nbody.has-sound #progress-line .nosound.recording {\n    background-color:  red;\n}\n\n.progress-filler {\n    height: 100%;\n    background-color: var(--light-blue);\n}\n\nbody.has-sound #progress-line .nosound .progress-filler {\n    background-color: grey;\n}\n\n\n#progress-controls {\n    /* width : 110px; */\n    z-index: 5;\n    display : flex; \n    align-items: center;\n    padding-left: 5px;\n    padding-right:5px;\n}\n\n#progress-controls i {\n    cursor: pointer;\n}\n\n#progress-controls div {\n  flex-grow: 1;\n}\n\n\n#progress-controls div {\n    display : flex; \n    align-items: center;\n}\n\n#page-count {\n    width : 80px;\n    display : flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#page-count-enumerator {\n    font-size: 15px;\n}\n\n.playing #page-count-enumerator {\n    display : none;\n}\n\n.playing #page-count-denominator {\n    display : none;\n}\n\n#progress-panel:not(.playing) #time-elapsed {\n    display : none;\n}\n\n#progress-panel:not(.playing) #sound-speed {\n    opacity : 0;\n}\n\nbody:not(.has-sound) #play-button {\n    display: none;\n}\n\nbody:not(.has-sound) #sound-speed {\n    display : none;\n}\n\n#sound-speed {\n    cursor : pointer;\n}\n\n#page-count-denominator {\n    color :darkgray;\n}\n#next-event {\n    right: 0%;\n}"],sourceRoot:""}]);const a=s},658:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,"\n  /* the sketch panel *********** */\n  .tool-panel {\n    position: fixed;\n    display : none;\n    right: 0;\n    width : 20px;\n    top : 50%;\n    transform: translate(0,-50%);\n    /* width : 40%; */\n    /* left : 30%; */\n    padding-top : 20px;\n    padding-bottom : 20px;\n     padding-left : 5px; \n     padding-right : 5px; \n    border-radius: 10px;\n    /* border-top-left-radius: 25px;\n    border-top-right-radius: 25px; */\n    background-color:lightcyan;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    z-index : 10;\n    /* border : 1px solid black; */\n}\n\n.tool-panel div {\n    font-family: Roboto;\n    margin : 5px;\n    padding : 2px;\n}\n\n.noselect {\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Old versions of Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome, Edge, Opera and Firefox */\n}\n\n.tool-panel i {\n    margin : 5px;\n    cursor : pointer;\n    border-radius : 5px;\n    padding : 2px;\n    font-size: 18px;\n}\n\n.tool-panel .disabled {\n  color : lightgrey;\n  cursor : default;\n}\n\n.tool-panel .selected {\n    border : 1px solid grey\n}\n\n#sketch-red {\n    color :red;\n}\n\n#sketch-blue {\n  color :blue;\n}\n\n","",{version:3,sources:["webpack://./src/viewer/css/sketch.css"],names:[],mappings:";EACE,iCAAiC;EACjC;IACE,eAAe;IACf,cAAc;IACd,QAAQ;IACR,YAAY;IACZ,SAAS;IACT,4BAA4B;IAC5B,iBAAiB;IACjB,gBAAgB;IAChB,kBAAkB;IAClB,qBAAqB;KACpB,kBAAkB;KAClB,mBAAmB;IACpB,mBAAmB;IACnB;oCACgC;IAChC,0BAA0B;IAC1B,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB,YAAY;IACZ,8BAA8B;AAClC;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,aAAa;AACjB;;AAEA;EACE,2BAA2B,EAAE,eAAe;IAC1C,yBAAyB,EAAE,WAAW;KACrC,wBAAwB,EAAE,mBAAmB;OAC3C,sBAAsB,EAAE,4BAA4B;QACnD,qBAAqB,EAAE,2BAA2B;YAC9C,iBAAiB,EAAE;gFACiD;AAChF;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;IACI;AACJ;;AAEA;IACI,UAAU;AACd;;AAEA;EACE,WAAW;AACb",sourcesContent:["\n  /* the sketch panel *********** */\n  .tool-panel {\n    position: fixed;\n    display : none;\n    right: 0;\n    width : 20px;\n    top : 50%;\n    transform: translate(0,-50%);\n    /* width : 40%; */\n    /* left : 30%; */\n    padding-top : 20px;\n    padding-bottom : 20px;\n     padding-left : 5px; \n     padding-right : 5px; \n    border-radius: 10px;\n    /* border-top-left-radius: 25px;\n    border-top-right-radius: 25px; */\n    background-color:lightcyan;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    z-index : 10;\n    /* border : 1px solid black; */\n}\n\n.tool-panel div {\n    font-family: Roboto;\n    margin : 5px;\n    padding : 2px;\n}\n\n.noselect {\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Old versions of Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome, Edge, Opera and Firefox */\n}\n\n.tool-panel i {\n    margin : 5px;\n    cursor : pointer;\n    border-radius : 5px;\n    padding : 2px;\n    font-size: 18px;\n}\n\n.tool-panel .disabled {\n  color : lightgrey;\n  cursor : default;\n}\n\n.tool-panel .selected {\n    border : 1px solid grey\n}\n\n#sketch-red {\n    color :red;\n}\n\n#sketch-blue {\n  color :blue;\n}\n\n"],sourceRoot:""}]);const a=s},175:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),i=n.n(r),o=n(645),s=n.n(o)()(i());s.push([t.id,":root {\n    --grafitowy : #2c2c2c;\n      --niebieski : #18A0FB;\n    --select-color : #daebf7;\n    --disabled-color : Silver;\n    --blue : #4646FF;\n    --light-blue : #B4C8FF;\n    --very-light-blue : #DCE6FF;\n  }\n\nbody, html {\n    height : 100%;\n    overflow: hidden;\n}\n\nbody, div, button {\n    font-family: 'Roboto';\n    font-weight: 200;\n    font-size: 12px;\n}\n\nbutton { \n    background-color: var(--very-light-blue);\n    border : 1px solid var(--niebieski);\n    border-radius: 3px;\n    cursor: pointer;\n}\n\nbody {\n    margin : 0;\n}\n\n\n#upper-panel {\n    position: absolute;\n    top : 0;\n    bottom : 20px;\n    width :100%;\n    display: flex;\n    flex-direction: row;\n    flex-grow: 1;\n    flex-shrink : 1;\n}\n\n#text-alert-box {\n    position : fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    z-index: 3;\n    display : none; \n}\n\n#text-alert-background {\n    position : absolute;\n    width : 100%;\n    height : 100%;\n    background-color : lightgray;\n    opacity: 90%; \n}\n\n#text-alert {\n padding: 10px;\n z-index: 1;\n}\n\n.hidden-svg {\n    position: absolute;\n    width : 0px;\n    height : 0px; \n}\n\n#svg-container {\n    flex-grow : 1;\n    flex-direction: column;\n    /* align-items : center; */\n}\n\n#svg { \n    flex-grow : 1;\n}\n\n/* this counters a display bug in figma */\npath:not([fill]) {\n    fill : transparent;\n}\n\n.sound-icon {\n    position : absolute;\n    color: red;\n    z-index : 2;\n}\n\n.invisible {\n    display: none;\n}\n\n","",{version:3,sources:["webpack://./src/viewer/css/viewer.css"],names:[],mappings:"AAAA;IACI,qBAAqB;MACnB,qBAAqB;IACvB,wBAAwB;IACxB,yBAAyB;IACzB,gBAAgB;IAChB,sBAAsB;IACtB,2BAA2B;EAC7B;;AAEF;IACI,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,wCAAwC;IACxC,mCAAmC;IACnC,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,UAAU;AACd;;;AAGA;IACI,kBAAkB;IAClB,OAAO;IACP,aAAa;IACb,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,SAAS;IACT,OAAO;IACP,QAAQ;IACR,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,4BAA4B;IAC5B,YAAY;AAChB;;AAEA;CACC,aAAa;CACb,UAAU;AACX;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;AACjB;;AAEA,yCAAyC;AACzC;IACI,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,UAAU;IACV,WAAW;AACf;;AAEA;IACI,aAAa;AACjB",sourcesContent:[":root {\n    --grafitowy : #2c2c2c;\n      --niebieski : #18A0FB;\n    --select-color : #daebf7;\n    --disabled-color : Silver;\n    --blue : #4646FF;\n    --light-blue : #B4C8FF;\n    --very-light-blue : #DCE6FF;\n  }\n\nbody, html {\n    height : 100%;\n    overflow: hidden;\n}\n\nbody, div, button {\n    font-family: 'Roboto';\n    font-weight: 200;\n    font-size: 12px;\n}\n\nbutton { \n    background-color: var(--very-light-blue);\n    border : 1px solid var(--niebieski);\n    border-radius: 3px;\n    cursor: pointer;\n}\n\nbody {\n    margin : 0;\n}\n\n\n#upper-panel {\n    position: absolute;\n    top : 0;\n    bottom : 20px;\n    width :100%;\n    display: flex;\n    flex-direction: row;\n    flex-grow: 1;\n    flex-shrink : 1;\n}\n\n#text-alert-box {\n    position : fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    z-index: 3;\n    display : none; \n}\n\n#text-alert-background {\n    position : absolute;\n    width : 100%;\n    height : 100%;\n    background-color : lightgray;\n    opacity: 90%; \n}\n\n#text-alert {\n padding: 10px;\n z-index: 1;\n}\n\n.hidden-svg {\n    position: absolute;\n    width : 0px;\n    height : 0px; \n}\n\n#svg-container {\n    flex-grow : 1;\n    flex-direction: column;\n    /* align-items : center; */\n}\n\n#svg { \n    flex-grow : 1;\n}\n\n/* this counters a display bug in figma */\npath:not([fill]) {\n    fill : transparent;\n}\n\n.sound-icon {\n    position : absolute;\n    color: red;\n    z-index : 2;\n}\n\n.invisible {\n    display: none;\n}\n\n"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var u=this[a][0];null!=u&&(s[u]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);r&&s[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},358:(t,e,n)=>{function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}n.r(e),n.d(e,{Back:()=>Hn,Bounce:()=>Xn,CSSPlugin:()=>li,Circ:()=>Gn,Cubic:()=>Yn,Elastic:()=>Zn,Expo:()=>Qn,Linear:()=>Nn,Power0:()=>Pn,Power1:()=>Rn,Power2:()=>Dn,Power3:()=>zn,Power4:()=>Fn,Quad:()=>jn,Quart:()=>Wn,Quint:()=>qn,Sine:()=>Vn,SteppedEase:()=>$n,Strong:()=>Un,TimelineLite:()=>je,TimelineMax:()=>je,TweenLite:()=>Ge,TweenMax:()=>di,default:()=>ci,gsap:()=>ci});var o,s,a,u,l,c,d,h,f,p,g,A,m,v,y,_={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},b={duration:.5,overwrite:!1,delay:0},x=1e8,C=1e-8,w=2*Math.PI,B=w/4,I=0,k=Math.sqrt,S=Math.cos,E=Math.sin,T=function(t){return"string"==typeof t},M=function(t){return"function"==typeof t},L=function(t){return"number"==typeof t},O=function(t){return void 0===t},P=function(t){return"object"==typeof t},R=function(t){return!1!==t},D=function(){return"undefined"!=typeof window},z=function(t){return M(t)||T(t)},F="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},N=Array.isArray,j=/(?:-?\.?\d|\.)+/gi,Y=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,W=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,q=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,U=/[+-]=-?[.\d]+/,Z=/[^,'"\[\]\s]+/gi,H=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,$={},X={},V=function(t){return(X=wt(t,$))&&Bn},Q=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},G=function(t,e){return!e&&console.warn(t)},K=function(t,e){return t&&($[t]=e)&&X&&(X[t]=e)||$},J=function(){return 0},tt={suppressEvents:!0,isStart:!0,kill:!1},et={suppressEvents:!0,kill:!1},nt={suppressEvents:!0},rt={},it=[],ot={},st={},at={},ut=30,lt=[],ct="",dt=function(t){var e,n,r=t[0];if(P(r)||M(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(n=lt.length;n--&&!lt[n].targetTest(r););e=lt[n]}for(n=t.length;n--;)t[n]&&(t[n]._gsap||(t[n]._gsap=new Fe(t[n],e)))||t.splice(n,1);return t},ht=function(t){return t._gsap||dt(ee(t))[0]._gsap},ft=function(t,e,n){return(n=t[e])&&M(n)?t[e]():O(n)&&t.getAttribute&&t.getAttribute(e)||n},pt=function(t,e){return(t=t.split(",")).forEach(e)||t},gt=function(t){return Math.round(1e5*t)/1e5||0},At=function(t){return Math.round(1e7*t)/1e7||0},mt=function(t,e){var n=e.charAt(0),r=parseFloat(e.substr(2));return t=parseFloat(t),"+"===n?t+r:"-"===n?t-r:"*"===n?t*r:t/r},vt=function(t,e){for(var n=e.length,r=0;t.indexOf(e[r])<0&&++r<n;);return r<n},yt=function(){var t,e,n=it.length,r=it.slice(0);for(ot={},it.length=0,t=0;t<n;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},_t=function(t,e,n,r){it.length&&!s&&yt(),t.render(e,n,r||s&&e<0&&(t._initted||t._startAt)),it.length&&!s&&yt()},bt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(Z).length<2?e:T(t)?t.trim():t},xt=function(t){return t},Ct=function(t,e){for(var n in e)n in t||(t[n]=e[n]);return t},wt=function(t,e){for(var n in e)t[n]=e[n];return t},Bt=function t(e,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=P(n[r])?t(e[r]||(e[r]={}),n[r]):n[r]);return e},It=function(t,e){var n,r={};for(n in t)n in e||(r[n]=t[n]);return r},kt=function(t){var e,n=t.parent||u,r=t.keyframes?(e=N(t.keyframes),function(t,n){for(var r in n)r in t||"duration"===r&&e||"ease"===r||(t[r]=n[r])}):Ct;if(R(t.inherit))for(;n;)r(t,n.vars.defaults),n=n.parent||n._dp;return t},St=function(t,e,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var o,s=t[r];if(i)for(o=e[i];s&&s[i]>o;)s=s._prev;return s?(e._next=s._next,s._next=e):(e._next=t[n],t[n]=e),e._next?e._next._prev=e:t[r]=e,e._prev=s,e.parent=e._dp=t,e},Et=function(t,e,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=e._prev,o=e._next;i?i._next=o:t[n]===e&&(t[n]=o),o?o._prev=i:t[r]===e&&(t[r]=i),e._next=e._prev=e.parent=null},Tt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},Mt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var n=t;n;)n._dirty=1,n=n.parent;return t},Lt=function(t,e,n,r){return t._startAt&&(s?t._startAt.revert(et):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,r))},Ot=function t(e){return!e||e._ts&&t(e.parent)},Pt=function(t){return t._repeat?Rt(t._tTime,t=t.duration()+t._rDelay)*t:0},Rt=function(t,e){var n=Math.floor(t/=e);return t&&n===t?n-1:n},Dt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},zt=function(t){return t._end=At(t._start+(t._tDur/Math.abs(t._ts||t._rts||C)||0))},Ft=function(t,e){var n=t._dp;return n&&n.smoothChildTiming&&t._ts&&(t._start=At(n._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),zt(t),n._dirty||Mt(n,t)),t},Nt=function(t,e){var n;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(n=Dt(t.rawTime(),e),(!e._dur||Gt(0,e.totalDuration(),n)-e._tTime>C)&&e.render(n,!0)),Mt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(n=t;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;t._zTime=-1e-8}},jt=function(t,e,n,r){return e.parent&&Tt(e),e._start=At((L(n)?n:n||t!==u?Xt(t,n,e):t._time)+e._delay),e._end=At(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),St(t,e,"_first","_last",t._sort?"_start":0),Ut(e)||(t._recent=e),r||Nt(t,e),t._ts<0&&Ft(t,t._tTime),t},Yt=function(t,e){return($.ScrollTrigger||Q("scrollTrigger",e))&&$.ScrollTrigger.create(e,t)},Wt=function(t,e,n,r,i){return He(t,e,i),t._initted?!n&&t._pt&&!s&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&f!==Be.frame?(it.push(t),t._lazy=[i,r],1):void 0:1},qt=function t(e){var n=e.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||t(n))},Ut=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Zt=function(t,e,n,r){var i=t._repeat,o=At(e)||0,s=t._tTime/t._tDur;return s&&!r&&(t._time*=o/t._dur),t._dur=o,t._tDur=i?i<0?1e10:At(o*(i+1)+t._rDelay*i):o,s>0&&!r&&Ft(t,t._tTime=t._tDur*s),t.parent&&zt(t),n||Mt(t.parent,t),t},Ht=function(t){return t instanceof je?Mt(t):Zt(t,t._dur)},$t={_start:0,endTime:J,totalDuration:J},Xt=function t(e,n,r){var i,o,s,a=e.labels,u=e._recent||$t,l=e.duration()>=x?u.endTime(!1):e._dur;return T(n)&&(isNaN(n)||n in a)?(o=n.charAt(0),s="%"===n.substr(-1),i=n.indexOf("="),"<"===o||">"===o?(i>=0&&(n=n.replace(/=/,"")),("<"===o?u._start:u.endTime(u._repeat>=0))+(parseFloat(n.substr(1))||0)*(s?(i<0?u:r).totalDuration()/100:1)):i<0?(n in a||(a[n]=l),a[n]):(o=parseFloat(n.charAt(i-1)+n.substr(i+1)),s&&r&&(o=o/100*(N(r)?r[0]:r).totalDuration()),i>1?t(e,n.substr(0,i-1),r)+o:l+o)):null==n?l:+n},Vt=function(t,e,n){var r,i,o=L(e[1]),s=(o?2:1)+(t<2?0:1),a=e[s];if(o&&(a.duration=e[1]),a.parent=n,t){for(r=a,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=R(i.vars.inherit)&&i.parent;a.immediateRender=R(r.immediateRender),t<2?a.runBackwards=1:a.startAt=e[s-1]}return new Ge(e[0],a,e[s+1])},Qt=function(t,e){return t||0===t?e(t):e},Gt=function(t,e,n){return n<t?t:n>e?e:n},Kt=function(t,e){return T(t)&&(e=H.exec(t))?e[1]:""},Jt=[].slice,te=function(t,e){return t&&P(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&P(t[0]))&&!t.nodeType&&t!==l},ee=function(t,e,n){return a&&!e&&a.selector?a.selector(t):!T(t)||n||!c&&Ie()?N(t)?function(t,e,n){return void 0===n&&(n=[]),t.forEach((function(t){var r;return T(t)&&!e||te(t,1)?(r=n).push.apply(r,ee(t)):n.push(t)}))||n}(t,n):te(t)?Jt.call(t,0):t?[t]:[]:Jt.call((e||d).querySelectorAll(t),0)},ne=function(t){return t=ee(t)[0]||G("Invalid scope")||{},function(e){var n=t.current||t.nativeElement||t;return ee(e,n.querySelectorAll?n:n===t?G("Invalid scope")||d.createElement("div"):t)}},re=function(t){return t.sort((function(){return.5-Math.random()}))},ie=function(t){if(M(t))return t;var e=P(t)?t:{each:t},n=Oe(e.ease),r=e.from||0,i=parseFloat(e.base)||0,o={},s=r>0&&r<1,a=isNaN(r)||s,u=e.axis,l=r,c=r;return T(r)?l=c={center:.5,edges:.5,end:1}[r]||0:!s&&a&&(l=r[0],c=r[1]),function(t,s,d){var h,f,p,g,A,m,v,y,_,b=(d||e).length,C=o[b];if(!C){if(!(_="auto"===e.grid?0:(e.grid||[1,x])[1])){for(v=-x;v<(v=d[_++].getBoundingClientRect().left)&&_<b;);_<b&&_--}for(C=o[b]=[],h=a?Math.min(_,b)*l-.5:r%_,f=_===x?0:a?b*c/_-.5:r/_|0,v=0,y=x,m=0;m<b;m++)p=m%_-h,g=f-(m/_|0),C[m]=A=u?Math.abs("y"===u?g:p):k(p*p+g*g),A>v&&(v=A),A<y&&(y=A);"random"===r&&re(C),C.max=v-y,C.min=y,C.v=b=(parseFloat(e.amount)||parseFloat(e.each)*(_>b?b-1:u?"y"===u?b/_:_:Math.max(_,b/_))||0)*("edges"===r?-1:1),C.b=b<0?i-b:i,C.u=Kt(e.amount||e.each)||0,n=n&&b<0?Me(n):n}return b=(C[t]-C.min)/C.max||0,At(C.b+(n?n(b):b)*C.v)+C.u}},oe=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(n){var r=At(Math.round(parseFloat(n)/t)*t*e);return(r-r%1)/e+(L(n)?0:Kt(n))}},se=function(t,e){var n,r,i=N(t);return!i&&P(t)&&(n=i=t.radius||x,t.values?(t=ee(t.values),(r=!L(t[0]))&&(n*=n)):t=oe(t.increment)),Qt(e,i?M(t)?function(e){return r=t(e),Math.abs(r-e)<=n?r:e}:function(e){for(var i,o,s=parseFloat(r?e.x:e),a=parseFloat(r?e.y:0),u=x,l=0,c=t.length;c--;)(i=r?(i=t[c].x-s)*i+(o=t[c].y-a)*o:Math.abs(t[c]-s))<u&&(u=i,l=c);return l=!n||u<=n?t[l]:e,r||l===e||L(e)?l:l+Kt(e)}:oe(t))},ae=function(t,e,n,r){return Qt(N(t)?!e:!0===n?!!(n=0):!r,(function(){return N(t)?t[~~(Math.random()*t.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((t-n/2+Math.random()*(e-t+.99*n))/n)*n*r)/r}))},ue=function(t,e,n){return Qt(n,(function(n){return t[~~e(n)]}))},le=function(t){for(var e,n,r,i,o=0,s="";~(e=t.indexOf("random(",o));)r=t.indexOf(")",e),i="["===t.charAt(e+7),n=t.substr(e+7,r-e-7).match(i?Z:j),s+=t.substr(o,e-o)+ae(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),o=r+1;return s+t.substr(o,t.length-o)},ce=function(t,e,n,r,i){var o=e-t,s=r-n;return Qt(i,(function(e){return n+((e-t)/o*s||0)}))},de=function(t,e,n){var r,i,o,s=t.labels,a=x;for(r in s)(i=s[r]-e)<0==!!n&&i&&a>(i=Math.abs(i))&&(o=r,a=i);return o},he=function(t,e,n){var r,i,o,s=t.vars,u=s[e],l=a,c=t._ctx;if(u)return r=s[e+"Params"],i=s.callbackScope||t,n&&it.length&&yt(),c&&(a=c),o=r?u.apply(i,r):u.call(i),a=l,o},fe=function(t){return Tt(t),t.scrollTrigger&&t.scrollTrigger.kill(!!s),t.progress()<1&&he(t,"onInterrupt"),t},pe=[],ge=function(t){if(D()&&t){var e=(t=!t.name&&t.default||t).name,n=M(t),r=e&&!n&&t.init?function(){this._props=[]}:t,i={init:J,render:an,add:Ue,kill:ln,modifier:un,rawVars:0},o={targetTest:0,get:0,getSetter:nn,aliases:{},register:0};if(Ie(),t!==r){if(st[e])return;Ct(r,Ct(It(t,i),o)),wt(r.prototype,wt(i,It(t,o))),st[r.prop=e]=r,t.targetTest&&(lt.push(r),rt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}K(e,r),t.register&&t.register(Bn,r,hn)}else t&&pe.push(t)},Ae=255,me={aqua:[0,Ae,Ae],lime:[0,Ae,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Ae],navy:[0,0,128],white:[Ae,Ae,Ae],olive:[128,128,0],yellow:[Ae,Ae,0],orange:[Ae,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Ae,0,0],pink:[Ae,192,203],cyan:[0,Ae,Ae],transparent:[Ae,Ae,Ae,0]},ve=function(t,e,n){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(n-e)*t*6:t<.5?n:3*t<2?e+(n-e)*(2/3-t)*6:e)*Ae+.5|0},ye=function(t,e,n){var r,i,o,s,a,u,l,c,d,h,f=t?L(t)?[t>>16,t>>8&Ae,t&Ae]:0:me.black;if(!f){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),me[t])f=me[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),i=t.charAt(2),o=t.charAt(3),t="#"+r+r+i+i+o+o+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(f=parseInt(t.substr(1,6),16))>>16,f>>8&Ae,f&Ae,parseInt(t.substr(7),16)/255];f=[(t=parseInt(t.substr(1),16))>>16,t>>8&Ae,t&Ae]}else if("hsl"===t.substr(0,3))if(f=h=t.match(j),e){if(~t.indexOf("="))return f=t.match(Y),n&&f.length<4&&(f[3]=1),f}else s=+f[0]%360/360,a=+f[1]/100,r=2*(u=+f[2]/100)-(i=u<=.5?u*(a+1):u+a-u*a),f.length>3&&(f[3]*=1),f[0]=ve(s+1/3,r,i),f[1]=ve(s,r,i),f[2]=ve(s-1/3,r,i);else f=t.match(j)||me.transparent;f=f.map(Number)}return e&&!h&&(r=f[0]/Ae,i=f[1]/Ae,o=f[2]/Ae,u=((l=Math.max(r,i,o))+(c=Math.min(r,i,o)))/2,l===c?s=a=0:(d=l-c,a=u>.5?d/(2-l-c):d/(l+c),s=l===r?(i-o)/d+(i<o?6:0):l===i?(o-r)/d+2:(r-i)/d+4,s*=60),f[0]=~~(s+.5),f[1]=~~(100*a+.5),f[2]=~~(100*u+.5)),n&&f.length<4&&(f[3]=1),f},_e=function(t){var e=[],n=[],r=-1;return t.split(xe).forEach((function(t){var i=t.match(W)||[];e.push.apply(e,i),n.push(r+=i.length+1)})),e.c=n,e},be=function(t,e,n){var r,i,o,s,a="",u=(t+a).match(xe),l=e?"hsla(":"rgba(",c=0;if(!u)return t;if(u=u.map((function(t){return(t=ye(t,e,1))&&l+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),n&&(o=_e(t),(r=n.c).join(a)!==o.c.join(a)))for(s=(i=t.replace(xe,"1").split(W)).length-1;c<s;c++)a+=i[c]+(~r.indexOf(c)?u.shift()||l+"0,0,0,0)":(o.length?o:u.length?u:n).shift());if(!i)for(s=(i=t.split(xe)).length-1;c<s;c++)a+=i[c]+u[c];return a+i[s]},xe=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in me)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Ce=/hsl[a]?\(/,we=function(t){var e,n=t.join(" ");if(xe.lastIndex=0,xe.test(n))return e=Ce.test(n),t[1]=be(t[1],e),t[0]=be(t[0],e,_e(t[1])),!0},Be=function(){var t,e,n,r,i,o,s=Date.now,a=500,u=33,f=s(),p=f,A=1e3/240,m=A,v=[],y=function n(l){var c,d,h,g,y=s()-p,_=!0===l;if(y>a&&(f+=y-u),((c=(h=(p+=y)-f)-m)>0||_)&&(g=++r.frame,i=h-1e3*r.time,r.time=h/=1e3,m+=c+(c>=A?4:A-c),d=1),_||(t=e(n)),d)for(o=0;o<v.length;o++)v[o](h,i,g,l)};return r={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(t){return i/(1e3/(t||60))},wake:function(){h&&(!c&&D()&&(l=c=window,d=l.document||{},$.gsap=Bn,(l.gsapVersions||(l.gsapVersions=[])).push(Bn.version),V(X||l.GreenSockGlobals||!l.gsap&&l||{}),n=l.requestAnimationFrame,pe.forEach(ge)),t&&r.sleep(),e=n||function(t){return setTimeout(t,m-1e3*r.time+1|0)},g=1,y(2))},sleep:function(){(n?l.cancelAnimationFrame:clearTimeout)(t),g=0,e=J},lagSmoothing:function(t,e){a=t||1/0,u=Math.min(e||33,a)},fps:function(t){A=1e3/(t||240),m=1e3*r.time+A},add:function(t,e,n){var i=e?function(e,n,o,s){t(e,n,o,s),r.remove(i)}:t;return r.remove(t),v[n?"unshift":"push"](i),Ie(),i},remove:function(t,e){~(e=v.indexOf(t))&&v.splice(e,1)&&o>=e&&o--},_listeners:v}}(),Ie=function(){return!g&&Be.wake()},ke={},Se=/^[\d.\-M][\d.\-,\s]/,Ee=/["']/g,Te=function(t){for(var e,n,r,i={},o=t.substr(1,t.length-3).split(":"),s=o[0],a=1,u=o.length;a<u;a++)n=o[a],e=a!==u-1?n.lastIndexOf(","):n.length,r=n.substr(0,e),i[s]=isNaN(r)?r.replace(Ee,"").trim():+r,s=n.substr(e+1).trim();return i},Me=function(t){return function(e){return 1-t(1-e)}},Le=function t(e,n){for(var r,i=e._first;i;)i instanceof je?t(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?t(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},Oe=function(t,e){return t&&(M(t)?t:ke[t]||function(t){var e,n,r,i,o=(t+"").split("("),s=ke[o[0]];return s&&o.length>1&&s.config?s.config.apply(null,~t.indexOf("{")?[Te(o[1])]:(e=t,n=e.indexOf("(")+1,r=e.indexOf(")"),i=e.indexOf("(",n),e.substring(n,~i&&i<r?e.indexOf(")",r+1):r)).split(",").map(bt)):ke._CE&&Se.test(t)?ke._CE("",t):s}(t))||e},Pe=function(t,e,n,r){void 0===n&&(n=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,o={easeIn:e,easeOut:n,easeInOut:r};return pt(t,(function(t){for(var e in ke[t]=$[t]=o,ke[i=t.toLowerCase()]=n,o)ke[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=ke[t+"."+e]=o[e]})),o},Re=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},De=function t(e,n,r){var i=n>=1?n:1,o=(r||(e?.3:.45))/(n<1?n:1),s=o/w*(Math.asin(1/i)||0),a=function(t){return 1===t?1:i*Math.pow(2,-10*t)*E((t-s)*o)+1},u="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Re(a);return o=w/o,u.config=function(n,r){return t(e,n,r)},u},ze=function t(e,n){void 0===n&&(n=1.70158);var r=function(t){return t?--t*t*((n+1)*t+n)+1:0},i="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:Re(r);return i.config=function(n){return t(e,n)},i};pt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var n=e<5?e+1:e;Pe(t+",Power"+(n-1),e?function(t){return Math.pow(t,n)}:function(t){return t},(function(t){return 1-Math.pow(1-t,n)}),(function(t){return t<.5?Math.pow(2*t,n)/2:1-Math.pow(2*(1-t),n)/2}))})),ke.Linear.easeNone=ke.none=ke.Linear.easeIn,Pe("Elastic",De("in"),De("out"),De()),A=7.5625,v=1/(m=2.75),Pe("Bounce",(function(t){return 1-y(1-t)}),y=function(t){return t<v?A*t*t:t<.7272727272727273?A*Math.pow(t-1.5/m,2)+.75:t<.9090909090909092?A*(t-=2.25/m)*t+.9375:A*Math.pow(t-2.625/m,2)+.984375}),Pe("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Pe("Circ",(function(t){return-(k(1-t*t)-1)})),Pe("Sine",(function(t){return 1===t?1:1-S(t*B)})),Pe("Back",ze("in"),ze("out"),ze()),ke.SteppedEase=ke.steps=$.SteppedEase={config:function(t,e){void 0===t&&(t=1);var n=1/t,r=t+(e?0:1),i=e?1:0;return function(t){return((r*Gt(0,.99999999,t)|0)+i)*n}}},b.ease=ke["quad.out"],pt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ct+=t+","+t+"Params,"}));var Fe=function(t,e){this.id=I++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:ft,this.set=e?e.getSetter:nn},Ne=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Zt(this,+t.duration,1,1),this.data=t.data,a&&(this._ctx=a,a.data.push(this)),g||Be.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Zt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Ie(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(Ft(this,t),!n._dp||n.parent||Nt(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&jt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===C||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),_t(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Pt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Pt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*n,e):this._repeat?Rt(this._tTime,n)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var n=this.parent&&this._ts?Dt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Gt(-Math.abs(this._delay),this._tDur,n),!1!==e),zt(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Ie(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==C&&(this._tTime-=C)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&jt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(R(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Dt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=nt);var e=s;return s=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),s=e,this},e.globalTime=function(t){for(var e=this,n=arguments.length?t:e.rawTime();e;)n=e._start+n/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):n},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Ht(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Ht(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Xt(this,t),R(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,R(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,n=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=n&&t<this.endTime(!0)-C))},e.eventCallback=function(t,e,n){var r=this.vars;return arguments.length>1?(e?(r[t]=e,n&&(r[t+"Params"]=n),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(n){var r=M(t)?t:xt,i=function(){var t=e.then;e.then=null,M(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),n(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){fe(this)},t}();Ct(Ne.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var je=function(t){function e(e,n){var i;return void 0===e&&(e={}),(i=t.call(this,e)||this).labels={},i.smoothChildTiming=!!e.smoothChildTiming,i.autoRemoveChildren=!!e.autoRemoveChildren,i._sort=R(e.sortChildren),u&&jt(e.parent||u,r(i),n),e.reversed&&i.reverse(),e.paused&&i.paused(!0),e.scrollTrigger&&Yt(r(i),e.scrollTrigger),i}i(e,t);var n=e.prototype;return n.to=function(t,e,n){return Vt(0,arguments,this),this},n.from=function(t,e,n){return Vt(1,arguments,this),this},n.fromTo=function(t,e,n,r){return Vt(2,arguments,this),this},n.set=function(t,e,n){return e.duration=0,e.parent=this,kt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Ge(t,e,Xt(this,n),1),this},n.call=function(t,e,n){return jt(this,Ge.delayedCall(0,t,e),n)},n.staggerTo=function(t,e,n,r,i,o,s){return n.duration=e,n.stagger=n.stagger||r,n.onComplete=o,n.onCompleteParams=s,n.parent=this,new Ge(t,n,Xt(this,i)),this},n.staggerFrom=function(t,e,n,r,i,o,s){return n.runBackwards=1,kt(n).immediateRender=R(n.immediateRender),this.staggerTo(t,e,n,r,i,o,s)},n.staggerFromTo=function(t,e,n,r,i,o,s,a){return r.startAt=n,kt(r).immediateRender=R(r.immediateRender),this.staggerTo(t,e,r,i,o,s,a)},n.render=function(t,e,n){var r,i,o,a,l,c,d,h,f,p,g,A,m=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,_=t<=0?0:At(t),b=this._zTime<0!=t<0&&(this._initted||!y);if(this!==u&&_>v&&t>=0&&(_=v),_!==this._tTime||n||b){if(m!==this._time&&y&&(_+=this._time-m,t+=this._time-m),r=_,f=this._start,c=!(h=this._ts),b&&(y||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(g=this._yoyo,l=y+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*l+t,e,n);if(r=At(_%l),_===v?(a=this._repeat,r=y):((a=~~(_/l))&&a===_/l&&(r=y,a--),r>y&&(r=y)),p=Rt(this._tTime,l),!m&&this._tTime&&p!==a&&this._tTime-p*l-this._dur<=0&&(p=a),g&&1&a&&(r=y-r,A=1),a!==p&&!this._lock){var x=g&&1&p,w=x===(g&&1&a);if(a<p&&(x=!x),m=x?0:_%y?y:_,this._lock=1,this.render(m||(A?0:At(a*l)),e,!y)._lock=0,this._tTime=_,!e&&this.parent&&he(this,"onRepeat"),this.vars.repeatRefresh&&!A&&(this.invalidate()._lock=1),m&&m!==this._time||c!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,w&&(this._lock=2,m=x?y:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!A&&this.invalidate()),this._lock=0,!this._ts&&!c)return this;Le(this,A)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(t,e,n){var r;if(n>e)for(r=t._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,At(m),At(r)),d&&(_-=r-(r=d._start))),this._tTime=_,this._time=r,this._act=!h,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&r&&!e&&!a&&(he(this,"onStart"),this._tTime!==_))return this;if(r>=m&&t>=0)for(i=this._first;i;){if(o=i._next,(i._act||r>=i._start)&&i._ts&&d!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,e,n),r!==this._time||!this._ts&&!c){d=0,o&&(_+=this._zTime=-1e-8);break}}i=o}else{i=this._last;for(var B=t<0?t:r;i;){if(o=i._prev,(i._act||B<=i._end)&&i._ts&&d!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(B-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(B-i._start)*i._ts,e,n||s&&(i._initted||i._startAt)),r!==this._time||!this._ts&&!c){d=0,o&&(_+=this._zTime=B?-1e-8:C);break}}i=o}}if(d&&!e&&(this.pause(),d.render(r>=m?0:-1e-8)._zTime=r>=m?1:-1,this._ts))return this._start=f,zt(this),this.render(t,e,n);this._onUpdate&&!e&&he(this,"onUpdate",!0),(_===v&&this._tTime>=this.totalDuration()||!_&&m)&&(f!==this._start&&Math.abs(h)===Math.abs(this._ts)||this._lock||((t||!y)&&(_===v&&this._ts>0||!_&&this._ts<0)&&Tt(this,1),e||t<0&&!m||!_&&!m&&v||(he(this,_===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(_<v&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(t,e){var n=this;if(L(e)||(e=Xt(this,e,t)),!(t instanceof Ne)){if(N(t))return t.forEach((function(t){return n.add(t,e)})),this;if(T(t))return this.addLabel(t,e);if(!M(t))return this;t=Ge.delayedCall(0,t)}return this!==t?jt(this,t,e):this},n.getChildren=function(t,e,n,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===n&&(n=!0),void 0===r&&(r=-x);for(var i=[],o=this._first;o;)o._start>=r&&(o instanceof Ge?e&&i.push(o):(n&&i.push(o),t&&i.push.apply(i,o.getChildren(!0,e,n)))),o=o._next;return i},n.getById=function(t){for(var e=this.getChildren(1,1,1),n=e.length;n--;)if(e[n].vars.id===t)return e[n]},n.remove=function(t){return T(t)?this.removeLabel(t):M(t)?this.killTweensOf(t):(Et(this,t),t===this._recent&&(this._recent=this._last),Mt(this))},n.totalTime=function(e,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=At(Be.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,n),this._forcing=0,this):this._tTime},n.addLabel=function(t,e){return this.labels[t]=Xt(this,e),this},n.removeLabel=function(t){return delete this.labels[t],this},n.addPause=function(t,e,n){var r=Ge.delayedCall(0,e||J,n);return r.data="isPause",this._hasPause=1,jt(this,r,Xt(this,t))},n.removePause=function(t){var e=this._first;for(t=Xt(this,t);e;)e._start===t&&"isPause"===e.data&&Tt(e),e=e._next},n.killTweensOf=function(t,e,n){for(var r=this.getTweensOf(t,n),i=r.length;i--;)Ye!==r[i]&&r[i].kill(t,e);return this},n.getTweensOf=function(t,e){for(var n,r=[],i=ee(t),o=this._first,s=L(e);o;)o instanceof Ge?vt(o._targets,i)&&(s?(!Ye||o._initted&&o._ts)&&o.globalTime(0)<=e&&o.globalTime(o.totalDuration())>e:!e||o.isActive())&&r.push(o):(n=o.getTweensOf(i,e)).length&&r.push.apply(r,n),o=o._next;return r},n.tweenTo=function(t,e){e=e||{};var n,r=this,i=Xt(r,t),o=e,s=o.startAt,a=o.onStart,u=o.onStartParams,l=o.immediateRender,c=Ge.to(r,Ct({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(s&&"time"in s?s.time:r._time))/r.timeScale())||C,onStart:function(){if(r.pause(),!n){var t=e.duration||Math.abs((i-(s&&"time"in s?s.time:r._time))/r.timeScale());c._dur!==t&&Zt(c,t,0,1).render(c._time,!0,!0),n=1}a&&a.apply(c,u||[])}},e));return l?c.render(0):c},n.tweenFromTo=function(t,e,n){return this.tweenTo(e,Ct({startAt:{time:Xt(this,t)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(t){return void 0===t&&(t=this._time),de(this,Xt(this,t))},n.previousLabel=function(t){return void 0===t&&(t=this._time),de(this,Xt(this,t),1)},n.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+C)},n.shiftChildren=function(t,e,n){void 0===n&&(n=0);for(var r,i=this._first,o=this.labels;i;)i._start>=n&&(i._start+=t,i._end+=t),i=i._next;if(e)for(r in o)o[r]>=n&&(o[r]+=t);return Mt(this)},n.invalidate=function(e){var n=this._first;for(this._lock=0;n;)n.invalidate(e),n=n._next;return t.prototype.invalidate.call(this,e)},n.clear=function(t){void 0===t&&(t=!0);for(var e,n=this._first;n;)e=n._next,this.remove(n),n=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Mt(this)},n.totalDuration=function(t){var e,n,r,i=0,o=this,s=o._last,a=x;if(arguments.length)return o.timeScale((o._repeat<0?o.duration():o.totalDuration())/(o.reversed()?-t:t));if(o._dirty){for(r=o.parent;s;)e=s._prev,s._dirty&&s.totalDuration(),(n=s._start)>a&&o._sort&&s._ts&&!o._lock?(o._lock=1,jt(o,s,n-s._delay,1)._lock=0):a=n,n<0&&s._ts&&(i-=n,(!r&&!o._dp||r&&r.smoothChildTiming)&&(o._start+=n/o._ts,o._time-=n,o._tTime-=n),o.shiftChildren(-n,!1,-Infinity),a=0),s._end>i&&s._ts&&(i=s._end),s=e;Zt(o,o===u&&o._time>i?o._time:i,1,1),o._dirty=0}return o._tDur},e.updateRoot=function(t){if(u._ts&&(_t(u,Dt(t,u)),f=Be.frame),Be.frame>=ut){ut+=_.autoSleep||120;var e=u._first;if((!e||!e._ts)&&_.autoSleep&&Be._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Be.sleep()}}},e}(Ne);Ct(je.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ye,We,qe=function(t,e,n,r,i,o,s){var a,u,l,c,d,h,f,p,g=new hn(this._pt,t,e,0,1,sn,null,i),A=0,m=0;for(g.b=n,g.e=r,n+="",(f=~(r+="").indexOf("random("))&&(r=le(r)),o&&(o(p=[n,r],t,e),n=p[0],r=p[1]),u=n.match(q)||[];a=q.exec(r);)c=a[0],d=r.substring(A,a.index),l?l=(l+1)%5:"rgba("===d.substr(-5)&&(l=1),c!==u[m++]&&(h=parseFloat(u[m-1])||0,g._pt={_next:g._pt,p:d||1===m?d:",",s:h,c:"="===c.charAt(1)?mt(h,c)-h:parseFloat(c)-h,m:l&&l<4?Math.round:0},A=q.lastIndex);return g.c=A<r.length?r.substring(A,r.length):"",g.fp=s,(U.test(r)||f)&&(g.e=0),this._pt=g,g},Ue=function(t,e,n,r,i,o,s,a,u,l){M(r)&&(r=r(i||0,t,o));var c,d=t[e],h="get"!==n?n:M(d)?u?t[e.indexOf("set")||!M(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():d,f=M(d)?u?tn:Je:Ke;if(T(r)&&(~r.indexOf("random(")&&(r=le(r)),"="===r.charAt(1)&&((c=mt(h,r)+(Kt(h)||0))||0===c)&&(r=c)),!l||h!==r||We)return isNaN(h*r)||""===r?(!d&&!(e in t)&&Q(e,r),qe.call(this,t,e,h,r,f,a||_.stringFilter,u)):(c=new hn(this._pt,t,e,+h||0,r-(h||0),"boolean"==typeof d?on:rn,0,f),u&&(c.fp=u),s&&c.modifier(s,this,t),this._pt=c)},Ze=function(t,e,n,r,i,o){var s,a,u,l;if(st[t]&&!1!==(s=new st[t]).init(i,s.rawVars?e[t]:function(t,e,n,r,i){if(M(t)&&(t=Xe(t,i,e,n,r)),!P(t)||t.style&&t.nodeType||N(t)||F(t))return T(t)?Xe(t,i,e,n,r):t;var o,s={};for(o in t)s[o]=Xe(t[o],i,e,n,r);return s}(e[t],r,i,o,n),n,r,o)&&(n._pt=a=new hn(n._pt,i,t,0,1,s.render,s,0,s.priority),n!==p))for(u=n._ptLookup[n._targets.indexOf(i)],l=s._props.length;l--;)u[s._props[l]]=a;return s},He=function t(e,n,r){var i,a,l,c,d,h,f,p,g,A,m,v,y,_=e.vars,w=_.ease,B=_.startAt,I=_.immediateRender,k=_.lazy,S=_.onUpdate,E=_.runBackwards,T=_.yoyoEase,M=_.keyframes,L=_.autoRevert,O=e._dur,P=e._startAt,D=e._targets,z=e.parent,F=z&&"nested"===z.data?z.vars.targets:D,N="auto"===e._overwrite&&!o,j=e.timeline;if(j&&(!M||!w)&&(w="none"),e._ease=Oe(w,b.ease),e._yEase=T?Me(Oe(!0===T?w:T,b.ease)):0,T&&e._yoyo&&!e._repeat&&(T=e._yEase,e._yEase=e._ease,e._ease=T),e._from=!j&&!!_.runBackwards,!j||M&&!_.stagger){if(v=(p=D[0]?ht(D[0]).harness:0)&&_[p.prop],i=It(_,rt),P&&(P._zTime<0&&P.progress(1),n<0&&E&&I&&!L?P.render(-1,!0):P.revert(E&&O?et:tt),P._lazy=0),B){if(Tt(e._startAt=Ge.set(D,Ct({data:"isStart",overwrite:!1,parent:z,immediateRender:!0,lazy:!P&&R(k),startAt:null,delay:0,onUpdate:S&&function(){return he(e,"onUpdate")},stagger:0},B))),e._startAt._dp=0,e._startAt._sat=e,n<0&&(s||!I&&!L)&&e._startAt.revert(et),I&&O&&n<=0&&r<=0)return void(n&&(e._zTime=n))}else if(E&&O&&!P)if(n&&(I=!1),l=Ct({overwrite:!1,data:"isFromStart",lazy:I&&!P&&R(k),immediateRender:I,stagger:0,parent:z},i),v&&(l[p.prop]=v),Tt(e._startAt=Ge.set(D,l)),e._startAt._dp=0,e._startAt._sat=e,n<0&&(s?e._startAt.revert(et):e._startAt.render(-1,!0)),e._zTime=n,I){if(!n)return}else t(e._startAt,C,C);for(e._pt=e._ptCache=0,k=O&&R(k)||k&&!O,a=0;a<D.length;a++){if(f=(d=D[a])._gsap||dt(D)[a]._gsap,e._ptLookup[a]=A={},ot[f.id]&&it.length&&yt(),m=F===D?a:F.indexOf(d),p&&!1!==(g=new p).init(d,v||i,e,m,F)&&(e._pt=c=new hn(e._pt,d,g.name,0,1,g.render,g,0,g.priority),g._props.forEach((function(t){A[t]=c})),g.priority&&(h=1)),!p||v)for(l in i)st[l]&&(g=Ze(l,i,e,m,d,F))?g.priority&&(h=1):A[l]=c=Ue.call(e,d,l,"get",i[l],m,F,0,_.stringFilter);e._op&&e._op[a]&&e.kill(d,e._op[a]),N&&e._pt&&(Ye=e,u.killTweensOf(d,A,e.globalTime(n)),y=!e.parent,Ye=0),e._pt&&k&&(ot[f.id]=1)}h&&dn(e),e._onInit&&e._onInit(e)}e._onUpdate=S,e._initted=(!e._op||e._pt)&&!y,M&&n<=0&&j.render(x,!0,!0)},$e=function(t,e,n,r){var i,o,s=e.ease||r||"power1.inOut";if(N(e))o=n[t]||(n[t]=[]),e.forEach((function(t,n){return o.push({t:n/(e.length-1)*100,v:t,e:s})}));else for(i in e)o=n[i]||(n[i]=[]),"ease"===i||o.push({t:parseFloat(t),v:e[i],e:s})},Xe=function(t,e,n,r,i){return M(t)?t.call(e,n,r,i):T(t)&&~t.indexOf("random(")?le(t):t},Ve=ct+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Qe={};pt(Ve+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Qe[t]=1}));var Ge=function(t){function e(e,n,i,s){var a;"number"==typeof n&&(i.duration=n,n=i,i=null);var l,c,d,h,f,p,g,A,m=(a=t.call(this,s?n:kt(n))||this).vars,v=m.duration,y=m.delay,b=m.immediateRender,x=m.stagger,C=m.overwrite,w=m.keyframes,B=m.defaults,I=m.scrollTrigger,k=m.yoyoEase,S=n.parent||u,E=(N(e)||F(e)?L(e[0]):"length"in n)?[e]:ee(e);if(a._targets=E.length?dt(E):G("GSAP target "+e+" not found. https://gsap.com",!_.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=C,w||x||z(v)||z(y)){if(n=a.vars,(l=a.timeline=new je({data:"nested",defaults:B||{},targets:S&&"nested"===S.data?S.vars.targets:E})).kill(),l.parent=l._dp=r(a),l._start=0,x||z(v)||z(y)){if(h=E.length,g=x&&ie(x),P(x))for(f in x)~Ve.indexOf(f)&&(A||(A={}),A[f]=x[f]);for(c=0;c<h;c++)(d=It(n,Qe)).stagger=0,k&&(d.yoyoEase=k),A&&wt(d,A),p=E[c],d.duration=+Xe(v,r(a),c,p,E),d.delay=(+Xe(y,r(a),c,p,E)||0)-a._delay,!x&&1===h&&d.delay&&(a._delay=y=d.delay,a._start+=y,d.delay=0),l.to(p,d,g?g(c,p,E):0),l._ease=ke.none;l.duration()?v=y=0:a.timeline=0}else if(w){kt(Ct(l.vars.defaults,{ease:"none"})),l._ease=Oe(w.ease||n.ease||"none");var T,M,O,D=0;if(N(w))w.forEach((function(t){return l.to(E,t,">")})),l.duration();else{for(f in d={},w)"ease"===f||"easeEach"===f||$e(f,w[f],d,w.easeEach);for(f in d)for(T=d[f].sort((function(t,e){return t.t-e.t})),D=0,c=0;c<T.length;c++)(O={ease:(M=T[c]).e,duration:(M.t-(c?T[c-1].t:0))/100*v})[f]=M.v,l.to(E,O,D),D+=O.duration;l.duration()<v&&l.to({},{duration:v-l.duration()})}}v||a.duration(v=l.duration())}else a.timeline=0;return!0!==C||o||(Ye=r(a),u.killTweensOf(E),Ye=0),jt(S,r(a),i),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(b||!v&&!w&&a._start===At(S._time)&&R(b)&&Ot(r(a))&&"nested"!==S.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-y)||0)),I&&Yt(r(a),I),a}i(e,t);var n=e.prototype;return n.render=function(t,e,n){var r,i,o,a,u,l,c,d,h,f=this._time,p=this._tDur,g=this._dur,A=t<0,m=t>p-C&&!A?p:t<C?0:t;if(g){if(m!==this._tTime||!t||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==A){if(r=m,d=this.timeline,this._repeat){if(a=g+this._rDelay,this._repeat<-1&&A)return this.totalTime(100*a+t,e,n);if(r=At(m%a),m===p?(o=this._repeat,r=g):((o=~~(m/a))&&o===At(m/a)&&(r=g,o--),r>g&&(r=g)),(l=this._yoyo&&1&o)&&(h=this._yEase,r=g-r),u=Rt(this._tTime,a),r===f&&!n&&this._initted&&o===u)return this._tTime=m,this;o!==u&&(d&&this._yEase&&Le(d,l),this.vars.repeatRefresh&&!l&&!this._lock&&this._time!==g&&this._initted&&(this._lock=n=1,this.render(At(a*o),!0).invalidate()._lock=0))}if(!this._initted){if(Wt(this,A?t:r,n,e,m))return this._tTime=0,this;if(!(f===this._time||n&&this.vars.repeatRefresh&&o!==u))return this;if(g!==this._dur)return this.render(t,e,n)}if(this._tTime=m,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(h||this._ease)(r/g),this._from&&(this.ratio=c=1-c),r&&!f&&!e&&!o&&(he(this,"onStart"),this._tTime!==m))return this;for(i=this._pt;i;)i.r(c,i.d),i=i._next;d&&d.render(t<0?t:!r&&l?-1e-8:d._dur*d._ease(r/this._dur),e,n)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(A&&Lt(this,t,0,n),he(this,"onUpdate")),this._repeat&&o!==u&&this.vars.onRepeat&&!e&&this.parent&&he(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(A&&!this._onUpdate&&Lt(this,t,0,!0),(t||!g)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&Tt(this,1),e||A&&!f||!(m||f||l)||(he(this,m===p?"onComplete":"onReverseComplete",!0),this._prom&&!(m<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,n,r){var i,o,a,u=t.ratio,l=e<0||!e&&(!t._start&&qt(t)&&(t._initted||!Ut(t))||(t._ts<0||t._dp._ts<0)&&!Ut(t))?0:1,c=t._rDelay,d=0;if(c&&t._repeat&&(d=Gt(0,t._tDur,e),o=Rt(d,c),t._yoyo&&1&o&&(l=1-l),o!==Rt(t._tTime,c)&&(u=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==u||s||r||t._zTime===C||!e&&t._zTime){if(!t._initted&&Wt(t,e,r,n,d))return;for(a=t._zTime,t._zTime=e||(n?C:0),n||(n=e&&!a),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=d,i=t._pt;i;)i.r(l,i.d),i=i._next;e<0&&Lt(t,e,0,!0),t._onUpdate&&!n&&he(t,"onUpdate"),d&&t._repeat&&!n&&t.parent&&he(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&Tt(t,1),n||s||(he(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,n);return this},n.targets=function(){return this._targets},n.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},n.resetTo=function(t,e,n,r,i){g||Be.wake(),this._ts||this.play();var o=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||He(this,o),function(t,e,n,r,i,o,s,a){var u,l,c,d,h=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!h)for(h=t._ptCache[e]=[],c=t._ptLookup,d=t._targets.length;d--;){if((u=c[d][e])&&u.d&&u.d._pt)for(u=u.d._pt;u&&u.p!==e&&u.fp!==e;)u=u._next;if(!u)return We=1,t.vars[e]="+=0",He(t,s),We=0,a?G(e+" not eligible for reset"):1;h.push(u)}for(d=h.length;d--;)(u=(l=h[d])._pt||l).s=!r&&0!==r||i?u.s+(r||0)+o*u.c:r,u.c=n-u.s,l.e&&(l.e=gt(n)+Kt(l.e)),l.b&&(l.b=u.s+Kt(l.b))}(this,t,e,n,r,this._ease(o/this._dur),o,i)?this.resetTo(t,e,n,r,1):(Ft(this,0),this.parent||St(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?fe(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ye&&!0!==Ye.vars.overwrite)._first||fe(this),this.parent&&n!==this.timeline.totalDuration()&&Zt(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,o,s,a,u,l,c=this._targets,d=t?ee(t):c,h=this._ptLookup,f=this._pt;if((!e||"all"===e)&&function(t,e){for(var n=t.length,r=n===e.length;r&&n--&&t[n]===e[n];);return n<0}(c,d))return"all"===e&&(this._pt=0),fe(this);for(r=this._op=this._op||[],"all"!==e&&(T(e)&&(a={},pt(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var n,r,i,o,s=t[0]?ht(t[0]).harness:0,a=s&&s.aliases;if(!a)return e;for(r in n=wt({},e),a)if(r in n)for(i=(o=a[r].split(",")).length;i--;)n[o[i]]=n[r];return n}(c,e)),l=c.length;l--;)if(~d.indexOf(c[l]))for(a in i=h[l],"all"===e?(r[l]=e,s=i,o={}):(o=r[l]=r[l]||{},s=e),s)(u=i&&i[a])&&("kill"in u.d&&!0!==u.d.kill(a)||Et(this,u,"_pt"),delete i[a]),"all"!==o&&(o[a]=1);return this._initted&&!this._pt&&f&&fe(this),this},e.to=function(t,n){return new e(t,n,arguments[2])},e.from=function(t,e){return Vt(1,arguments)},e.delayedCall=function(t,n,r,i){return new e(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},e.fromTo=function(t,e,n){return Vt(2,arguments)},e.set=function(t,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new e(t,n)},e.killTweensOf=function(t,e,n){return u.killTweensOf(t,e,n)},e}(Ne);Ct(Ge.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),pt("staggerTo,staggerFrom,staggerFromTo",(function(t){Ge[t]=function(){var e=new je,n=Jt.call(arguments,0);return n.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,n)}}));var Ke=function(t,e,n){return t[e]=n},Je=function(t,e,n){return t[e](n)},tn=function(t,e,n,r){return t[e](r.fp,n)},en=function(t,e,n){return t.setAttribute(e,n)},nn=function(t,e){return M(t[e])?Je:O(t[e])&&t.setAttribute?en:Ke},rn=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},on=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},sn=function(t,e){var n=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*t):Math.round(1e4*(n.s+n.c*t))/1e4)+r,n=n._next;r+=e.c}e.set(e.t,e.p,r,e)},an=function(t,e){for(var n=e._pt;n;)n.r(t,n.d),n=n._next},un=function(t,e,n,r){for(var i,o=this._pt;o;)i=o._next,o.p===r&&o.modifier(t,e,n),o=i},ln=function(t){for(var e,n,r=this._pt;r;)n=r._next,r.p===t&&!r.op||r.op===t?Et(this,r,"_pt"):r.dep||(e=1),r=n;return!e},cn=function(t,e,n,r){r.mSet(t,e,r.m.call(r.tween,n,r.mt),r)},dn=function(t){for(var e,n,r,i,o=t._pt;o;){for(e=o._next,n=r;n&&n.pr>o.pr;)n=n._next;(o._prev=n?n._prev:i)?o._prev._next=o:r=o,(o._next=n)?n._prev=o:i=o,o=e}t._pt=r},hn=function(){function t(t,e,n,r,i,o,s,a,u){this.t=e,this.s=r,this.c=i,this.p=n,this.r=o||rn,this.d=s||this,this.set=a||Ke,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,n){this.mSet=this.mSet||this.set,this.set=cn,this.m=t,this.mt=n,this.tween=e},t}();pt(ct+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return rt[t]=1})),$.TweenMax=$.TweenLite=Ge,$.TimelineLite=$.TimelineMax=je,u=new je({sortChildren:!1,defaults:b,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),_.stringFilter=we;var fn=[],pn={},gn=[],An=0,mn=0,vn=function(t){return(pn[t]||gn).map((function(t){return t()}))},yn=function(){var t=Date.now(),e=[];t-An>2&&(vn("matchMediaInit"),fn.forEach((function(t){var n,r,i,o,s=t.queries,a=t.conditions;for(r in s)(n=l.matchMedia(s[r]).matches)&&(i=1),n!==a[r]&&(a[r]=n,o=1);o&&(t.revert(),i&&e.push(t))})),vn("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),An=t,vn("matchMedia"))},_n=function(){function t(t,e){this.selector=e&&ne(e),this.data=[],this._r=[],this.isReverted=!1,this.id=mn++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,n){M(t)&&(n=e,e=t,t=M);var r=this,i=function(){var t,i=a,o=r.selector;return i&&i!==r&&i.data.push(r),n&&(r.selector=ne(n)),a=r,t=e.apply(r,arguments),M(t)&&r._r.push(t),a=i,r.selector=o,r.isReverted=!1,t};return r.last=i,t===M?i(r,(function(t){return r.add(null,t)})):t?r[t]=i:i},e.ignore=function(t){var e=a;a=null,t(this),a=e},e.getTweens=function(){var e=[];return this.data.forEach((function(n){return n instanceof t?e.push.apply(e,n.getTweens()):n instanceof Ge&&!(n.parent&&"nested"===n.parent.data)&&e.push(n)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var n=this;if(t?function(){for(var e,r=n.getTweens(),i=n.data.length;i--;)"isFlip"===(e=n.data[i]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return r.splice(r.indexOf(t),1)})));for(r.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),i=n.data.length;i--;)(e=n.data[i])instanceof je?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof Ge)&&e.revert&&e.revert(t);n._r.forEach((function(e){return e(t,n)})),n.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var r=fn.length;r--;)fn[r].id===this.id&&fn.splice(r,1)},e.revert=function(t){this.kill(t||{})},t}(),bn=function(){function t(t){this.contexts=[],this.scope=t}var e=t.prototype;return e.add=function(t,e,n){P(t)||(t={matches:t});var r,i,o,s=new _n(0,n||this.scope),u=s.conditions={};for(i in a&&!s.selector&&(s.selector=a.selector),this.contexts.push(s),e=s.add("onMatch",e),s.queries=t,t)"all"===i?o=1:(r=l.matchMedia(t[i]))&&(fn.indexOf(s)<0&&fn.push(s),(u[i]=r.matches)&&(o=1),r.addListener?r.addListener(yn):r.addEventListener("change",yn));return o&&e(s,(function(t){return s.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),xn={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e.forEach((function(t){return ge(t)}))},timeline:function(t){return new je(t)},getTweensOf:function(t,e){return u.getTweensOf(t,e)},getProperty:function(t,e,n,r){T(t)&&(t=ee(t)[0]);var i=ht(t||{}).get,o=n?xt:bt;return"native"===n&&(n=""),t?e?o((st[e]&&st[e].get||i)(t,e,n,r)):function(e,n,r){return o((st[e]&&st[e].get||i)(t,e,n,r))}:t},quickSetter:function(t,e,n){if((t=ee(t)).length>1){var r=t.map((function(t){return Bn.quickSetter(t,e,n)})),i=r.length;return function(t){for(var e=i;e--;)r[e](t)}}t=t[0]||{};var o=st[e],s=ht(t),a=s.harness&&(s.harness.aliases||{})[e]||e,u=o?function(e){var r=new o;p._pt=0,r.init(t,n?e+n:e,p,0,[t]),r.render(1,r),p._pt&&an(1,p)}:s.set(t,a);return o?u:function(e){return u(t,a,n?e+n:e,s,1)}},quickTo:function(t,e,n){var r,i=Bn.to(t,wt(((r={})[e]="+=0.1",r.paused=!0,r),n||{})),o=function(t,n,r){return i.resetTo(e,t,n,r)};return o.tween=i,o},isTweening:function(t){return u.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Oe(t.ease,b.ease)),Bt(b,t||{})},config:function(t){return Bt(_,t||{})},registerEffect:function(t){var e=t.name,n=t.effect,r=t.plugins,i=t.defaults,o=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!st[t]&&!$[t]&&G(e+" effect requires "+t+" plugin.")})),at[e]=function(t,e,r){return n(ee(t),Ct(e||{},i),r)},o&&(je.prototype[e]=function(t,n,r){return this.add(at[e](t,P(n)?n:(r=n)&&{},this),r)})},registerEase:function(t,e){ke[t]=Oe(e)},parseEase:function(t,e){return arguments.length?Oe(t,e):ke},getById:function(t){return u.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var n,r,i=new je(t);for(i.smoothChildTiming=R(t.smoothChildTiming),u.remove(i),i._dp=0,i._time=i._tTime=u._time,n=u._first;n;)r=n._next,!e&&!n._dur&&n instanceof Ge&&n.vars.onComplete===n._targets[0]||jt(i,n,n._start-n._delay),n=r;return jt(u,i,0),i},context:function(t,e){return t?new _n(t,e):a},matchMedia:function(t){return new bn(t)},matchMediaRefresh:function(){return fn.forEach((function(t){var e,n,r=t.conditions;for(n in r)r[n]&&(r[n]=!1,e=1);e&&t.revert()}))||yn()},addEventListener:function(t,e){var n=pn[t]||(pn[t]=[]);~n.indexOf(e)||n.push(e)},removeEventListener:function(t,e){var n=pn[t],r=n&&n.indexOf(e);r>=0&&n.splice(r,1)},utils:{wrap:function t(e,n,r){var i=n-e;return N(e)?ue(e,t(0,e.length),n):Qt(r,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,n,r){var i=n-e,o=2*i;return N(e)?ue(e,t(0,e.length-1),n):Qt(r,(function(t){return e+((t=(o+(t-e)%o)%o||0)>i?o-t:t)}))},distribute:ie,random:ae,snap:se,normalize:function(t,e,n){return ce(t,e,0,1,n)},getUnit:Kt,clamp:function(t,e,n){return Qt(n,(function(n){return Gt(t,e,n)}))},splitColor:ye,toArray:ee,selector:ne,mapRange:ce,pipe:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(n){return t(parseFloat(n))+(e||Kt(n))}},interpolate:function t(e,n,r,i){var o=isNaN(e+n)?0:function(t){return(1-t)*e+t*n};if(!o){var s,a,u,l,c,d=T(e),h={};if(!0===r&&(i=1)&&(r=null),d)e={p:e},n={p:n};else if(N(e)&&!N(n)){for(u=[],l=e.length,c=l-2,a=1;a<l;a++)u.push(t(e[a-1],e[a]));l--,o=function(t){t*=l;var e=Math.min(c,~~t);return u[e](t-e)},r=n}else i||(e=wt(N(e)?[]:{},e));if(!u){for(s in n)Ue.call(h,e,s,"get",n[s]);o=function(t){return an(t,h)||(d?e.p:e)}}}return Qt(r,o)},shuffle:re},install:V,effects:at,ticker:Be,updateRoot:je.updateRoot,plugins:st,globalTimeline:u,core:{PropTween:hn,globals:K,Tween:Ge,Timeline:je,Animation:Ne,getCache:ht,_removeLinkedListItem:Et,reverting:function(){return s},context:function(t){return t&&a&&(a.data.push(t),t._ctx=a),a},suppressOverwrites:function(t){return o=t}}};pt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return xn[t]=Ge[t]})),Be.add(je.updateRoot),p=xn.to({},{duration:0});var Cn=function(t,e){for(var n=t._pt;n&&n.p!==e&&n.op!==e&&n.fp!==e;)n=n._next;return n},wn=function(t,e){return{name:t,rawVars:1,init:function(t,n,r){r._onInit=function(t){var r,i;if(T(n)&&(r={},pt(n,(function(t){return r[t]=1})),n=r),e){for(i in r={},n)r[i]=e(n[i]);n=r}!function(t,e){var n,r,i,o=t._targets;for(n in e)for(r=o.length;r--;)(i=t._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=Cn(i,n)),i&&i.modifier&&i.modifier(e[n],t,o[r],n))}(t,n)}}}},Bn=xn.registerPlugin({name:"attr",init:function(t,e,n,r,i){var o,s,a;for(o in this.tween=n,e)a=t.getAttribute(o)||"",(s=this.add(t,"setAttribute",(a||0)+"",e[o],r,i,0,0,o)).op=o,s.b=a,this._props.push(o)},render:function(t,e){for(var n=e._pt;n;)s?n.set(n.t,n.p,n.b,n):n.r(t,n.d),n=n._next}},{name:"endArray",init:function(t,e){for(var n=e.length;n--;)this.add(t,n,t[n]||0,e[n],0,0,0,0,0,1)}},wn("roundProps",oe),wn("modifiers"),wn("snap",se))||xn;Ge.version=je.version=Bn.version="3.12.4",h=1,D()&&Ie();var In,kn,Sn,En,Tn,Mn,Ln,On,Pn=ke.Power0,Rn=ke.Power1,Dn=ke.Power2,zn=ke.Power3,Fn=ke.Power4,Nn=ke.Linear,jn=ke.Quad,Yn=ke.Cubic,Wn=ke.Quart,qn=ke.Quint,Un=ke.Strong,Zn=ke.Elastic,Hn=ke.Back,$n=ke.SteppedEase,Xn=ke.Bounce,Vn=ke.Sine,Qn=ke.Expo,Gn=ke.Circ,Kn={},Jn=180/Math.PI,tr=Math.PI/180,er=Math.atan2,nr=/([A-Z])/g,rr=/(left|right|width|margin|padding|x)/i,ir=/[\s,\(]\S/,or={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},sr=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},ar=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},ur=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},lr=function(t,e){var n=e.s+e.c*t;e.set(e.t,e.p,~~(n+(n<0?-.5:.5))+e.u,e)},cr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},dr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},hr=function(t,e,n){return t.style[e]=n},fr=function(t,e,n){return t.style.setProperty(e,n)},pr=function(t,e,n){return t._gsap[e]=n},gr=function(t,e,n){return t._gsap.scaleX=t._gsap.scaleY=n},Ar=function(t,e,n,r,i){var o=t._gsap;o.scaleX=o.scaleY=n,o.renderTransform(i,o)},mr=function(t,e,n,r,i){var o=t._gsap;o[e]=n,o.renderTransform(i,o)},vr="transform",yr=vr+"Origin",_r=function t(e,n){var r=this,i=this.target,o=i.style,s=i._gsap;if(e in Kn&&o){if(this.tfm=this.tfm||{},"transform"===e)return or.transform.split(",").forEach((function(e){return t.call(r,e,n)}));if(~(e=or[e]||e).indexOf(",")?e.split(",").forEach((function(t){return r.tfm[t]=Fr(i,t)})):this.tfm[e]=s.x?s[e]:Fr(i,e),e===yr&&(this.tfm.zOrigin=s.zOrigin),this.props.indexOf(vr)>=0)return;s.svg&&(this.svgo=i.getAttribute("data-svg-origin"),this.props.push(yr,n,"")),e=vr}(o||n)&&this.props.push(e,n,o[e])},br=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},xr=function(){var t,e,n=this.props,r=this.target,i=r.style,o=r._gsap;for(t=0;t<n.length;t+=3)n[t+1]?r[n[t]]=n[t+2]:n[t+2]?i[n[t]]=n[t+2]:i.removeProperty("--"===n[t].substr(0,2)?n[t]:n[t].replace(nr,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)o[e]=this.tfm[e];o.svg&&(o.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(t=Ln())&&t.isStart||i[vr]||(br(i),o.zOrigin&&i[yr]&&(i[yr]+=" "+o.zOrigin+"px",o.zOrigin=0,o.renderTransform()),o.uncache=1)}},Cr=function(t,e){var n={target:t,props:[],revert:xr,save:_r};return t._gsap||Bn.core.getCache(t),e&&e.split(",").forEach((function(t){return n.save(t)})),n},wr=function(t,e){var n=kn.createElementNS?kn.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):kn.createElement(t);return n&&n.style?n:kn.createElement(t)},Br=function t(e,n,r){var i=getComputedStyle(e);return i[n]||i.getPropertyValue(n.replace(nr,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&t(e,kr(n)||n,1)||""},Ir="O,Moz,ms,Ms,Webkit".split(","),kr=function(t,e,n){var r=(e||Tn).style,i=5;if(t in r&&!n)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(Ir[i]+t in r););return i<0?null:(3===i?"ms":i>=0?Ir[i]:"")+t},Sr=function(){"undefined"!=typeof window&&window.document&&(In=window,kn=In.document,Sn=kn.documentElement,Tn=wr("div")||{style:{}},wr("div"),vr=kr(vr),yr=vr+"Origin",Tn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",On=!!kr("perspective"),Ln=Bn.core.reverting,En=1)},Er=function t(e){var n,r=wr("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,o=this.nextSibling,s=this.style.cssText;if(Sn.appendChild(r),r.appendChild(this),this.style.display="block",e)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(o?i.insertBefore(this,o):i.appendChild(this)),Sn.removeChild(r),this.style.cssText=s,n},Tr=function(t,e){for(var n=e.length;n--;)if(t.hasAttribute(e[n]))return t.getAttribute(e[n])},Mr=function(t){var e;try{e=t.getBBox()}catch(n){e=Er.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===Er||(e=Er.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+Tr(t,["x","cx","x1"])||0,y:+Tr(t,["y","cy","y1"])||0,width:0,height:0}},Lr=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Mr(t))},Or=function(t,e){if(e){var n,r=t.style;e in Kn&&e!==yr&&(e=vr),r.removeProperty?("ms"!==(n=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty("--"===n?e:e.replace(nr,"-$1").toLowerCase())):r.removeAttribute(e)}},Pr=function(t,e,n,r,i,o){var s=new hn(t._pt,e,n,0,1,o?dr:cr);return t._pt=s,s.b=r,s.e=i,t._props.push(n),s},Rr={deg:1,rad:1,turn:1},Dr={grid:1,flex:1},zr=function t(e,n,r,i){var o,s,a,u,l=parseFloat(r)||0,c=(r+"").trim().substr((l+"").length)||"px",d=Tn.style,h=rr.test(n),f="svg"===e.tagName.toLowerCase(),p=(f?"client":"offset")+(h?"Width":"Height"),g=100,A="px"===i,m="%"===i;if(i===c||!l||Rr[i]||Rr[c])return l;if("px"!==c&&!A&&(l=t(e,n,r,"px")),u=e.getCTM&&Lr(e),(m||"%"===c)&&(Kn[n]||~n.indexOf("adius")))return o=u?e.getBBox()[h?"width":"height"]:e[p],gt(m?l/o*g:l/100*o);if(d[h?"width":"height"]=g+(A?c:i),s=~n.indexOf("adius")||"em"===i&&e.appendChild&&!f?e:e.parentNode,u&&(s=(e.ownerSVGElement||{}).parentNode),s&&s!==kn&&s.appendChild||(s=kn.body),(a=s._gsap)&&m&&a.width&&h&&a.time===Be.time&&!a.uncache)return gt(l/a.width*g);if(!m||"height"!==n&&"width"!==n)(m||"%"===c)&&!Dr[Br(s,"display")]&&(d.position=Br(e,"position")),s===e&&(d.position="static"),s.appendChild(Tn),o=Tn[p],s.removeChild(Tn),d.position="absolute";else{var v=e.style[n];e.style[n]=g+i,o=e[p],v?e.style[n]=v:Or(e,n)}return h&&m&&((a=ht(s)).time=Be.time,a.width=s[p]),gt(A?o*l/g:o&&l?g/o*l:0)},Fr=function(t,e,n,r){var i;return En||Sr(),e in or&&"transform"!==e&&~(e=or[e]).indexOf(",")&&(e=e.split(",")[0]),Kn[e]&&"transform"!==e?(i=Vr(t,r),i="transformOrigin"!==e?i[e]:i.svg?i.origin:Qr(Br(t,yr))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=Wr[e]&&Wr[e](t,e,n)||Br(t,e)||ft(t,e)||("opacity"===e?1:0)),n&&!~(i+"").trim().indexOf(" ")?zr(t,e,i,n)+n:i},Nr=function(t,e,n,r){if(!n||"none"===n){var i=kr(e,t,1),o=i&&Br(t,i,1);o&&o!==n?(e=i,n=o):"borderColor"===e&&(n=Br(t,"borderTopColor"))}var s,a,u,l,c,d,h,f,p,g,A,m=new hn(this._pt,t.style,e,0,1,sn),v=0,y=0;if(m.b=n,m.e=r,n+="","auto"==(r+="")&&(d=t.style[e],t.style[e]=r,r=Br(t,e)||r,d?t.style[e]=d:Or(t,e)),we(s=[n,r]),r=s[1],u=(n=s[0]).match(W)||[],(r.match(W)||[]).length){for(;a=W.exec(r);)h=a[0],p=r.substring(v,a.index),c?c=(c+1)%5:"rgba("!==p.substr(-5)&&"hsla("!==p.substr(-5)||(c=1),h!==(d=u[y++]||"")&&(l=parseFloat(d)||0,A=d.substr((l+"").length),"="===h.charAt(1)&&(h=mt(l,h)+A),f=parseFloat(h),g=h.substr((f+"").length),v=W.lastIndex-g.length,g||(g=g||_.units[e]||A,v===r.length&&(r+=g,m.e+=g)),A!==g&&(l=zr(t,e,d,g)||0),m._pt={_next:m._pt,p:p||1===y?p:",",s:l,c:f-l,m:c&&c<4||"zIndex"===e?Math.round:0});m.c=v<r.length?r.substring(v,r.length):""}else m.r="display"===e&&"none"===r?dr:cr;return U.test(r)&&(m.e=0),this._pt=m,m},jr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Yr=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var n,r,i,o=e.t,s=o.style,a=e.u,u=o._gsap;if("all"===a||!0===a)s.cssText="",r=1;else for(i=(a=a.split(",")).length;--i>-1;)n=a[i],Kn[n]&&(r=1,n="transformOrigin"===n?yr:vr),Or(o,n);r&&(Or(o,vr),u&&(u.svg&&o.removeAttribute("transform"),Vr(o,1),u.uncache=1,br(s)))}},Wr={clearProps:function(t,e,n,r,i){if("isFromStart"!==i.data){var o=t._pt=new hn(t._pt,e,n,0,0,Yr);return o.u=r,o.pr=-10,o.tween=i,t._props.push(n),1}}},qr=[1,0,0,1,0,0],Ur={},Zr=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},Hr=function(t){var e=Br(t,vr);return Zr(e)?qr:e.substr(7).match(Y).map(gt)},$r=function(t,e){var n,r,i,o,s=t._gsap||ht(t),a=t.style,u=Hr(t);return s.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?qr:u:(u!==qr||t.offsetParent||t===Sn||s.svg||(i=a.display,a.display="block",(n=t.parentNode)&&t.offsetParent||(o=1,r=t.nextElementSibling,Sn.appendChild(t)),u=Hr(t),i?a.display=i:Or(t,"display"),o&&(r?n.insertBefore(t,r):n?n.appendChild(t):Sn.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},Xr=function(t,e,n,r,i,o){var s,a,u,l=t._gsap,c=i||$r(t,!0),d=l.xOrigin||0,h=l.yOrigin||0,f=l.xOffset||0,p=l.yOffset||0,g=c[0],A=c[1],m=c[2],v=c[3],y=c[4],_=c[5],b=e.split(" "),x=parseFloat(b[0])||0,C=parseFloat(b[1])||0;n?c!==qr&&(a=g*v-A*m)&&(u=x*(-A/a)+C*(g/a)-(g*_-A*y)/a,x=x*(v/a)+C*(-m/a)+(m*_-v*y)/a,C=u):(x=(s=Mr(t)).x+(~b[0].indexOf("%")?x/100*s.width:x),C=s.y+(~(b[1]||b[0]).indexOf("%")?C/100*s.height:C)),r||!1!==r&&l.smooth?(y=x-d,_=C-h,l.xOffset=f+(y*g+_*m)-y,l.yOffset=p+(y*A+_*v)-_):l.xOffset=l.yOffset=0,l.xOrigin=x,l.yOrigin=C,l.smooth=!!r,l.origin=e,l.originIsAbsolute=!!n,t.style[yr]="0px 0px",o&&(Pr(o,l,"xOrigin",d,x),Pr(o,l,"yOrigin",h,C),Pr(o,l,"xOffset",f,l.xOffset),Pr(o,l,"yOffset",p,l.yOffset)),t.setAttribute("data-svg-origin",x+" "+C)},Vr=function(t,e){var n=t._gsap||new Fe(t);if("x"in n&&!e&&!n.uncache)return n;var r,i,o,s,a,u,l,c,d,h,f,p,g,A,m,v,y,b,x,C,w,B,I,k,S,E,T,M,L,O,P,R,D=t.style,z=n.scaleX<0,F="px",N="deg",j=getComputedStyle(t),Y=Br(t,yr)||"0";return r=i=o=u=l=c=d=h=f=0,s=a=1,n.svg=!(!t.getCTM||!Lr(t)),j.translate&&("none"===j.translate&&"none"===j.scale&&"none"===j.rotate||(D[vr]=("none"!==j.translate?"translate3d("+(j.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==j.rotate?"rotate("+j.rotate+") ":"")+("none"!==j.scale?"scale("+j.scale.split(" ").join(",")+") ":"")+("none"!==j[vr]?j[vr]:"")),D.scale=D.rotate=D.translate="none"),A=$r(t,n.svg),n.svg&&(n.uncache?(S=t.getBBox(),Y=n.xOrigin-S.x+"px "+(n.yOrigin-S.y)+"px",k=""):k=!e&&t.getAttribute("data-svg-origin"),Xr(t,k||Y,!!k||n.originIsAbsolute,!1!==n.smooth,A)),p=n.xOrigin||0,g=n.yOrigin||0,A!==qr&&(b=A[0],x=A[1],C=A[2],w=A[3],r=B=A[4],i=I=A[5],6===A.length?(s=Math.sqrt(b*b+x*x),a=Math.sqrt(w*w+C*C),u=b||x?er(x,b)*Jn:0,(d=C||w?er(C,w)*Jn+u:0)&&(a*=Math.abs(Math.cos(d*tr))),n.svg&&(r-=p-(p*b+g*C),i-=g-(p*x+g*w))):(R=A[6],O=A[7],T=A[8],M=A[9],L=A[10],P=A[11],r=A[12],i=A[13],o=A[14],l=(m=er(R,L))*Jn,m&&(k=B*(v=Math.cos(-m))+T*(y=Math.sin(-m)),S=I*v+M*y,E=R*v+L*y,T=B*-y+T*v,M=I*-y+M*v,L=R*-y+L*v,P=O*-y+P*v,B=k,I=S,R=E),c=(m=er(-C,L))*Jn,m&&(v=Math.cos(-m),P=w*(y=Math.sin(-m))+P*v,b=k=b*v-T*y,x=S=x*v-M*y,C=E=C*v-L*y),u=(m=er(x,b))*Jn,m&&(k=b*(v=Math.cos(m))+x*(y=Math.sin(m)),S=B*v+I*y,x=x*v-b*y,I=I*v-B*y,b=k,B=S),l&&Math.abs(l)+Math.abs(u)>359.9&&(l=u=0,c=180-c),s=gt(Math.sqrt(b*b+x*x+C*C)),a=gt(Math.sqrt(I*I+R*R)),m=er(B,I),d=Math.abs(m)>2e-4?m*Jn:0,f=P?1/(P<0?-P:P):0),n.svg&&(k=t.getAttribute("transform"),n.forceCSS=t.setAttribute("transform","")||!Zr(Br(t,vr)),k&&t.setAttribute("transform",k))),Math.abs(d)>90&&Math.abs(d)<270&&(z?(s*=-1,d+=u<=0?180:-180,u+=u<=0?180:-180):(a*=-1,d+=d<=0?180:-180)),e=e||n.uncache,n.x=r-((n.xPercent=r&&(!e&&n.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*n.xPercent/100:0)+F,n.y=i-((n.yPercent=i&&(!e&&n.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*n.yPercent/100:0)+F,n.z=o+F,n.scaleX=gt(s),n.scaleY=gt(a),n.rotation=gt(u)+N,n.rotationX=gt(l)+N,n.rotationY=gt(c)+N,n.skewX=d+N,n.skewY=h+N,n.transformPerspective=f+F,(n.zOrigin=parseFloat(Y.split(" ")[2])||!e&&n.zOrigin||0)&&(D[yr]=Qr(Y)),n.xOffset=n.yOffset=0,n.force3D=_.force3D,n.renderTransform=n.svg?ri:On?ni:Kr,n.uncache=0,n},Qr=function(t){return(t=t.split(" "))[0]+" "+t[1]},Gr=function(t,e,n){var r=Kt(e);return gt(parseFloat(e)+parseFloat(zr(t,"x",n+"px",r)))+r},Kr=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,ni(t,e)},Jr="0deg",ti="0px",ei=") ",ni=function(t,e){var n=e||this,r=n.xPercent,i=n.yPercent,o=n.x,s=n.y,a=n.z,u=n.rotation,l=n.rotationY,c=n.rotationX,d=n.skewX,h=n.skewY,f=n.scaleX,p=n.scaleY,g=n.transformPerspective,A=n.force3D,m=n.target,v=n.zOrigin,y="",_="auto"===A&&t&&1!==t||!0===A;if(v&&(c!==Jr||l!==Jr)){var b,x=parseFloat(l)*tr,C=Math.sin(x),w=Math.cos(x);x=parseFloat(c)*tr,b=Math.cos(x),o=Gr(m,o,C*b*-v),s=Gr(m,s,-Math.sin(x)*-v),a=Gr(m,a,w*b*-v+v)}g!==ti&&(y+="perspective("+g+ei),(r||i)&&(y+="translate("+r+"%, "+i+"%) "),(_||o!==ti||s!==ti||a!==ti)&&(y+=a!==ti||_?"translate3d("+o+", "+s+", "+a+") ":"translate("+o+", "+s+ei),u!==Jr&&(y+="rotate("+u+ei),l!==Jr&&(y+="rotateY("+l+ei),c!==Jr&&(y+="rotateX("+c+ei),d===Jr&&h===Jr||(y+="skew("+d+", "+h+ei),1===f&&1===p||(y+="scale("+f+", "+p+ei),m.style[vr]=y||"translate(0, 0)"},ri=function(t,e){var n,r,i,o,s,a=e||this,u=a.xPercent,l=a.yPercent,c=a.x,d=a.y,h=a.rotation,f=a.skewX,p=a.skewY,g=a.scaleX,A=a.scaleY,m=a.target,v=a.xOrigin,y=a.yOrigin,_=a.xOffset,b=a.yOffset,x=a.forceCSS,C=parseFloat(c),w=parseFloat(d);h=parseFloat(h),f=parseFloat(f),(p=parseFloat(p))&&(f+=p=parseFloat(p),h+=p),h||f?(h*=tr,f*=tr,n=Math.cos(h)*g,r=Math.sin(h)*g,i=Math.sin(h-f)*-A,o=Math.cos(h-f)*A,f&&(p*=tr,s=Math.tan(f-p),i*=s=Math.sqrt(1+s*s),o*=s,p&&(s=Math.tan(p),n*=s=Math.sqrt(1+s*s),r*=s)),n=gt(n),r=gt(r),i=gt(i),o=gt(o)):(n=g,o=A,r=i=0),(C&&!~(c+"").indexOf("px")||w&&!~(d+"").indexOf("px"))&&(C=zr(m,"x",c,"px"),w=zr(m,"y",d,"px")),(v||y||_||b)&&(C=gt(C+v-(v*n+y*i)+_),w=gt(w+y-(v*r+y*o)+b)),(u||l)&&(s=m.getBBox(),C=gt(C+u/100*s.width),w=gt(w+l/100*s.height)),s="matrix("+n+","+r+","+i+","+o+","+C+","+w+")",m.setAttribute("transform",s),x&&(m.style[vr]=s)},ii=function(t,e,n,r,i){var o,s,a=360,u=T(i),l=parseFloat(i)*(u&&~i.indexOf("rad")?Jn:1)-r,c=r+l+"deg";return u&&("short"===(o=i.split("_")[1])&&(l%=a)!=l%180&&(l+=l<0?a:-360),"cw"===o&&l<0?l=(l+36e9)%a-~~(l/a)*a:"ccw"===o&&l>0&&(l=(l-36e9)%a-~~(l/a)*a)),t._pt=s=new hn(t._pt,e,n,r,l,ar),s.e=c,s.u="deg",t._props.push(n),s},oi=function(t,e){for(var n in e)t[n]=e[n];return t},si=function(t,e,n){var r,i,o,s,a,u,l,c=oi({},n._gsap),d=n.style;for(i in c.svg?(o=n.getAttribute("transform"),n.setAttribute("transform",""),d[vr]=e,r=Vr(n,1),Or(n,vr),n.setAttribute("transform",o)):(o=getComputedStyle(n)[vr],d[vr]=e,r=Vr(n,1),d[vr]=o),Kn)(o=c[i])!==(s=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(a=Kt(o)!==(l=Kt(s))?zr(n,i,o,l):parseFloat(o),u=parseFloat(s),t._pt=new hn(t._pt,r,i,a,u-a,sr),t._pt.u=l||0,t._props.push(i));oi(r,c)};pt("padding,margin,Width,Radius",(function(t,e){var n="Top",r="Right",i="Bottom",o="Left",s=(e<3?[n,r,i,o]:[n+o,n+r,i+r,i+o]).map((function(n){return e<2?t+n:"border"+n+t}));Wr[e>1?"border"+t:t]=function(t,e,n,r,i){var o,a;if(arguments.length<4)return o=s.map((function(e){return Fr(t,e,n)})),5===(a=o.join(" ")).split(o[0]).length?o[0]:a;o=(r+"").split(" "),a={},s.forEach((function(t,e){return a[t]=o[e]=o[e]||o[(e-1)/2|0]})),t.init(e,a,i)}}));var ai,ui,li={name:"css",register:Sr,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,n,r,i){var o,s,a,u,l,c,d,h,f,p,g,A,m,v,y,b,x,C,w,B,I=this._props,k=t.style,S=n.vars.startAt;for(d in En||Sr(),this.styles=this.styles||Cr(t),b=this.styles.props,this.tween=n,e)if("autoRound"!==d&&(s=e[d],!st[d]||!Ze(d,e,n,r,t,i)))if(l=typeof s,c=Wr[d],"function"===l&&(l=typeof(s=s.call(n,r,t,i))),"string"===l&&~s.indexOf("random(")&&(s=le(s)),c)c(this,t,d,s,n)&&(y=1);else if("--"===d.substr(0,2))o=(getComputedStyle(t).getPropertyValue(d)+"").trim(),s+="",xe.lastIndex=0,xe.test(o)||(h=Kt(o),f=Kt(s)),f?h!==f&&(o=zr(t,d,o,f)+f):h&&(s+=h),this.add(k,"setProperty",o,s,r,i,0,0,d),I.push(d),b.push(d,0,k[d]);else if("undefined"!==l){if(S&&d in S?(o="function"==typeof S[d]?S[d].call(n,r,t,i):S[d],T(o)&&~o.indexOf("random(")&&(o=le(o)),Kt(o+"")||"auto"===o||(o+=_.units[d]||Kt(Fr(t,d))||""),"="===(o+"").charAt(1)&&(o=Fr(t,d))):o=Fr(t,d),u=parseFloat(o),(p="string"===l&&"="===s.charAt(1)&&s.substr(0,2))&&(s=s.substr(2)),a=parseFloat(s),d in or&&("autoAlpha"===d&&(1===u&&"hidden"===Fr(t,"visibility")&&a&&(u=0),b.push("visibility",0,k.visibility),Pr(this,k,"visibility",u?"inherit":"hidden",a?"inherit":"hidden",!a)),"scale"!==d&&"transform"!==d&&~(d=or[d]).indexOf(",")&&(d=d.split(",")[0])),g=d in Kn)if(this.styles.save(d),A||((m=t._gsap).renderTransform&&!e.parseTransform||Vr(t,e.parseTransform),v=!1!==e.smoothOrigin&&m.smooth,(A=this._pt=new hn(this._pt,k,vr,0,1,m.renderTransform,m,0,-1)).dep=1),"scale"===d)this._pt=new hn(this._pt,m,"scaleY",m.scaleY,(p?mt(m.scaleY,p+a):a)-m.scaleY||0,sr),this._pt.u=0,I.push("scaleY",d),d+="X";else{if("transformOrigin"===d){b.push(yr,0,k[yr]),C=void 0,w=void 0,B=void 0,w=(C=(x=s).split(" "))[0],B=C[1]||"50%","top"!==w&&"bottom"!==w&&"left"!==B&&"right"!==B||(x=w,w=B,B=x),C[0]=jr[w]||w,C[1]=jr[B]||B,s=C.join(" "),m.svg?Xr(t,s,0,v,0,this):((f=parseFloat(s.split(" ")[2])||0)!==m.zOrigin&&Pr(this,m,"zOrigin",m.zOrigin,f),Pr(this,k,d,Qr(o),Qr(s)));continue}if("svgOrigin"===d){Xr(t,s,1,v,0,this);continue}if(d in Ur){ii(this,m,d,u,p?mt(u,p+s):s);continue}if("smoothOrigin"===d){Pr(this,m,"smooth",m.smooth,s);continue}if("force3D"===d){m[d]=s;continue}if("transform"===d){si(this,s,t);continue}}else d in k||(d=kr(d)||d);if(g||(a||0===a)&&(u||0===u)&&!ir.test(s)&&d in k)a||(a=0),(h=(o+"").substr((u+"").length))!==(f=Kt(s)||(d in _.units?_.units[d]:h))&&(u=zr(t,d,o,f)),this._pt=new hn(this._pt,g?m:k,d,u,(p?mt(u,p+a):a)-u,g||"px"!==f&&"zIndex"!==d||!1===e.autoRound?sr:lr),this._pt.u=f||0,h!==f&&"%"!==f&&(this._pt.b=o,this._pt.r=ur);else if(d in k)Nr.call(this,t,d,o,p?p+s:s);else if(d in t)this.add(t,d,o||t[d],p?p+s:s,r,i);else if("parseTransform"!==d){Q(d,s);continue}g||(d in k?b.push(d,0,k[d]):b.push(d,1,o||t[d])),I.push(d)}y&&dn(this)},render:function(t,e){if(e.tween._time||!Ln())for(var n=e._pt;n;)n.r(t,n.d),n=n._next;else e.styles.revert()},get:Fr,aliases:or,getSetter:function(t,e,n){var r=or[e];return r&&r.indexOf(",")<0&&(e=r),e in Kn&&e!==yr&&(t._gsap.x||Fr(t,"x"))?n&&Mn===n?"scale"===e?gr:pr:(Mn=n||{})&&("scale"===e?Ar:mr):t.style&&!O(t.style[e])?hr:~e.indexOf("-")?fr:nn(t,e)},core:{_removeProperty:Or,_getMatrix:$r}};Bn.utils.checkPrefix=kr,Bn.core.getStyleSaver=Cr,ui=pt("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(ai="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Kn[t]=1})),pt(ai,(function(t){_.units[t]="deg",Ur[t]=1})),or[ui[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+ai,pt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");or[e[1]]=ui[e[0]]})),pt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){_.units[t]="px"})),Bn.registerPlugin(li);var ci=Bn.registerPlugin(li)||Bn,di=ci.core.Tween},339:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),u=n.n(a),l=n(565),c=n.n(l),d=n(216),h=n.n(d),f=n(589),p=n.n(f),g=n(114),A={};A.styleTagTransform=p(),A.setAttributes=c(),A.insert=u().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=h(),i()(g.Z,A);const m=g.Z&&g.Z.locals?g.Z.locals:void 0},932:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),u=n.n(a),l=n(565),c=n.n(l),d=n(216),h=n.n(d),f=n(589),p=n.n(f),g=n(439),A={};A.styleTagTransform=p(),A.setAttributes=c(),A.insert=u().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=h(),i()(g.Z,A);const m=g.Z&&g.Z.locals?g.Z.locals:void 0},430:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),u=n.n(a),l=n(565),c=n.n(l),d=n(216),h=n.n(d),f=n(589),p=n.n(f),g=n(658),A={};A.styleTagTransform=p(),A.setAttributes=c(),A.insert=u().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=h(),i()(g.Z,A);const m=g.Z&&g.Z.locals?g.Z.locals:void 0},233:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(379),i=n.n(r),o=n(795),s=n.n(o),a=n(569),u=n.n(a),l=n(565),c=n.n(l),d=n(216),h=n.n(d),f=n(589),p=n.n(f),g=n(175),A={};A.styleTagTransform=p(),A.setAttributes=c(),A.insert=u().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=h(),i()(g.Z,A);const m=g.Z&&g.Z.locals?g.Z.locals:void 0},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},s=[],a=0;a<t.length;a++){var u=t[a],l=r.base?u[0]+r.base:u[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var h=n(d),f={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==h)e[h].references++,e[h].updater(f);else{var p=i(f,r);r.byIndex=a,e.splice(a,0,{identifier:d,updater:p,references:1})}s.push(d)}return s}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var u=r(t,i),l=0;l<o.length;l++){var c=n(o[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=u}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},490:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.exportPdf=void 0;const i=n(67),o=n(796),s=n(519);function a(t){document.body.appendChild(t);const e=t.getBoundingClientRect();t.querySelectorAll("*").forEach((t=>{const n=t.getBoundingClientRect();(n.x+n.width<e.x||n.y+n.height<e.y||n.x>e.x+e.width||n.y>e.y+e.height)&&t.remove()})),document.body.removeChild(t)}e.exportPdf=function(){return r(this,void 0,void 0,(function*(){const t=document.getElementById("svg"),e=t.viewBox.baseVal,n=1*e.width,r=1*e.height,u=(0,i.currentStep)();let l=(0,i.allSteps)();const c={type:"toPdf",svg:void 0,width:n,height:r,presentation:s.manifest.presentation,maxindex:0,index:0};for(const t of l)c.maxindex++;const d=document.querySelector("#pdf-export-status");try{for(const e of l){yield(0,i.gotoStep)(e,"silent");const n=t.cloneNode(!0);a(n),c.svg=(new XMLSerializer).serializeToString(n),c.index++;const r=yield(0,o.sendToServer)(c);if("pdf created"!=r.status)throw"error"==r.status?r.explanation:"unexpected response from server";d.innerHTML="Exporting slide "+c.index+"/"+c.maxindex}d.innerHTML="Successfully exported pdf.";const e=document.querySelector("#link-to-pdf");e.classList.add("growAndShrink"),console.log("adding new"),setTimeout((()=>{e.classList.remove("growAndShrink")}),3e3)}catch(t){d.innerHTML="Failed to export:"+t}(0,i.gotoStep)(u,"silent")}))}},491:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.findZoomEvent=e.eventDescription=e.runOverlay=e.isOverlay=e.zoomSlide=e.createEventTree=void 0;const r=n(519),i=n(100),o=n(358),s=n(67),a=n(779);e.isOverlay=function(t){return"show"==t.type||"hide"==t.type},e.zoomSlide=function(t,e="animated"){function n(t){return" "+t.x+" "+t.y+" "+t.width+" "+t.height}const r=document.getElementById("svg"),s=(0,i.applyTransform)(a.transforms.get(t),a.localRect.get(t));"silent"==e?r.setAttribute("viewBox",n(s)):new o.TimelineMax({}).to(r,1.5,{attr:{viewBox:n(s)}})},e.runOverlay=function(t,e,n){let r;r="show"==t.type&&1==e||"hide"==t.type&&-1==e?1:0;const i=a.svgMap.get(t);null!=i&&("animated"==n?o.gsap.to(i,{duration:.3,opacity:r}):i.style.opacity=r.toString())},e.createEventTree=function(){!function t(e,n){if(e.parent=n,"child"==e.type)for(const n of e.children)t(n,e)}(r.manifest.tree,void 0)},e.eventDescription=function(t){const e={type:"event",slideId:void 0,eventId:void 0};return t instanceof s.OverlayStep?(e.slideId=t.overlays[0].parent.id,e.eventId=t.overlays[0].eventId):t instanceof s.ZoomStep?(e.slideId=t.source.id,(0,s.zoomsIn)(t)?e.eventId=t.target.eventId:e.eventId="finish"):(e.slideId=r.manifest.tree.id,e.eventId="finish"),e},e.findZoomEvent=function(t){return function e(n){if(n.id==t)return n;for(const t of n.children)if("child"==t.type){const n=e(t);if(null!=n)return n}}(r.manifest.tree)}},796:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.probeServer=e.fetchJSON=e.sendToServer=e.fileName=e.presentationDir=void 0;const i=n(915),o=n(519);e.presentationDir=function(){return"."},e.fileName=function(t,e){return null==t?"./"+e:"./"+o.manifest.slideDict[t]+"/"+e},e.sendToServer=function(t){return r(this,void 0,void 0,(function*(){"slides"!=t.type&&"wav"!=t.type||(t.presentation=o.manifest.presentation);const e=JSON.stringify(t),n=yield fetch("http://localhost:3001",{method:"POST",body:e});return n.ok?yield n.json():{status:"error",explanation:"not connected"}}))},e.fetchJSON=function(t){return r(this,void 0,void 0,(function*(){try{const e=yield fetch(t);if(e.ok)return e.json();throw"not connected"}catch(e){return(0,i.userAlert)("Could not load slide file "+t),null}}))},e.probeServer=function(){return r(this,void 0,void 0,(function*(){try{return yield fetch("http://localhost:3001",{method:"POST",body:JSON.stringify({type:"probe"})}),!0}catch(t){return!1}}))}},915:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.userDefinedKeys=e.timelineHTML=e.timelineSeen=e.soundIcon=e.markDisabled=e.userAlert=e.updatePageNumber=e.removeLoading=e.openPanelTreeRec=e.openPanelTree=e.initPanels=e.updateTimelineDisplay=e.audioPlaying=e.markSeen=void 0;const i=n(519),o=n(208),s=n(195),a=n(358),u=n(674),l=n(67),c=n(490),d=new Map,h=new Map,f=new Map,p=new Map;function g(){f.clear();const t=document.getElementById("progress-line");t.innerHTML="";for(const e of(0,l.allSteps)()){const n=document.createElement("div"),r=document.createElement("div");r.classList.add("progress-filler"),r.style.width="0%",n.appendChild(r),t.appendChild(n),n.addEventListener("click",(function(t){A(e,t)}));const i=o.sounds.get(e);null!=i?(n.classList.remove("nosound"),n.style.flexGrow=i.duration.toString()):(n.classList.add("nosound"),n.style.flexGrow="10"),f.set(e,n),m(e,l.timeline.past.includes(e))}}function A(t,e){const n=e.offsetX,r=f.get(t).offsetWidth;t==(0,l.currentStep)()?(0,o.gotoAudio)(n/r):(0,l.gotoStep)(t)}function m(t,e){const n=f.get(t);null!=n&&(e?(n.firstChild.style.width="100%",n.classList.add("seen")):(n.firstChild.style.width="0%",n.classList.remove("seen")))}function v(t,e){const n=d.get(t).childNodes[0];e?(h.get(t).classList.remove("slide-stack-hidden"),n.innerHTML="expand_more"):(h.get(t).classList.add("slide-stack-hidden"),n.innerHTML="chevron_right")}function y(t){const e=Math.floor(t/60),n=Math.floor(t)%60;return n<10?e+":0"+n:e+":"+n}function _(){o.soundState==o.SoundState.Play?document.getElementById("progress-panel").classList.add("playing"):document.getElementById("progress-panel").classList.remove("playing")}function b(){const t=document.getElementById("play-button");switch((0,o.endOfSound)()?t.style.opacity="0":t.style.opacity="1",o.soundState!=o.SoundState.None&&document.body.classList.add("has-sound"),o.soundState){case o.SoundState.Play:t.style.color="black",t.innerHTML="pause";break;case o.SoundState.None:{t.style.color="black";const e=o.sounds.get((0,l.currentStep)());null==e?t.innerHTML="play_disabled":null!=e.audio?t.innerHTML="play_arrow":t.innerHTML="cached";for(const t of(0,l.allSteps)())f.get(t).classList.remove("recording");break}case o.SoundState.Recording:t.style.color="black",t.innerHTML="mic",f.get((0,l.currentStep)()).classList.add("recording");break;case o.SoundState.Live:t.style.color="red",t.innerHTML="mic_none"}_()}function x(t){const e=document.getElementById("left-panel");t?a.gsap.to(e,{width:"30%",duration:.3}):a.gsap.to(e,{width:0,duration:.3})}function C(){document.getElementById("left-panel").clientWidth>0?x(!1):x(!0)}let w;e.timelineHTML=g,e.timelineSeen=m,e.markSeen=function(t,e){let n;t instanceof l.OverlayStep&&(n=d.get(t.overlays[0])),t instanceof l.ZoomStep&&(0,l.zoomsIn)(t)&&(n=d.get(t.target));const r=f.get(t);1==e?(null!=n&&n.classList.add("tree-view-item-seen"),m(t,!0)):(null!=n&&n.classList.remove("tree-view-item-seen"),null!=r&&m(t,!1))},e.markDisabled=function(t){const e=d.get(t);null!=e&&(e.classList.add("disabled-event"),e.classList.remove("tree-view-item-loading"))},e.openPanelTree=v,e.openPanelTreeRec=function t(e){null!=e.parent&&("child"==e.type&&v(e,!0),t(e.parent))},e.removeLoading=function(t){null!=d.get(t)&&d.get(t).classList.remove("tree-view-item-loading");for(const e of t.children)"show"!=e.type&&"hide"!=e.type||null!=d.get(e)&&d.get(e).classList.remove("tree-view-item-loading")},e.audioPlaying=function(t){try{if(t==(0,o.stepAudio)((0,l.currentStep)())){const e=t.currentTime,n=t.duration,r=e+o.sounds.get((0,l.currentStep)()).previousDuration;document.getElementById("time-elapsed").innerHTML=y(r)+"/"+y(o.totalSoundDuration),f.get((0,l.currentStep)()).firstChild.style.width=100*e/n+"%"}}catch(t){console.log("tried to play illegally")}},e.updateTimelineDisplay=_,e.soundIcon=b;const B={};function I(t){for(const t of document.querySelectorAll(".key-binding"))t.classList.remove("disabled");w=t.key;for(const t of document.querySelectorAll(".most-recently-pressed-key"))t.innerHTML=w}function k(t){if(1==t.touches.length&&"none"==u.currentTool){const e=document.getElementById("svg").getBoundingClientRect(),n=(t.touches[0].clientX-e.x)/e.width;n>.9&&(0,i.nextButton)(),n<.1&&(0,i.prevButton)()}2==t.touches.length&&(0,u.toggleSketchpad)()}e.userDefinedKeys=B,e.initPanels=function(){document.getElementById("svg").addEventListener("touchstart",k),document.getElementById("open-menu").addEventListener("click",C),document.getElementById("prev-event").addEventListener("click",i.prevButton),document.getElementById("next-event").addEventListener("click",i.nextButton),document.getElementById("play-button").addEventListener("click",i.playButton),document.getElementById("sound-speed").addEventListener("click",o.playbackRateChange),function t(e){if(p.set(e,!1),null==e.parent)h.set(e,document.getElementById("slide-stack"));else if(e.merged&&"child"!=e.type);else{const t=h.get(e.parent),n=document.createElement("div");let r;if(d.set(e,n),n.classList.add("tree-view-item"),n.classList.add("tree-view-item-loading"),"show"==e.type&&(r="visibility"),"hide"==e.type&&(r="visibility_off"),"child"==e.type&&(r="chevron_right"),n.innerHTML='<i class="material-icons">'+r+"</i> "+e.name,n.addEventListener("click",(function(t){if("I"==t.target.nodeName){if("child"==e.type){const t=!p.get(e);p.set(e,t),v(e,t)}}else(0,l.gotoEvent)(e)})),t.appendChild(n),"child"==e.type){const n=document.createElement("div");n.classList.add("slide-stack"),n.classList.add("slide-stack-hidden"),t.appendChild(n),h.set(e,n)}}if("child"==e.type)for(const n of e.children)t(n)}(i.manifest.tree),g(),(0,s.initSearch)(),Object.keys(i.manifest.soundDict).length>0&&document.body.classList.add("has-sound"),b(),function(){function t(){let t="";document.getElementById("list-of-key-bindings").innerHTML="";for(let e in B)B[e]==i.prevButton&&(t=t+e+": previous slide <br>"),B[e]==i.nextButton&&(t=t+e+": next slide <br>");document.getElementById("list-of-key-bindings").innerHTML=t}!function(){r(this,void 0,void 0,(function*(){null!=i.manifest.pdfFile&&document.getElementById("link-to-pdf").classList.remove("hidden")}))}(),document.getElementById("tab-heads").addEventListener("click",(t=>{const e=t.target;var n;e.id.endsWith("tab-head")&&(n=e.id.slice(0,-9),document.getElementById("tab-heads").querySelectorAll("*").forEach((t=>t.classList.remove("active"))),document.getElementById(n+"-tab-head").classList.add("active"),document.getElementById("tab-contents").querySelectorAll("*").forEach((t=>t.classList.remove("active"))),document.getElementById(n+"-tab").classList.add("active"))})),document.getElementById("drawing-tools-checkbox").addEventListener("change",(t=>{(0,u.toggleSketchpad)()})),document.addEventListener("keydown",I);for(const e of document.querySelectorAll("span"))switch(e.id){case"new-prev-key":e.addEventListener("click",(e=>{null!=w&&(B[w]=i.prevButton),t()}));break;case"new-next-key":e.addEventListener("click",(e=>{e.target,null!=w&&(B[w]=i.nextButton),t()}));break;case"pdf-print-button":e.addEventListener("click",(t=>{(0,c.exportPdf)()}));break;case"link-to-pdf":e.addEventListener("click",(t=>{window.open(i.manifest.pdfFile,"open")}))}}()},e.userAlert=function(t){document.getElementById("text-alert").innerHTML=t,function(t){const e=a.gsap.timeline();t.style.display="inherit",e.to(t,{opacity:"100%",duration:.1}).to(t,{duration:2}).to(t,{opacity:"0",duration:1}),e.eventCallback("onComplete",(function(){t.style.display="none"}))}(document.getElementById("text-alert-box"))},e.updatePageNumber=function(){!function(){const t=new URL(window.location.href).searchParams;let e="?";for(const n of t.keys())"step"!=n&&(e+=`${n}=${t.get(n)}&`);t.keys()&&history.pushState({},null,e+"step="+l.timeline.past.length.toString())}(),document.getElementById("page-count-enumerator").innerHTML=(0,l.currentStep)().pageNumber.toString(),document.getElementById("page-count-denominator").innerHTML=" / "+l.timeline.lastStep.pageNumber.toString(),0==l.timeline.past.length?document.getElementById("prev-event").style.visibility="hidden":document.getElementById("prev-event").style.visibility="visible",0==l.timeline.future.length?document.getElementById("next-event").style.visibility="hidden":document.getElementById("next-event").style.visibility="visible"}},779:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.transforms=e.localRect=e.svgMap=e.addToQueue=void 0;const r=n(491),i=n(796),o=n(915),s=n(67),a=n(100),u=n(519),l={waiting:new Set,loading:new Set,onceEmpty:[],onError:[]},c=new Map;e.transforms=c;const d=new Map;e.svgMap=d;const h=new Map,f=new Map;function p(){const t=new Set;for(const e of l.waiting)if(null==e.parent||null!=d.get(e.parent)){const t=document.createElement("object"),n=(0,i.fileName)(e.id,"image.svg");t.setAttribute("data",n),t.setAttribute("type","image/svg+xml"),t.classList.add("hidden-svg"),document.body.appendChild(t),t.onload=function(){g(e,t)},l.loading.add(e)}else t.add(e);if(l.waiting=t,0==l.waiting.size&&0==l.loading.size){for(const t of l.onceEmpty)t();l.onceEmpty=[],l.onError=[]}}function g(t,e){try{let n,i;for(const t of e.contentDocument.firstElementChild.children)if("g"==t.nodeName){n=t;break}if(null==n)throw new Error("No apppropriate svg element found.");for(const n of e.contentDocument.firstElementChild.children)if("defs"==n.nodeName){i=n,h.set(t,i),A(i,t);break}for(const e of n.querySelectorAll("rect"))m(e,t,i);for(const t of n.querySelectorAll("a")){let e=t.firstElementChild,n=t.previousElementSibling;if(null!=n&&null!=e){let t=n.getBBox();const r=t.x||0,i=t.y||0;e.setAttribute("x",r.toString()),e.setAttribute("y",i.toString())}}d.set(t,n);const l=n.children;for(const e of t.children)if((0,r.isOverlay)(e))for(const t of l)t.id==e.id&&d.set(e,t);for(const e of l)for(const n of t.children)"child"==n.type&&n.id==e.id&&(e.style.opacity="0");if((0,s.futureSlide)(t))for(const e of(0,s.allSteps)().reverse())e instanceof s.OverlayStep&&e.event().parent==t&&e.reverse().run("silent");else for(const e of(0,s.allSteps)())e instanceof s.OverlayStep&&e.event().parent==t&&e.run("silent");(0,o.removeLoading)(t),function(t){const e=d.get(t);if(f.set(t,(0,a.getBoundRect)(e)),null==t.parent)c.set(t,(0,a.idTransform)());else{let e;for(const n of d.get(t.parent).children)if(n.id==t.id){let t;if("rect"==n.nodeName)t=n;else{const e=n.querySelectorAll("rect");if(0==e.length)throw"found no rectangles";t=e[0]}e={x:t.x.baseVal.value,y:t.y.baseVal.value,width:t.width.baseVal.value,height:t.height.baseVal.value}}const n=(0,a.applyTransform)(c.get(t.parent),e),r=(0,a.getTransform)(f.get(t),n);c.set(t,r)}e.setAttribute("transform",(0,a.transformToString)(c.get(t))),document.getElementById("svg").appendChild(e),null!=h.get(t)&&document.getElementById("svg").appendChild(h.get(t)),null==t.parent&&((0,r.zoomSlide)(t,"silent"),(0,u.updatePageNumber)())}(t)}catch(e){!function(){console.log("error");for(const t of l.onError)t();l.onceEmpty=[],l.onError=[]}(),(0,o.markDisabled)(t),(0,o.userAlert)("Failed to load svg for "+t.name),console.log(e)}l.loading.delete(t),p()}function A(t,e){for(const n of t.childNodes){let t=n;if(t.id=e.id+t.id,"clipPath"==t.nodeName&&t.remove(),"pattern"==t.nodeName)for(const n of t.getElementsByTagName("use")){const t=n.getAttribute("xlink:href"),r="#"+e.id+t.slice(1);n.setAttribute("xlink:href",r)}}}function m(t,e,n){let r,i=t.getAttribute("fill");if(null!=i&&i.startsWith("url(#")?(i="url(#"+e.id+i.slice(5),t.setAttribute("fill",i)):i=null,null!=n&&null!=i){let t=i.slice(5).slice(0,-1);for(const e of n.childNodes)if("pattern"==e.nodeName){const n=e;n.id==t&&(r=n)}}if(null!=r)for(const e of r.childNodes)if("use"==e.nodeName){let i,a=e.getAttribute("xlink:href");if(null!=a)for(const t of n.childNodes)if("image"==t.nodeName){const e=t;e.id==a.slice(1)&&(i=e)}if(null!=i){let e=document.createElementNS("http://www.w3.org/2000/svg","g");const n=parseFloat(i.getAttribute("width")||"1"),a=parseFloat(i.getAttribute("height")||"1");let u,l=parseFloat(t.getAttribute("width")||"1")/n,c=parseFloat(t.getAttribute("height")||"1")/a;if(t.hasAttribute("x")&&t.hasAttribute("y"))u=[l,0,0,c,parseFloat(t.getAttribute("x")||"0"),parseFloat(t.getAttribute("y")||"0")];else{if(!t.hasAttribute("transform"))throw"unknown type of rect with image";o=[l,0,0,c,0,0],u=[(s=t.getAttribute("transform").slice(7,-1).split(" ").map(parseFloat))[0]*o[0]+s[2]*o[1],s[1]*o[0]+s[3]*o[1],s[0]*o[2]+s[2]*o[3],s[1]*o[2]+s[3]*o[3],s[0]*o[4]+s[2]*o[5]+s[4],s[1]*o[4]+s[3]*o[5]+s[5]]}const d=u.map(String).join(" ");console.log(d),e.setAttribute("transform","matrix("+d+")"),e.id=t.id;let h=i.cloneNode(!0),f=t.parentNode;f.insertBefore(e,t),e.appendChild(h),f.removeChild(t),r.remove();break}}var o,s}e.localRect=f,e.addToQueue=function(t){return new Promise(((e,n)=>{l.onceEmpty.push(e),l.onError.push(n);for(const e of t)if("child"==e.type){let t=e;for(;null!=t&&null==d.get(t);)l.waiting.has(t)||l.loading.has(t)||l.waiting.add(e),t=t.parent}p()}))}},195:function(t,e,n){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.initSearch=void 0;const i=r(n(381)),o=n(67),s=n(519);let a;function u(){const t=document.getElementById("search-input").value,e=document.getElementById("search-results");e.innerHTML="";for(const n of a.search(t)){const t=n.item.slide;let r;r="child"==t.type?t.name:t.parent.name;const i=document.createElement("div");i.classList.add("one-result"),i.innerHTML=`<div class='search-result-slide'> ${r}</div> <div class='search-result-text'>${n.item.text}</div>`,i.addEventListener("click",(()=>{(0,o.gotoEvent)(t)})),e.appendChild(i)}}e.initSearch=function(){const t=[];!function e(n){for(const e of n.keywords)t.push({slide:n,text:e});if("child"==n.type)for(const t of n.children)e(t)}(s.manifest.tree),a=new i.default(t,{keys:["text"]});const e=document.getElementById("search-input");e.addEventListener("input",u),e.addEventListener("keyup",(t=>{"Escape"==t.key&&(e.value="",u())}))}},674:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.currentTool=e.toggleSketchpad=void 0;let n="none";e.currentTool=n;const r=[];let i=-1;const o={sigCanvas:void 0,matrix:void 0,point:void 0,curPath:void 0,curPathText:void 0,original:{x:0,y:0},rect:void 0};function s(){i>=0&&(r[i].remove(),i-=1),u()}function a(){if(i<r.length-1){i+=1;const t=r[i];o.sigCanvas.appendChild(t)}u()}function u(){i>=0?document.getElementById("sketch-undo").classList.remove("disabled"):document.getElementById("sketch-undo").classList.add("disabled"),i<r.length-1?document.getElementById("sketch-redo").classList.remove("disabled"):document.getElementById("sketch-redo").classList.add("disabled")}function l(t){document.getElementById("sketch-red").classList.remove("selected"),document.getElementById("sketch-blue").classList.remove("selected"),"red"==t?document.getElementById("sketch-red").classList.add("selected"):"blue"==t&&document.getElementById("sketch-blue").classList.add("selected"),e.currentTool=n=t}e.toggleSketchpad=function(){const t=document.getElementById("sketch-panel"),e=document.getElementById("drawing-tools-checkbox");switch(n){case"red":case"blue":e.checked=!1,t.style.display="none",l("none");break;case"none":e.checked=!0,l("red"),t.style.display="flex",u();break;default:throw"unsupported sketchpad case"}},document.getElementById("sketch-panel").addEventListener("click",(function(t){const e=t.target;"sketch-undo"==e.id&&s(),"sketch-redo"==e.id&&a(),"sketch-red"==e.id&&l("red"),"sketch-blue"==e.id&&l("blue")})),document.addEventListener("keydown",(function(t){"u"==t.key&&s(),"i"==t.key&&a()})),"ontouchstart"in document.documentElement&&document.getElementById("svg").addEventListener("touchmove",(function(t){t.preventDefault()})),document.getElementById("svg").addEventListener("pointerdown",(function t(e){if("pointerdown"==e.type&&(o.sigCanvas=document.getElementById("svg"),o.point=o.sigCanvas.createSVGPoint(),o.matrix=o.sigCanvas.getScreenCTM().inverse(),o.sigCanvas.addEventListener("pointermove",t,!1),o.sigCanvas.addEventListener("pointerup",t,!1)),o.point.x=e.clientX,o.point.y=e.clientY,o.point=o.point.matrixTransform(o.matrix),"none"==n){if("pointerdown"==e.type&&(o.original={x:o.point.x,y:o.point.y},o.rect=document.createElementNS("http://www.w3.org/2000/svg","rect"),o.rect.setAttributeNS(null,"x",o.point.x.toString()),o.rect.setAttributeNS(null,"y",o.point.y.toString()),o.rect.setAttributeNS(null,"fill","yellow"),o.rect.setAttributeNS(null,"opacity","20%"),o.sigCanvas.appendChild(o.rect)),"pointermove"==e.type){let t,e,n=o.point.y-o.original.y,r=o.point.x-o.original.x;n>=0?e=o.original.y:(n=-n,e=o.point.y),r>=0?t=o.original.x:(r=-r,t=o.point.x),o.rect.setAttributeNS(null,"x",t.toString()),o.rect.setAttributeNS(null,"y",e.toString()),o.rect.setAttributeNS(null,"height",n.toString()),o.rect.setAttributeNS(null,"width",r.toString())}"pointerup"==e.type&&o.rect.remove()}if("blue"==n||"red"==n){if("pointerdown"==e.type){o.curPath=document.createElementNS("http://www.w3.org/2000/svg","path"),o.curPathText="M "+o.point.x+" "+o.point.y,o.curPath.setAttributeNS(null,"d",o.curPathText);const t="blue"==n?"blue":"red";o.curPath.setAttributeNS(null,"stroke",t),o.curPath.setAttributeNS(null,"stroke-width",o.matrix.a.toString()),o.sigCanvas.appendChild(o.curPath),r.splice(i+1),r.push(o.curPath),i+=1,u()}"pointermove"==e.type&&(o.curPathText+=" L "+o.point.x+" "+o.point.y,o.curPath.setAttributeNS(null,"d",o.curPathText))}"pointerup"!=e.type&&"pointerout"!=e.type||(o.sigCanvas.removeEventListener("pointermove",t,!1),o.sigCanvas.removeEventListener("pointerup",t,!1))}),!1)},208:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.stepAudio=e.endRecording=e.soundLive=e.SoundState=e.cacheFlush=e.endOfSound=e.soundPaused=e.resetSound=e.initSoundTimeline=e.totalSoundDuration=e.sounds=e.soundAdvance=e.gotoAudio=e.playbackRateChange=e.soundState=e.loadSound=e.soundRecord=e.soundPlay=e.soundStop=void 0;const i=n(519),o=n(796),s=n(491),a=n(915),u=n(67);var l;!function(t){t.Recording="Record",t.Live="Live",t.Play="Play",t.None="Right"}(l||(l={})),e.SoundState=l;let c=l.None;e.soundState=c;let d=0;e.totalSoundDuration=d;const h=new Map;e.sounds=h;let f,p,g="";function A(){g+="?"+Date.now()}function m(){if(c==l.Play){const t=B((0,u.currentStep)());null!=t&&(t.pause(),(0,a.audioPlaying)(t))}c!=l.Recording&&c!=l.Live||v(0),e.soundState=c=l.None,(0,a.soundIcon)()}function v(t){if(null==p||"recording"!=p.state)return;let e;switch(c){case l.Recording:e=!1;break;case l.Live:e=!0;break;default:throw"should not be in this state"}const n={presentation:void 0,type:"wav",forWhat:void 0,file:void 0};if(e)switch(n.forWhat={type:"step",description:void 0},t){case 1:n.forWhat.description=(0,u.currentStep)().description();break;case-1:{const t=u.timeline.past[u.timeline.past.length-1];n.forWhat.description=t.reverse().description();break}case 0:n.forWhat.description={type:"last",page:(0,u.currentStep)().pageNumber}}else n.forWhat=(0,s.eventDescription)((0,u.currentStep)());p.onstop=()=>{const t=new Blob(f),e=new FileReader;e.onload=function(t){const e=t.target.result,s=new Uint8Array(e);n.file=Array.from(s),function(){r(this,void 0,void 0,(function*(){try{const t=yield(0,o.sendToServer)(n);if("sound recorded"!=t.status)throw t.status;if(c==l.None){const t=yield(0,i.getManifest)();i.manifest.soundDict=t.soundDict,A(),w(void 0),(0,u.loadNearbySounds)(),(0,a.timelineHTML)()}}catch(t){console.log(t),(0,a.userAlert)("Failed to record sound. "+t)}}))}()},e.readAsArrayBuffer(t)},p.stop()}function y(t){(function(){return r(this,void 0,void 0,(function*(){const t=yield navigator.mediaDevices.getUserMedia({audio:!0});p=new MediaRecorder(t),f=[],p.start(),p.addEventListener("dataavailable",(t=>{f.push(t.data)}))}))})().then((()=>{e.soundState=c="live"==t?l.Live:l.Recording,(0,a.soundIcon)()})).catch((t=>{e.soundState=c=l.None,(0,a.soundIcon)(),"Safari"==(0,i.userAgent)()?(0,a.userAlert)("To enable Mediarecorder  in Safari, use Develop/Experimental features"):(0,a.userAlert)(t)}))}function _(){u.timeline.future.length>0?(I(),(0,u.moveHead)(1),C()):m()}e.cacheFlush=A,e.soundPaused=function(){const t=B((0,u.currentStep)());return null!=t&&t.currentTime>0},e.soundStop=m,e.endRecording=v,e.soundRecord=y,e.soundLive=function(){const t={type:"startLive",presentation:i.manifest.presentation};(0,u.gotoStep)((0,u.allSteps)()[0]).then((()=>{(0,o.sendToServer)(t),y("live"),(0,a.soundIcon)()}))};const b=[1,1.5,2,.7];let x=0;function C(t="normal"){try{const n=B((0,u.currentStep)());if(null==n)throw"no audio";return n.playbackRate=b[x],"fromEnd"==t&&(n.currentTime=Math.max(0,n.duration-10)),n.play(),e.soundState=c=l.Play,(0,a.soundIcon)(),!0}catch(t){return null!=h.get((0,u.currentStep)())&&(0,a.userAlert)("No sounds for this event"),m(),!1}}function w(t){null!=new URL(window.location.href).searchParams.get("nocache")&&A(),h.clear(),e.totalSoundDuration=d=0;let n=0;for(const r of(0,u.allSteps)())try{const a={filename:void 0,audio:void 0,duration:void 0,previousDuration:d};if(null==t){const t=(0,s.eventDescription)(r);a.duration=i.manifest.soundDict[t.slideId][t.eventId],a.filename=(0,o.fileName)(t.slideId,t.eventId+".mp3"+g)}else a.duration=t.steps[n].duration,a.filename=`${t.dir}/${n}.mp3${g}`,n++;if(null==a.duration)throw"no duration";h.set(r,a),e.totalSoundDuration=d+=a.duration}catch(t){}}function B(t){const e=h.get(t);return null!=e?e.audio:void 0}function I(){const t=B((0,u.currentStep)());null!=t&&(t.pause(),t.currentTime=0,(0,a.audioPlaying)(t),(0,a.soundIcon)())}e.playbackRateChange=function(){x=(x+1)%b.length;const t=B((0,u.currentStep)());null!=t&&(t.playbackRate=b[x]),document.getElementById("sound-speed").innerHTML="×"+b[x]},e.soundPlay=C,e.initSoundTimeline=w,e.loadSound=function(t){return new Promise(((e,n)=>{const r=h.get(t);if(null==r||null!=r.audio)e();else{const i=r.filename,o=new Audio(i);o.addEventListener("ended",_),o.addEventListener("progress",(()=>{r.audio=o,t==(0,u.currentStep)()&&(0,a.soundIcon)(),e()})),o.addEventListener("error",(()=>{h.delete(t),t==(0,u.currentStep)()&&(0,a.soundIcon)(),n()})),o.addEventListener("timeupdate",(t=>{(0,a.audioPlaying)(t.target)}))}}))},e.gotoAudio=function(t){const e=B((0,u.currentStep)());null!=e&&(e.currentTime=e.duration*t)},e.soundAdvance=function(t){const e=B((0,u.currentStep)());t<0?e.currentTime<1?(I(),(0,u.moveHead)(-1),C("fromEnd")):(e.currentTime=Math.max(0,e.currentTime-10),(0,a.soundIcon)()):e.currentTime=Math.min(e.duration-.01,e.currentTime+10)},e.stepAudio=B,e.resetSound=I,e.endOfSound=function(){const t=B((0,u.currentStep)());return 0==u.timeline.future.length&&null!=t&&t.currentTime==t.duration}},67:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.loadNearbySounds=e.allSteps=e.futureSlide=e.gotoStep=e.gotoEvent=e.currentStep=e.zoomsIn=e.ZoomStep=e.OverlayStep=e.Step=e.timeline=e.moveHead=e.createTimeline=void 0;const i=n(491),o=n(915),s=n(519),a=n(208),u=n(779);class l{constructor(){}event(){return s.manifest.tree}description(){return{type:"last",page:this.pageNumber}}reverse(){return new l}run(t){}}e.Step=l;class c extends l{constructor(t,e){super(),this.direction=e,this.overlays=t}event(){return this.overlays[0]}description(){return{type:"overlays",page:this.pageNumber,slide:this.overlays[0].parent.id,direction:this.direction,overlays:this.overlays.map((t=>t.eventId))}}reverse(){return new c(this.overlays,1==this.direction?-1:1)}run(t){for(const e of this.overlays)(0,i.runOverlay)(e,this.direction,t)}}e.OverlayStep=c;class d extends l{constructor(t,e){super(),this.source=t,this.target=e}reverse(){return new d(this.target,this.source)}event(){return this.source}description(){return{type:"zoom",page:this.pageNumber,source:this.source.id,target:this.target.id}}run(t){(0,u.addToQueue)(this.target.children),(0,i.zoomSlide)(this.target,t),null!=this.target.parent&&(0,o.openPanelTree)(this.target,!0),this.source!=this.target.parent&&(0,o.openPanelTree)(this.source,!1)}}e.ZoomStep=d;const h={type:void 0,past:[],future:[],lastStep:new l};function f(t=0){if(h.future.length>t)return h.future[h.future.length-1-t];if(h.future.length==t)return h.lastStep;throw"tried to access step that does not exist"}function p(t){if(t==s.manifest.tree)return h.lastStep;const e=h.past.concat(h.future);if("child"==t.type)for(const n of e)if(n instanceof d&&n.target==t)return n;if("show"==t.type||"hide"==t.type)for(const n of e)if(n instanceof c&&n.overlays.includes(t))return n}function g(t){let e,n;if(1==t?(e=h.future,n=h.past):(e=h.past,n=h.future),0==e.length)return void console.log("cannot fall off the tape");(0,a.endRecording)(t);let r=e.pop();n.push(r),(0,o.markSeen)(r,t),-1==t&&(r=r.reverse()),r.run("animated"),v(),(0,o.soundIcon)(),(0,s.updatePageNumber)()}function A(){for(;h.past.length>0;){const t=h.past.pop();h.future.push(t)}}function m(t,e="animated"){return r(this,void 0,void 0,(function*(){let n;if(t instanceof c)n=t.overlays[0];else if(t instanceof d)n=t.source;else{if(t!=h.lastStep)throw"Wanted to go to a step that does not exist";n=s.manifest.tree}const r=[];let a;for(a="child"==n.type?n:n.parent;null!=a;){r.push(a);for(const t of a.children)"child"==t.type&&r.push(t);a=a.parent}for(yield(0,u.addToQueue)(r),(0,o.openPanelTreeRec)(n),A();f()!=t;){const t=h.future.pop();t instanceof c&&t.run("silent"),(0,o.markSeen)(t,1),h.past.push(t)}for(const t of h.future)(0,o.markSeen)(t,-1),t instanceof c&&t.reverse().run("silent");null!=h.lastStep&&(0,o.timelineSeen)(h.lastStep,!1);let l=n;"child"!=n.type&&(l=n.parent),"silent"==e?(0,i.zoomSlide)(l,"silent"):(0,i.zoomSlide)(l),v(),(0,o.soundIcon)(),(0,s.updatePageNumber)()}))}function v(){(0,a.loadSound)(f()),h.past.length>0&&(0,a.loadSound)(h.past[h.past.length-1]),h.future.length>1&&(0,a.loadSound)(h.future[h.future.length-2]),1==h.future.length&&(0,a.loadSound)(h.lastStep)}function y(){const t=h.past.slice().concat(h.future.slice().reverse());return Object.keys(s.manifest.soundDict).length>0&&t.push(h.lastStep),t}e.timeline=h,e.currentStep=f,e.createTimeline=function(t){if(null==t?function t(e){h.type="default";const n=[];for(const t of e.children)if(t.merged){const e=n.pop();e.push(t),n.push(e)}else n.push([t]);for(const r of n)if((0,i.isOverlay)(r[0]))h.past.push(new c(r,1));else{const n=r;h.past.push(new d(e,n[0])),t(n[0]);for(let e=1;e<n.length;e++)h.past.push(new d(n[e-1],n[e])),t(n[e]);h.past.push(new d(n[n.length-1],e))}}(s.manifest.tree):function(){h.type="recorded";for(const e of t.steps){let t;switch(e.step.type){case"zoom":t=new d((0,i.findZoomEvent)(e.step.source),(0,i.findZoomEvent)(e.step.target));break;case"overlays":{const n=[],r=(0,i.findZoomEvent)(e.step.slide);for(const t of e.step.overlays)for(const e of r.children)"child"!=e.type&&e.eventId==t&&n.push(e);t=new c(n,e.step.direction);break}case"last":t=new l}t.pageNumber=e.step.page,h.past.push(t)}h.lastStep=h.past.pop()}(),A(),null==t){const t=new Set;let e=1;for(const n of y())n.pageNumber=e,n instanceof d&&!t.has(n.target)&&null!=n.target.parent&&(e++,t.add(n.target));h.lastStep.pageNumber=e}},e.futureSlide=function(t){const e=p(t);return h.future.includes(e)},e.zoomsIn=function(t){return t instanceof d&&t.source==t.target.parent},e.moveHead=g,e.gotoStep=m,e.gotoEvent=function(t){const e=p(t);null!=e?m(e).then((()=>g(1))):console.log("this event has no associated step",t)},e.loadNearbySounds=v,e.allSteps=y},100:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getBoundRect=e.idTransform=e.transformToString=e.getTransform=e.applyTransform=void 0,e.applyTransform=function(t,e){return{x:e.x*t.scalex+t.deltax,y:e.y*t.scaley+t.deltay,width:e.width*t.scalex,height:e.height*t.scaley}},e.getTransform=function(t,e){const n=e.width/t.width,r=e.height/t.height;return{scalex:n,scaley:r,deltax:e.x-t.x*n,deltay:e.y-t.y*r}},e.transformToString=function(t){return"translate("+t.deltax+" "+t.deltay+") scale("+t.scalex+" "+t.scaley+")"},e.idTransform=function(){return{scalex:1,scaley:1,deltax:0,deltay:0}},e.getBoundRect=function(t){const e=t.firstElementChild,n={width:e.width.baseVal.value,height:e.height.baseVal.value,x:0,y:0},r=e.transform.baseVal;return r.length>0&&(n.x=r[0].matrix.e,n.y=r[0].matrix.f),e.remove(),n}},519:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.playButton=e.prevButton=e.nextButton=e.userAgent=e.updatePageNumber=e.getManifest=e.manifest=void 0,n(233),n(339),n(932),n(430);const i=n(491),o=n(915);Object.defineProperty(e,"updatePageNumber",{enumerable:!0,get:function(){return o.updatePageNumber}});const s=n(208),a=n(796),u=n(674),l=n(67);let c;function d(){switch(s.soundState){case s.SoundState.Play:case s.SoundState.Recording:case s.SoundState.Live:(0,s.soundStop)();break;case s.SoundState.None:(0,s.endOfSound)()||(0,s.soundPlay)()}}function h(){if(l.timeline.future.length>0)switch(s.soundState){case s.SoundState.Play:(0,s.soundAdvance)(1);break;case s.SoundState.Recording:case s.SoundState.Live:(0,l.moveHead)(1),s.soundState==s.SoundState.Live?(0,s.soundRecord)("live"):(0,s.soundRecord)("event");break;case s.SoundState.None:(0,s.resetSound)(),(0,l.moveHead)(1)}}function f(){if(l.timeline.past.length>0)switch(s.soundState){case s.SoundState.Play:(0,s.soundAdvance)(-1);break;case s.SoundState.Recording:(0,s.soundStop)();break;case s.SoundState.Live:(0,l.moveHead)(-1),(0,s.soundRecord)("live");break;case s.SoundState.None:(0,s.soundPaused)()?(0,s.resetSound)():(0,l.moveHead)(-1)}}function p(t){if(t.target!=document.getElementById("search-input"))switch(t.key){case"ArrowRight":case"PageDown":h();break;case"ArrowLeft":case"PageUp":f();break;case" ":d();break;case"d":(0,u.toggleSketchpad)();break;case"r":"default"==l.timeline.type&&m()&&(s.soundState==s.SoundState.Recording?(0,s.soundStop)():((0,s.soundStop)(),(0,s.soundRecord)("event")));break;case"l":"default"==l.timeline.type&&m()&&(s.soundState==s.SoundState.Live?(0,s.soundStop)():s.soundState==s.SoundState.None&&(0,s.soundLive)());break;default:t.key in o.userDefinedKeys&&o.userDefinedKeys[t.key]()}}function g(){return r(this,void 0,void 0,(function*(){const t=yield(0,a.fetchJSON)((0,a.presentationDir)()+"/manifest.json");if(null==t)throw"The manifest is missing for the presentation";return t}))}e.manifest=c,e.userAgent=function(){return-1!==navigator.userAgent.indexOf("Chrome")?"Chrome":-1!==navigator.userAgent.indexOf("Firefox")?"Firefox":-1!==navigator.userAgent.indexOf("Safari")?"Safari":null},e.playButton=d,e.nextButton=h,e.prevButton=f,e.getManifest=g;let A=!1;function m(){return A}window.runFromApp=function(){},window.onload=function(){document.getElementById("loader-text").remove(),document.getElementById("upper-panel").style.opacity="",document.getElementById("progress-panel").style.opacity="",function(){r(this,void 0,void 0,(function*(){"server working"==(yield(0,a.sendToServer)({type:"probe"})).status&&(A=!0,document.getElementById("author-tab").classList.remove("hidden"),document.getElementById("author-tab-head").classList.remove("hidden"))}))}(),("ontouchstart"in window||navigator.maxTouchPoints>0)&&document.body.classList.add("tablet"),g().then((t=>{e.manifest=c=t,document.title=c.presentation,(0,i.createEventTree)();const n=function(){const t=new URL(window.location.href).searchParams;try{const e=parseInt(t.get("live"));return c.live[e]}catch(t){return}}();(0,l.createTimeline)(n),(0,s.initSoundTimeline)(n),(0,o.initPanels)(),document.addEventListener("keydown",p);const r=function(){const t=new URL(window.location.href).searchParams;try{return(0,l.currentStep)(parseInt(t.get("step")))}catch(t){return(0,l.currentStep)()}}();(0,l.gotoStep)(r).then((()=>{document.getElementById("svg").style.opacity="1"}))})).catch((t=>(0,o.userAlert)(t)))}},381:t=>{function e(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function n(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?e(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):e(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,p(r.key),r)}}function s(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function a(t,e,n){return(e=p(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&c(t,e)}function l(t){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},l(t)}function c(t,e){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},c(t,e)}function d(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=l(t);if(e){var i=l(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return function(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,n)}}function h(t){return function(t){if(Array.isArray(t))return f(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return f(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function p(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}function g(t){return Array.isArray?Array.isArray(t):"[object Array]"===b(t)}function A(t){return"string"==typeof t}function m(t){return"number"==typeof t}function v(t){return"object"===r(t)}function y(t){return null!=t}function _(t){return!t.trim().length}function b(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Object.prototype.toString.call(t)}var x=function(t){return"Missing ".concat(t," property in key")},C=function(t){return"Property 'weight' in key '".concat(t,"' must be a positive integer")},w=Object.prototype.hasOwnProperty,B=function(){function t(e){var n=this;i(this,t),this._keys=[],this._keyMap={};var r=0;e.forEach((function(t){var e=I(t);n._keys.push(e),n._keyMap[e.id]=e,r+=e.weight})),this._keys.forEach((function(t){t.weight/=r}))}return s(t,[{key:"get",value:function(t){return this._keyMap[t]}},{key:"keys",value:function(){return this._keys}},{key:"toJSON",value:function(){return JSON.stringify(this._keys)}}]),t}();function I(t){var e=null,n=null,r=null,i=1,o=null;if(A(t)||g(t))r=t,e=k(t),n=S(t);else{if(!w.call(t,"name"))throw new Error(x("name"));var s=t.name;if(r=s,w.call(t,"weight")&&(i=t.weight)<=0)throw new Error(C(s));e=k(s),n=S(s),o=t.getFn}return{path:e,id:n,weight:i,src:r,getFn:o}}function k(t){return g(t)?t:t.split(".")}function S(t){return g(t)?t.join("."):t}var E={useExtendedSearch:!1,getFn:function(t,e){var n=[],r=!1;return function t(e,i,o){if(y(e))if(i[o]){var s=e[i[o]];if(!y(s))return;if(o===i.length-1&&(A(s)||m(s)||function(t){return!0===t||!1===t||function(t){return v(t)&&null!==t}(t)&&"[object Boolean]"==b(t)}(s)))n.push(function(t){return null==t?"":function(t){if("string"==typeof t)return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}(t)}(s));else if(g(s)){r=!0;for(var a=0,u=s.length;a<u;a+=1)t(s[a],i,o+1)}else i.length&&t(s,i,o+1)}else n.push(e)}(t,A(e)?e.split("."):e,0),r?n:n[0]},ignoreLocation:!1,ignoreFieldNorm:!1,fieldNormWeight:1},T=n(n(n(n({},{isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:function(t,e){return t.score===e.score?t.idx<e.idx?-1:1:t.score<e.score?-1:1}}),{includeMatches:!1,findAllMatches:!1,minMatchCharLength:1}),{location:0,threshold:.6,distance:100}),E),M=/[^ ]+/g,L=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getFn,r=void 0===n?T.getFn:n,o=e.fieldNormWeight,s=void 0===o?T.fieldNormWeight:o;i(this,t),this.norm=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,n=new Map,r=Math.pow(10,e);return{get:function(e){var i=e.match(M).length;if(n.has(i))return n.get(i);var o=1/Math.pow(i,.5*t),s=parseFloat(Math.round(o*r)/r);return n.set(i,s),s},clear:function(){n.clear()}}}(s,3),this.getFn=r,this.isCreated=!1,this.setIndexRecords()}return s(t,[{key:"setSources",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this.docs=t}},{key:"setIndexRecords",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this.records=t}},{key:"setKeys",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this.keys=e,this._keysMap={},e.forEach((function(e,n){t._keysMap[e.id]=n}))}},{key:"create",value:function(){var t=this;!this.isCreated&&this.docs.length&&(this.isCreated=!0,A(this.docs[0])?this.docs.forEach((function(e,n){t._addString(e,n)})):this.docs.forEach((function(e,n){t._addObject(e,n)})),this.norm.clear())}},{key:"add",value:function(t){var e=this.size();A(t)?this._addString(t,e):this._addObject(t,e)}},{key:"removeAt",value:function(t){this.records.splice(t,1);for(var e=t,n=this.size();e<n;e+=1)this.records[e].i-=1}},{key:"getValueForItemAtKeyId",value:function(t,e){return t[this._keysMap[e]]}},{key:"size",value:function(){return this.records.length}},{key:"_addString",value:function(t,e){if(y(t)&&!_(t)){var n={v:t,i:e,n:this.norm.get(t)};this.records.push(n)}}},{key:"_addObject",value:function(t,e){var n=this,r={i:e,$:{}};this.keys.forEach((function(e,i){var o=e.getFn?e.getFn(t):n.getFn(t,e.path);if(y(o))if(g(o)){for(var s=[],a=[{nestedArrIndex:-1,value:o}];a.length;){var u=a.pop(),l=u.nestedArrIndex,c=u.value;if(y(c))if(A(c)&&!_(c)){var d={v:c,i:l,n:n.norm.get(c)};s.push(d)}else g(c)&&c.forEach((function(t,e){a.push({nestedArrIndex:e,value:t})}))}r.$[i]=s}else if(A(o)&&!_(o)){var h={v:o,n:n.norm.get(o)};r.$[i]=h}})),this.records.push(r)}},{key:"toJSON",value:function(){return{keys:this.keys,records:this.records}}}]),t}();function O(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.getFn,i=void 0===r?T.getFn:r,o=n.fieldNormWeight,s=void 0===o?T.fieldNormWeight:o,a=new L({getFn:i,fieldNormWeight:s});return a.setKeys(t.map(I)),a.setSources(e),a.create(),a}function P(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.errors,r=void 0===n?0:n,i=e.currentLocation,o=void 0===i?0:i,s=e.expectedLocation,a=void 0===s?0:s,u=e.distance,l=void 0===u?T.distance:u,c=e.ignoreLocation,d=void 0===c?T.ignoreLocation:c,h=r/t.length;if(d)return h;var f=Math.abs(a-o);return l?h+f/l:f?1:h}var R=32;function D(t){for(var e={},n=0,r=t.length;n<r;n+=1){var i=t.charAt(n);e[i]=(e[i]||0)|1<<r-n-1}return e}var z=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=r.location,s=void 0===o?T.location:o,a=r.threshold,u=void 0===a?T.threshold:a,l=r.distance,c=void 0===l?T.distance:l,d=r.includeMatches,h=void 0===d?T.includeMatches:d,f=r.findAllMatches,p=void 0===f?T.findAllMatches:f,g=r.minMatchCharLength,A=void 0===g?T.minMatchCharLength:g,m=r.isCaseSensitive,v=void 0===m?T.isCaseSensitive:m,y=r.ignoreLocation,_=void 0===y?T.ignoreLocation:y;if(i(this,t),this.options={location:s,threshold:u,distance:c,includeMatches:h,findAllMatches:p,minMatchCharLength:A,isCaseSensitive:v,ignoreLocation:_},this.pattern=v?e:e.toLowerCase(),this.chunks=[],this.pattern.length){var b=function(t,e){n.chunks.push({pattern:t,alphabet:D(t),startIndex:e})},x=this.pattern.length;if(x>R){for(var C=0,w=x%R,B=x-w;C<B;)b(this.pattern.substr(C,R),C),C+=R;if(w){var I=x-R;b(this.pattern.substr(I),I)}}else b(this.pattern,0)}}return s(t,[{key:"searchIn",value:function(t){var e=this.options,n=e.isCaseSensitive,r=e.includeMatches;if(n||(t=t.toLowerCase()),this.pattern===t){var i={isMatch:!0,score:0};return r&&(i.indices=[[0,t.length-1]]),i}var o=this.options,s=o.location,a=o.distance,u=o.threshold,l=o.findAllMatches,c=o.minMatchCharLength,d=o.ignoreLocation,f=[],p=0,g=!1;this.chunks.forEach((function(e){var n=e.pattern,i=e.alphabet,o=e.startIndex,A=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=r.location,o=void 0===i?T.location:i,s=r.distance,a=void 0===s?T.distance:s,u=r.threshold,l=void 0===u?T.threshold:u,c=r.findAllMatches,d=void 0===c?T.findAllMatches:c,h=r.minMatchCharLength,f=void 0===h?T.minMatchCharLength:h,p=r.includeMatches,g=void 0===p?T.includeMatches:p,A=r.ignoreLocation,m=void 0===A?T.ignoreLocation:A;if(e.length>R)throw new Error("Pattern length exceeds max of ".concat(R,"."));for(var v,y=e.length,_=t.length,b=Math.max(0,Math.min(o,_)),x=l,C=b,w=f>1||g,B=w?Array(_):[];(v=t.indexOf(e,C))>-1;){var I=P(e,{currentLocation:v,expectedLocation:b,distance:a,ignoreLocation:m});if(x=Math.min(I,x),C=v+y,w)for(var k=0;k<y;)B[v+k]=1,k+=1}C=-1;for(var S=[],E=1,M=y+_,L=1<<y-1,O=0;O<y;O+=1){for(var D=0,z=M;D<z;)P(e,{errors:O,currentLocation:b+z,expectedLocation:b,distance:a,ignoreLocation:m})<=x?D=z:M=z,z=Math.floor((M-D)/2+D);M=z;var F=Math.max(1,b-z+1),N=d?_:Math.min(b+z,_)+y,j=Array(N+2);j[N+1]=(1<<O)-1;for(var Y=N;Y>=F;Y-=1){var W=Y-1,q=n[t.charAt(W)];if(w&&(B[W]=+!!q),j[Y]=(j[Y+1]<<1|1)&q,O&&(j[Y]|=(S[Y+1]|S[Y])<<1|1|S[Y+1]),j[Y]&L&&(E=P(e,{errors:O,currentLocation:W,expectedLocation:b,distance:a,ignoreLocation:m}))<=x){if(x=E,(C=W)<=b)break;F=Math.max(1,2*b-C)}}if(P(e,{errors:O+1,currentLocation:b,expectedLocation:b,distance:a,ignoreLocation:m})>x)break;S=j}var U={isMatch:C>=0,score:Math.max(.001,E)};if(w){var Z=function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:T.minMatchCharLength,n=[],r=-1,i=-1,o=0,s=t.length;o<s;o+=1){var a=t[o];a&&-1===r?r=o:a||-1===r||((i=o-1)-r+1>=e&&n.push([r,i]),r=-1)}return t[o-1]&&o-r>=e&&n.push([r,o-1]),n}(B,f);Z.length?g&&(U.indices=Z):U.isMatch=!1}return U}(t,n,i,{location:s+o,distance:a,threshold:u,findAllMatches:l,minMatchCharLength:c,includeMatches:r,ignoreLocation:d}),m=A.isMatch,v=A.score,y=A.indices;m&&(g=!0),p+=v,m&&y&&(f=[].concat(h(f),h(y)))}));var A={isMatch:g,score:g?p/this.chunks.length:1};return g&&r&&(A.indices=f),A}}]),t}(),F=function(){function t(e){i(this,t),this.pattern=e}return s(t,[{key:"search",value:function(){}}],[{key:"isMultiMatch",value:function(t){return N(t,this.multiRegex)}},{key:"isSingleMatch",value:function(t){return N(t,this.singleRegex)}}]),t}();function N(t,e){var n=t.match(e);return n?n[1]:null}var j=function(t){u(n,t);var e=d(n);function n(t){return i(this,n),e.call(this,t)}return s(n,[{key:"search",value:function(t){var e=t===this.pattern;return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}}],[{key:"type",get:function(){return"exact"}},{key:"multiRegex",get:function(){return/^="(.*)"$/}},{key:"singleRegex",get:function(){return/^=(.*)$/}}]),n}(F),Y=function(t){u(n,t);var e=d(n);function n(t){return i(this,n),e.call(this,t)}return s(n,[{key:"search",value:function(t){var e=-1===t.indexOf(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}}],[{key:"type",get:function(){return"inverse-exact"}},{key:"multiRegex",get:function(){return/^!"(.*)"$/}},{key:"singleRegex",get:function(){return/^!(.*)$/}}]),n}(F),W=function(t){u(n,t);var e=d(n);function n(t){return i(this,n),e.call(this,t)}return s(n,[{key:"search",value:function(t){var e=t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}}],[{key:"type",get:function(){return"prefix-exact"}},{key:"multiRegex",get:function(){return/^\^"(.*)"$/}},{key:"singleRegex",get:function(){return/^\^(.*)$/}}]),n}(F),q=function(t){u(n,t);var e=d(n);function n(t){return i(this,n),e.call(this,t)}return s(n,[{key:"search",value:function(t){var e=!t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}}],[{key:"type",get:function(){return"inverse-prefix-exact"}},{key:"multiRegex",get:function(){return/^!\^"(.*)"$/}},{key:"singleRegex",get:function(){return/^!\^(.*)$/}}]),n}(F),U=function(t){u(n,t);var e=d(n);function n(t){return i(this,n),e.call(this,t)}return s(n,[{key:"search",value:function(t){var e=t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[t.length-this.pattern.length,t.length-1]}}}],[{key:"type",get:function(){return"suffix-exact"}},{key:"multiRegex",get:function(){return/^"(.*)"\$$/}},{key:"singleRegex",get:function(){return/^(.*)\$$/}}]),n}(F),Z=function(t){u(n,t);var e=d(n);function n(t){return i(this,n),e.call(this,t)}return s(n,[{key:"search",value:function(t){var e=!t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}}],[{key:"type",get:function(){return"inverse-suffix-exact"}},{key:"multiRegex",get:function(){return/^!"(.*)"\$$/}},{key:"singleRegex",get:function(){return/^!(.*)\$$/}}]),n}(F),H=function(t){u(n,t);var e=d(n);function n(t){var r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=o.location,a=void 0===s?T.location:s,u=o.threshold,l=void 0===u?T.threshold:u,c=o.distance,d=void 0===c?T.distance:c,h=o.includeMatches,f=void 0===h?T.includeMatches:h,p=o.findAllMatches,g=void 0===p?T.findAllMatches:p,A=o.minMatchCharLength,m=void 0===A?T.minMatchCharLength:A,v=o.isCaseSensitive,y=void 0===v?T.isCaseSensitive:v,_=o.ignoreLocation,b=void 0===_?T.ignoreLocation:_;return i(this,n),(r=e.call(this,t))._bitapSearch=new z(t,{location:a,threshold:l,distance:d,includeMatches:f,findAllMatches:g,minMatchCharLength:m,isCaseSensitive:y,ignoreLocation:b}),r}return s(n,[{key:"search",value:function(t){return this._bitapSearch.searchIn(t)}}],[{key:"type",get:function(){return"fuzzy"}},{key:"multiRegex",get:function(){return/^"(.*)"$/}},{key:"singleRegex",get:function(){return/^(.*)$/}}]),n}(F),$=function(t){u(n,t);var e=d(n);function n(t){return i(this,n),e.call(this,t)}return s(n,[{key:"search",value:function(t){for(var e,n=0,r=[],i=this.pattern.length;(e=t.indexOf(this.pattern,n))>-1;)n=e+i,r.push([e,n-1]);var o=!!r.length;return{isMatch:o,score:o?0:1,indices:r}}}],[{key:"type",get:function(){return"include"}},{key:"multiRegex",get:function(){return/^'"(.*)"$/}},{key:"singleRegex",get:function(){return/^'(.*)$/}}]),n}(F),X=[j,$,W,q,Z,U,Y,H],V=X.length,Q=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,G=new Set([H.type,$.type]),K=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.isCaseSensitive,o=void 0===r?T.isCaseSensitive:r,s=n.includeMatches,a=void 0===s?T.includeMatches:s,u=n.minMatchCharLength,l=void 0===u?T.minMatchCharLength:u,c=n.ignoreLocation,d=void 0===c?T.ignoreLocation:c,h=n.findAllMatches,f=void 0===h?T.findAllMatches:h,p=n.location,g=void 0===p?T.location:p,A=n.threshold,m=void 0===A?T.threshold:A,v=n.distance,y=void 0===v?T.distance:v;i(this,t),this.query=null,this.options={isCaseSensitive:o,includeMatches:a,minMatchCharLength:l,findAllMatches:f,ignoreLocation:d,location:g,threshold:m,distance:y},this.pattern=o?e:e.toLowerCase(),this.query=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.split("|").map((function(t){for(var n=t.trim().split(Q).filter((function(t){return t&&!!t.trim()})),r=[],i=0,o=n.length;i<o;i+=1){for(var s=n[i],a=!1,u=-1;!a&&++u<V;){var l=X[u],c=l.isMultiMatch(s);c&&(r.push(new l(c,e)),a=!0)}if(!a)for(u=-1;++u<V;){var d=X[u],h=d.isSingleMatch(s);if(h){r.push(new d(h,e));break}}}return r}))}(this.pattern,this.options)}return s(t,[{key:"searchIn",value:function(t){var e=this.query;if(!e)return{isMatch:!1,score:1};var n=this.options,r=n.includeMatches;t=n.isCaseSensitive?t:t.toLowerCase();for(var i=0,o=[],s=0,a=0,u=e.length;a<u;a+=1){var l=e[a];o.length=0,i=0;for(var c=0,d=l.length;c<d;c+=1){var f=l[c],p=f.search(t),g=p.isMatch,A=p.indices,m=p.score;if(!g){s=0,i=0,o.length=0;break}if(i+=1,s+=m,r){var v=f.constructor.type;G.has(v)?o=[].concat(h(o),h(A)):o.push(A)}}if(i){var y={isMatch:!0,score:s/i};return r&&(y.indices=o),y}}return{isMatch:!1,score:1}}}],[{key:"condition",value:function(t,e){return e.useExtendedSearch}}]),t}(),J=[];function tt(t,e){for(var n=0,r=J.length;n<r;n+=1){var i=J[n];if(i.condition(t,e))return new i(t,e)}return new z(t,e)}var et="$and",nt="$path",rt=function(t){return!(!t[et]&&!t.$or)},it=function(t){return a({},et,Object.keys(t).map((function(e){return a({},e,t[e])})))};function ot(t,e){var n=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).auto,r=void 0===n||n;return rt(t)||(t=it(t)),function t(n){var i=Object.keys(n),o=function(t){return!!t[nt]}(n);if(!o&&i.length>1&&!rt(n))return t(it(n));if(function(t){return!g(t)&&v(t)&&!rt(t)}(n)){var s=o?n[nt]:i[0],a=o?n.$val:n[s];if(!A(a))throw new Error(function(t){return"Invalid value for key ".concat(t)}(s));var u={keyId:S(s),pattern:a};return r&&(u.searcher=tt(a,e)),u}var l={children:[],operator:i[0]};return i.forEach((function(e){var r=n[e];g(r)&&r.forEach((function(e){l.children.push(t(e))}))})),l}(t)}function st(t,e){var n=t.matches;e.matches=[],y(n)&&n.forEach((function(t){if(y(t.indices)&&t.indices.length){var n={indices:t.indices,value:t.value};t.key&&(n.key=t.key.src),t.idx>-1&&(n.refIndex=t.idx),e.matches.push(n)}}))}function at(t,e){e.score=t.score}var ut=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2?arguments[2]:void 0;i(this,t),this.options=n(n({},T),r),this.options.useExtendedSearch,this._keyStore=new B(this.options.keys),this.setCollection(e,o)}return s(t,[{key:"setCollection",value:function(t,e){if(this._docs=t,e&&!(e instanceof L))throw new Error("Incorrect 'index' type");this._myIndex=e||O(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}},{key:"add",value:function(t){y(t)&&(this._docs.push(t),this._myIndex.add(t))}},{key:"remove",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return!1},e=[],n=0,r=this._docs.length;n<r;n+=1){var i=this._docs[n];t(i,n)&&(this.removeAt(n),n-=1,r-=1,e.push(i))}return e}},{key:"removeAt",value:function(t){this._docs.splice(t,1),this._myIndex.removeAt(t)}},{key:"getIndex",value:function(){return this._myIndex}},{key:"search",value:function(t){var e=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).limit,n=void 0===e?-1:e,r=this.options,i=r.includeMatches,o=r.includeScore,s=r.shouldSort,a=r.sortFn,u=r.ignoreFieldNorm,l=A(t)?A(this._docs[0])?this._searchStringList(t):this._searchObjectList(t):this._searchLogical(t);return function(t,e){var n=e.ignoreFieldNorm,r=void 0===n?T.ignoreFieldNorm:n;t.forEach((function(t){var e=1;t.matches.forEach((function(t){var n=t.key,i=t.norm,o=t.score,s=n?n.weight:null;e*=Math.pow(0===o&&s?Number.EPSILON:o,(s||1)*(r?1:i))})),t.score=e}))}(l,{ignoreFieldNorm:u}),s&&l.sort(a),m(n)&&n>-1&&(l=l.slice(0,n)),function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.includeMatches,i=void 0===r?T.includeMatches:r,o=n.includeScore,s=void 0===o?T.includeScore:o,a=[];return i&&a.push(st),s&&a.push(at),t.map((function(t){var n=t.idx,r={item:e[n],refIndex:n};return a.length&&a.forEach((function(e){e(t,r)})),r}))}(l,this._docs,{includeMatches:i,includeScore:o})}},{key:"_searchStringList",value:function(t){var e=tt(t,this.options),n=this._myIndex.records,r=[];return n.forEach((function(t){var n=t.v,i=t.i,o=t.n;if(y(n)){var s=e.searchIn(n),a=s.isMatch,u=s.score,l=s.indices;a&&r.push({item:n,idx:i,matches:[{score:u,value:n,norm:o,indices:l}]})}})),r}},{key:"_searchLogical",value:function(t){var e=this,n=ot(t,this.options),r=function t(n,r,i){if(!n.children){var o=n.keyId,s=n.searcher,a=e._findMatches({key:e._keyStore.get(o),value:e._myIndex.getValueForItemAtKeyId(r,o),searcher:s});return a&&a.length?[{idx:i,item:r,matches:a}]:[]}for(var u=[],l=0,c=n.children.length;l<c;l+=1){var d=t(n.children[l],r,i);if(d.length)u.push.apply(u,h(d));else if(n.operator===et)return[]}return u},i=this._myIndex.records,o={},s=[];return i.forEach((function(t){var e=t.$,i=t.i;if(y(e)){var a=r(n,e,i);a.length&&(o[i]||(o[i]={idx:i,item:e,matches:[]},s.push(o[i])),a.forEach((function(t){var e,n=t.matches;(e=o[i].matches).push.apply(e,h(n))})))}})),s}},{key:"_searchObjectList",value:function(t){var e=this,n=tt(t,this.options),r=this._myIndex,i=r.keys,o=r.records,s=[];return o.forEach((function(t){var r=t.$,o=t.i;if(y(r)){var a=[];i.forEach((function(t,i){a.push.apply(a,h(e._findMatches({key:t,value:r[i],searcher:n})))})),a.length&&s.push({idx:o,item:r,matches:a})}})),s}},{key:"_findMatches",value:function(t){var e=t.key,n=t.value,r=t.searcher;if(!y(n))return[];var i=[];if(g(n))n.forEach((function(t){var n=t.v,o=t.i,s=t.n;if(y(n)){var a=r.searchIn(n),u=a.isMatch,l=a.score,c=a.indices;u&&i.push({score:l,key:e,value:n,idx:o,norm:s,indices:c})}}));else{var o=n.v,s=n.n,a=r.searchIn(o),u=a.isMatch,l=a.score,c=a.indices;u&&i.push({score:l,key:e,value:o,norm:s,indices:c})}return i}}]),t}();ut.version="7.0.0",ut.createIndex=O,ut.parseIndex=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.getFn,r=void 0===n?T.getFn:n,i=e.fieldNormWeight,o=void 0===i?T.fieldNormWeight:i,s=t.keys,a=t.records,u=new L({getFn:r,fieldNormWeight:o});return u.setKeys(s),u.setIndexRecords(a),u},ut.config=T,ut.parseQuery=ot,function(){J.push.apply(J,arguments)}(K);var lt=ut;t.exports=lt}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nc=void 0,n(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,