
const noSoundDuration = 10;

//updates the duration of an event; the update concerns the timeline
function updateEventDuration(event: PresentationNode): void {
    const timeline = timelines.get(event);
    if (soundDurations.get(event) != undefined) {
        timeline.style.flexGrow = soundDurations.get(event).toString();
        timeline.classList.remove('nosound');
    } else {
        if (lastEvent(event)) {
            timeline.style.display = 'none';
        }
        else {
            timeline.style.flexGrow = noSoundDuration.toString();
            timeline.classList.add('nosound');
        }
    }

}

//creates the timeline at the bottom of the screen
function makeTimeline(): void {

    //for each element, find the duration of its audio
    function computeDuration(event: PresentationNode): void {
        for (let i = 0; i < event.children.length; i++) {
            soundOffset.set(event.children[i], totalSoundDuration);
            try {
                const duration = manifest.soundDict[event.id][i].duration;
                soundDurations.set(event.children[i], duration);
                totalSoundDuration += duration;
            } catch (e) {
                totalSoundDuration += noSoundDuration;
            }


            if (event.children[i].type == 'child')
                computeDuration(event.children[i]);
        }

    }

    //create a div in the timeline for every non-root element of the 
    function makeTimelineRec(event: PresentationNode): void {

        if (parentEvent(event) == undefined) {
            //the root has no element in the timeline

        } else if (event.merged) {
            //if an event is merged with the previous one, then also no timeline

        } else {
            const big = document.createElement('div');
            const small = document.createElement('div');
            small.classList.add('progress-filler');
            small.style.width = '0%';
            big.appendChild(small);
            timeLine.appendChild(big);

            big.addEventListener('click', function (e) {
                timelineClicked(event, e);
            })
            timelines.set(event, big);
            updateEventDuration(event);
        }
        //recursively call for children
        if (event.type == 'child')
            for (const child of event.children)
                makeTimelineRec(child);
    }

    const timeLine = document.getElementById('progress-line');
    computeDuration(eventTree);
    makeTimelineRec(eventTree);

}



**************



//makes visible or invisible the appropriate objects in the slide, so that events before (not including) index have already been performed
function updateEventsSVG(slide: PresentationNode, index: number): void {
    if (slide.type != 'child' || svgMap.get(slide) == undefined)
        return;

    for (const x of eventSVGs.get(slide)) {
        let visible = x.startVisible;
        for (let i = 0; i < index; i++) {
            if (svgMap.get(slide.children[i]) == x.svg)
                visible = (slide.children[i].type == 'show')
        }
        if (visible)
            x.svg.style.opacity = '1';
        else
            x.svg.style.opacity = '0';
    }

    //call recursively for child slides
    for (const child of slide.children) {
        if (child.type == 'child') {
            if (eventIndex(child) < index) {
                updateEventsSVG(child, child.children.length);
            } else {
                updateEventsSVG(child, 0)
            }
        }
    }
}



//add a new node to the slide tree
//the svg
function svgLoaded(node: PresentationNode, index: number): void {




    localRect.set(node, getBoundRect(svgMap.get(node)));
    eventSVGs.set(node, []);
    //hide objects that are either a placeholder rectangle, or the first event is show
    for (const c of svgMap.get(node).children) {
        const child = c as SVGElement;
        for (const event of node.children) {
            if (event.type == 'show' && child.id == event.id) {
                eventSVGs.get(node).push({
                    svg: child,
                    startVisible: false
                });
                break;
            }
            if (event.type == 'hide' && child.id == event.id) {
                eventSVGs.get(node).push({
                    svg: child,
                    startVisible: true
                });
                break;
            }

            if (event.type == 'child' && event.id == child.id)
                child.style.opacity = '0';
        }
    }

    //attach each show or hide event to its corresponding svg element
    for (const event of node.children) {
        if (event.type == 'show' || event.type == 'hide') {
            for (const c of svgMap.get(node).children) {
                const child = c as SVGElement;
                if (child.id == event.id) {
                    svgMap.set(event, child);
                }
            }

        }
    }

    updateEventsSVG(node, index);
    //compute the transformation with respect to the local coordinates of the parent
    if (parentEvent(node) == undefined) {
        transforms.set(node, idTransform());
    } else {
        let placeholder: Rect;
        for (const s of svgMap.get(parentEvent(node)).children)
            if (s.id == node.id) {
                //s is the child link. This could be a group, or a rectangle. We find the dimensions by searching for a rectangle, which could be s or one of its children (the latter happens when s is a group that contains other stuff).
                let rect: SVGRectElement = null;
                if (s.nodeName == 'rect')
                    rect = (s as unknown) as SVGRectElement;
                else
                    for (const c of s.children) {
                        if (c.nodeName == 'rect')
                            rect = (c as unknown) as SVGRectElement;
                    }
                placeholder = {
                    x: (rect.x as SVGAnimatedLength).baseVal.value,
                    y: (rect.y as SVGAnimatedLength).baseVal.value,
                    width: (rect.width as SVGAnimatedLength).baseVal.value,
                    height: (rect.height as SVGAnimatedLength).baseVal.value
                };
            }
        const target = applyTransform(transforms.get(parentEvent(node)), placeholder);
        transforms.set(node, getTransform(localRect.get(node), target));
    }
    svgMap.get(node).setAttribute("transform", transformToString(transforms.get(node)));
    document.getElementById("svg").appendChild(svgMap.get(node));
    if (svgdefs.get(node) != undefined)
        document.getElementById("svg").appendChild(svgdefs.get(node));
}


//loads the SVG for the given node in the slide tree
function loadSVG(node: PresentationNode, index = 0, callback: (x: boolean) => void = null) {
    if (node.type != 'child' || svgMap.get(node) != undefined) {
        //there is nothing to load, so the callback can be called
        if (node.type == 'child')
            updateEventsSVG(node, index);
        if (callback != null)
            callback(true);
    } else {
        loadSounds(node);
        const ob = document.createElement("object");
        const file = fileName(node.id, 'image.svg');
        ob.setAttribute("data", file);
        ob.setAttribute("type", "image/svg+xml");
        ob.classList.add("hidden-svg");
        document.body.appendChild(ob);
        ob.onload = function () {
            try {
                //in principle, the right element should be the first child, but Marek SokoÅ‚owski mentioned that expressVPN changes inserts some wrong children, hence the following code
                for (const child of ob.contentDocument.firstElementChild.children) {
                    if (child.nodeName == 'g')
                        svgMap.set(node, child as SVGElement);

                    //the svg has also some definitions, which will contain images
                    if (child.nodeName == 'defs') {
                        const defs = child as SVGDefsElement;
                        svgdefs.set(node, defs);
                        cleanDefs(defs) // this function is a hack, it removes clip masks from the definitions
                    }


                }

                //remove the loading style (red) from the tree view
                removeLoading(node);

                svgLoaded(node, index);

                if (callback != null) {
                    callback(true);
                }
            } catch (exception) {
                // this means that the svg failed to load correctly
                markDisabled(node);
                svgMap.set(node, undefined); //maybe this line is not needed
                userAlert("Failed to load svg for " + node.name);
                if (callback != null) {
                    callback(false);
                }
            }
        }
    }
}


//pushes a list of slides. The root is the first slide, which is assumed to be loaded, and then path contains a list of directions (which event number), that defines a path; ordered from last to first. The after parameter is a callback to be performed once the last slide is pushed.
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function pushIndexList(root: PresentationNode, path: number[], after = (ignored: PresentationNode) => {/*do nothing */ }): void {
    if (path.length == 0) {
        curEvent = root;
        if (parentEvent(parentEvent(curEvent)) == null) {
            zoomSlide(parentEvent(curEvent), 0)
        } else {
            zoomSlide(parentEvent(curEvent))
        }
        updatePageNumber();
        after(root);
    } else {
        const index = path.pop();
        // const event = root.children[index];
        const callback = (success: boolean) => {
            if (success) {
                for (let i = 0; i < root.children.length; i++) {
                    const event = root.children[i];
                    if (event.type == 'child') {
                        if (i < index) {
                            loadSVG(event, event.children.length);
                        }
                        if (i >= index) {
                            loadSVG(event, 0);
                        }
                    }
                    if (i == index)
                        pushIndexList(event, path, after);
                }
            } else {
                userAlert('Failed to push slide ' + root.name)
            }
        }
        loadSVG(root, index, callback);
    }

}



//the move to the prev/next event, depending on whether dir is -1 or 1. One of the longer functions, because there are numerous combinations of push, pop, next sibling, etc.
function changeEvent(dir: number): void {

    if (dir == 1)
        moveHead(1)
    else
        moveHead(-1);



    if (dir == 1) {
        if (lastEvent(curEvent)) {
            soundStop();
        }
        else {
            if (curEvent.type == 'child') {
                pushIndexList(parentEvent(curEvent), [0, eventIndex(curEvent)])
            } else
                if (curEvent.type == 'show' || curEvent.type == 'hide') {
                    // hide or show
                    do {
                        curEvent = treeSibling(curEvent, 1);
                    } while (curEvent.merged);
                } else
                    if (curEvent.type == 'finish') {
                        const nextEvent = treeSibling(parentEvent(curEvent), 1);
                        if (nextEvent.merged) {
                            //we go directly to the next child
                            if (nextEvent.type != 'child') {
                                throw ('a child merged with a non-child');
                            }
                            

                            pushIndexList(parentEvent(nextEvent), [0, eventIndex(nextEvent)])
                        } else {
                            //we zoom out to the parent
                            curEvent = nextEvent;
                        }

                        // pop the stack


                    }

        }
        if (soundState == SoundState.Play) {
            soundPlayCurrentEvent();
        }

        if (soundState == SoundState.Record)
            soundRecord();
    } else {
        //direction is backward
        
        const prevEvent = treeSibling(curEvent, -1);

        if (prevEvent == null) //first event of its group
        {
            //we need to pop the current slide
            if (parentEvent(curEvent) == eventTree) {
                // userAlert("Cannot move before first event");
            } else {
                curEvent = parentEvent(curEvent);
                if (curEvent.merged) {
                    const prevEvent = treeSibling(curEvent, -1);
                    pushIndexList(parentEvent(prevEvent), [prevEvent.children.length - 1, eventIndex(prevEvent)]);
                } 


            }

        } else
            if (prevEvent.type == 'show' || prevEvent.type == 'hide') {
                // hide or show
                do {
                    curEvent = treeSibling(curEvent, -1);
                } while (curEvent.merged == true);
                
            } else
                if (prevEvent.type == 'child') {
                    pushIndexList(parentEvent(prevEvent), [prevEvent.children.length - 1, eventIndex(prevEvent)]);
                }

        if (soundState == SoundState.Play) {
            soundPlayCurrentEvent(-1);
        }

    }

   
}

